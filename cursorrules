# AI Agent Rules for RateMyEmployer Project

## Overview

Welcome, AI Agent! Your mission is to assist in developing and maintaining the **RateMyEmployer** project. You have access to the current codebase and documentation. Your goal is to ensure the project maintains high standards of performance, scalability, security, and maintainability. Follow these guidelines for all development tasks.

## Table of Contents

1. [Project Setup](#project-setup)
2. [Code Structure](#code-structure)
3. [Development Standards](#development-standards)
4. [Testing Strategy](#testing-strategy)
5. [Documentation](#documentation)
6. [Security](#security)
7. [Performance](#performance)
8. [Monitoring](#monitoring)
9. [Continuous Improvement](#continuous-improvement)

---

## Project Setup

### 1. Environment Setup

- **Clone Repository:**
  ```bash
  git clone https://github.com/YOUR_USERNAME/ratemyemployer.git
  ```
- **Install Dependencies:**
  ```bash
  npm install
  ```
- **Configure Environment Variables:**
  ```bash
  cp .env.example .env.local
  ```
  - Populate `.env.local` with the required environment variables:
    - `NEXT_PUBLIC_SUPABASE_URL`
    - `NEXT_PUBLIC_SUPABASE_ANON_KEY`
    - `NEXT_PUBLIC_GOOGLE_MAPS_API_KEY` (optional)

### 2. Development Requirements

- **Node.js:**
  ```bash
  node -v
  ```
  - Ensure version is 20.0.0 or higher.
- **npm:**
  ```bash
  npm -v
  ```
  - Ensure version is 10.0.0 or higher.
- **TypeScript:**
  ```bash
  tsc -v
  ```
  - Ensure version is 5.3 or higher.
- **Next.js:**
  ```bash
  npx next -v
  ```
  - Ensure version is 15.1 or higher.

### 3. Database Setup

- **Supabase Configuration:**
  - Create a Supabase account and set up a new project.
  - Configure the database schema to match application requirements.
  - Implement Row-Level Security (RLS) policies to secure data access.

- **Type Generation:**
  ```bash
  npx supabase gen types typescript --project-id "your-project-id" > src/types/supabase.ts
  ```

---

## Code Structure

### 1. Directory Layout

Maintain a clear and scalable directory structure:

src/
├── app/ # Next.js 13 app router
├── components/ # Reusable React components
├── contexts/ # React contexts
├── hooks/ # Custom React hooks
├── lib/ # Utilities and helpers
├── types/ # TypeScript definitions
├── pages/ # Next.js pages
├── styles/ # Global and component-specific styles
└── tests/ # Test suites

tests/
├── e2e/            # End-to-end tests
├── fixtures/       # Test data
└── utils/          # Test utilities

### 2. File Naming Conventions

- **Components:** `PascalCase.tsx`
- **Hooks:** `useHookName.ts`
- **Utilities:** `camelCase.ts`
- **Types:** `PascalCase.d.ts`
- **Tests:** `*.test.ts` or `*.spec.ts`

### 3. Code Modularity

- **Single Responsibility:** Each module or component should have a single responsibility.
- **Reusability:** Design components and utilities to be reusable across different parts of the application.

### 4. Component Structure

- **Example Component:**
  ```typescript
  // src/components/ExampleComponent.tsx
  import { type FC } from 'react'
  import { cn } from '@/lib/utils'

  interface ExampleProps {
    title: string
    children: React.ReactNode
  }

  export const Example: FC<ExampleProps> = ({ title, children }) => {
    return (
      <div className={cn('example-class')}>
        <h2>{title}</h2>
        {children}
      </div>
    )
  }
  ```

---

## Development Standards

### 1. TypeScript

- **Strict Mode:** Enable `strict` mode in `tsconfig.json` for type safety.
- **Explicit Types:** Always define explicit types for variables, function parameters, and return values.
- **Leverage Type Inference:** Use TypeScript's type inference capabilities where appropriate.
- **Document Complex Types:** Document complex types and interfaces using JSDoc comments.

### 2. Code Quality

- **Linting:** Enforce code quality and standards.
  ```bash
  npm install eslint --save-dev
  npx eslint --init
  ```
- **Type Checking:** Ensure type safety and catch potential issues.
  ```bash
  npm run type-check
  ```
- **Formatting:** Ensure consistent code formatting.
  ```bash
  npm install prettier eslint-config-prettier eslint-plugin-prettier --save-dev
  ```
- **Configuration:**
  - Integrate ESLint with Prettier to avoid conflicts.
  - Add `lint`, `format`, and `type-check` scripts in `package.json`:
    ```json
    {
      "scripts": {
        "lint": "eslint . --ext .ts,.tsx",
        "format": "prettier --write .",
        "type-check": "tsc"
      }
    }
    ```

### 3. State Management

- **Global State:** Use React Context for global state management.
- **Local State:** Prefer hooks for local state management.
- **Data Fetching:** Implement proper data fetching patterns.
- **Loading and Error States:** Handle loading and error states appropriately.

### 4. Error Handling

- Implement comprehensive error handling using `try-catch` blocks.
- Provide meaningful error messages to aid in debugging.
- Log errors for monitoring and analysis.

---

## Testing Strategy

### 1. E2E Testing with Playwright

- **Run All Tests:**
  ```bash
  npx playwright test
  ```
- **Run Specific Test:**
  ```bash
  npx playwright test company.spec.ts
  ```
- **Show Report:**
  ```bash
  npx playwright show-report
  ```

### 2. Test Structure

Organize tests within `src/__tests__/`:

src/__tests__/
├── components/     # Component tests
├── hooks/         # Hook tests
├── lib/           # Library/utility tests
├── integration/   # Integration tests
├── e2e/           # End-to-end tests
├── utils/         # Test utilities
│   ├── renderUtils.tsx
│   ├── customMatchers.ts
│   └── testHelpers.ts
└── mocks/         # Mock data and handlers
    ├── mockData.ts
    └── handlers.ts
```

### 3. Test Coverage

- **Maintain High Coverage:** Ensure high coverage for critical paths.
- **Test Error Scenarios:** Verify error handling and edge cases.
- **Verify Security Measures:** Test security policies and measures.
- **Test Performance Impact:** Ensure performance metrics are met.

---

## Documentation

### 1. Code Documentation

- **JSDoc Comments:**
  - Document functions, classes, and methods with JSDoc for better readability.
  - Example:
    ```typescript
    /**
     * Calculates the average rating for a company.
     * @param {number[]} ratings - Array of company ratings
     * @returns {number} The average rating
     * @throws {Error} If ratings array is empty
     */
    export const calculateAverageRating = (ratings: number[]): number => {
      if (!ratings.length) throw new Error('No ratings provided')
      return ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length
    }
    ```

- **Prop Documentation:**
  - Document component props using TypeScript interfaces and JSDoc.

### 2. Project Documentation

- **README.md:**
  - Provide a comprehensive overview of the project.
  - Include setup instructions, features, and contribution guidelines.

- **CHANGELOG.md:**
  - Maintain a changelog to track project updates and improvements.

- **Documentation Hub:**
  - Centralize all documentation in `docs/`.
  - Include guides on onboarding, system checks, error handling, and more.

### 3. Automated Documentation Generation

- Utilize tools to generate documentation from comments and code annotations.
- Example script to generate documentation:
  ```bash
  npm run docs
  ```

---

## Security

### 1. Authentication

- **Supabase Auth:**
  - Implement secure authentication flows.
  - Use middleware for protection.
  - Handle session management.
  - Validate user permissions.

### 2. Data Protection

- **Input Validation:**
  - Use libraries like Zod for validating user inputs.

- **Sanitization:**
  - Sanitize outputs to prevent cross-site scripting (XSS) and other injection attacks.

- **Encryption:**
  - Encrypt sensitive data both in transit and at rest.

### 3. Dependency Management

- **Regular Audits:**
  - Run `npm audit` regularly to identify and fix vulnerabilities.
- **Update Dependencies:**
  - Keep all dependencies up-to-date to mitigate security risks.

### 4. Row-Level Security (RLS)

- **Policy Creation:**
  - Define RLS policies in Supabase to control data access at the database level.

---

## Performance

### 1. Optimization Techniques

- **Next.js Image Component:**
  - Utilize Next.js `<Image>` component for automatic image optimization.

- **Code Splitting:**
  - Implement dynamic imports to reduce initial bundle size.

- **Lazy Loading:**
  - Lazy load non-critical components to enhance loading performance.

- **Caching Strategies:**
  - Implement caching mechanisms for frequently accessed API routes.

- **Static Site Generation (SSG) and Incremental Static Regeneration (ISR):**
  - Leverage Next.js features to serve pre-rendered pages for better performance.

### 2. Monitoring

- **Performance Metrics:**
  - Track metrics like First Contentful Paint (FCP) and Time to Interactive (TTI).

- **Profiling Tools:**
  - Use tools like Lighthouse and Web Vitals for performance analysis.

### 3. Optimized Database Queries

- **Query Optimization:**
  - Optimize database queries to improve performance.

---

## Monitoring

### 1. Regular Updates

- **Dependencies:**
  - Routinely update project dependencies to their latest stable versions.
- **Frameworks and Libraries:**
  - Stay updated with Next.js, Supabase, and other core technologies.

### 2. Monitoring Tools

- **Error Tracking:**
  - Integrate tools like Sentry for real-time error monitoring.
- **Performance Monitoring:**
  - Use services like Vercel Analytics or Google Analytics to monitor application performance.

### 3. Backup and Recovery

- **Database Backups:**
  - Schedule regular backups of the Supabase database.
- **Disaster Recovery Plan:**
  - Develop and maintain a disaster recovery plan to handle unexpected failures.

---

## Continuous Improvement

### 1. Feedback Loop

- **User Feedback:**
  - Collect and analyze user feedback to identify areas for improvement.
- **Team Reviews:**
  - Conduct regular code reviews and retrospectives to enhance development practices.

### 2. Refactoring

- **Code Quality:**
  - Continuously refactor code to improve readability, maintainability, and performance.
- **Eliminate Technical Debt:**
  - Address technical debt promptly to prevent long-term issues.

### 3. Innovation

- **Stay Informed:**
  - Keep abreast of the latest trends and technologies in web development.
- **Implement Enhancements:**
  - Propose and implement innovative features that add value to the project.

### 4. Regular Updates

- **Security Policies:**
  - Review and update security policies to align with the latest best practices.
- **Performance Metrics:**
  - Monitor and analyze performance metrics to identify areas for optimization.
- **Documentation:**
  - Update documentation to reflect current practices and improvements.

---

Remember:
- **Security First:** Prioritize security measures to protect sensitive data.
- **Performance Matters:** Optimize performance to ensure smooth user experience.
- **Documentation is Crucial:** Maintain comprehensive documentation for easy maintenance.
- **Tests are Essential:** Ensure high test coverage to catch issues early.
- **Code Quality is Non-Negotiable:** Strive for excellence in every aspect of development.

*Happy Coding! 🚀*

