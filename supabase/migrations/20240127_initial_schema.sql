-- Drop existing tables if they exist
DROP TABLE IF EXISTS "public"."reviews";
DROP TABLE IF EXISTS "public"."companies";

-- Create UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create companies table
CREATE TABLE IF NOT EXISTS "public"."companies" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "name" character varying(100) NOT NULL,
    "description" text,
    "industry" character varying(50),
    "location" character varying(150),
    "website" character varying(2048),
    "logo_url" character varying(2048),
    "created_by" uuid,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
    "verified" boolean DEFAULT false,
    CONSTRAINT "companies_pkey" PRIMARY KEY ("id")
);

-- Create reviews table
CREATE TABLE IF NOT EXISTS "public"."reviews" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY,
    "company_id" bigint NOT NULL,
    "user_id" uuid,
    "rating" smallint NOT NULL,
    "title" character varying(100) NOT NULL,
    "pros" text,
    "cons" text,
    "employment_status" character varying(20),
    "position" character varying(100),
    "location" character varying(150),
    "salary" character varying(50),
    "recommend" boolean,
    "ceo_rating" smallint,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT now() NOT NULL,
    "status" character varying(20) DEFAULT 'pending'::character varying NOT NULL,
    CONSTRAINT "reviews_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "reviews_company_id_fkey" FOREIGN KEY ("company_id") REFERENCES "public"."companies"("id") ON DELETE CASCADE,
    CONSTRAINT "reviews_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE SET NULL,
    CONSTRAINT "reviews_rating_check" CHECK (("rating" >= 1 AND "rating" <= 5)),
    CONSTRAINT "reviews_ceo_rating_check" CHECK (("ceo_rating" >= 1 AND "ceo_rating" <= 5))
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS "companies_industry_idx" ON "public"."companies" USING btree ("industry");
CREATE INDEX IF NOT EXISTS "companies_location_idx" ON "public"."companies" USING btree ("location");
CREATE INDEX IF NOT EXISTS "companies_name_idx" ON "public"."companies" USING btree ("name");
CREATE INDEX IF NOT EXISTS "reviews_company_id_idx" ON "public"."reviews" USING btree ("company_id");
CREATE INDEX IF NOT EXISTS "reviews_user_id_idx" ON "public"."reviews" USING btree ("user_id");
CREATE INDEX IF NOT EXISTS "reviews_rating_idx" ON "public"."reviews" USING btree ("rating");
CREATE INDEX IF NOT EXISTS "reviews_status_idx" ON "public"."reviews" USING btree ("status");

-- Insert sample data
INSERT INTO "public"."companies" ("name", "description", "industry", "location", "website", "logo_url", "created_at", "updated_at", "verified")
VALUES
    ('Acme Corporation', 'A global leader in technology solutions', 'Technology', 'New York, NY', 'https://acme.example.com', 'https://logo.example.com/acme.png', now(), now(), true),
    ('Globex Industries', 'Manufacturing excellence since 1950', 'Manufacturing', 'Chicago, IL', 'https://globex.example.com', 'https://logo.example.com/globex.png', now(), now(), true),
    ('Initech Software', 'Enterprise software solutions', 'Software', 'Austin, TX', 'https://initech.example.com', 'https://logo.example.com/initech.png', now(), now(), false);

-- Enable Row Level Security (RLS)
ALTER TABLE "public"."companies" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."reviews" ENABLE ROW LEVEL SECURITY;

-- Create policies for companies table
CREATE POLICY "Allow public read access to companies" ON "public"."companies"
    FOR SELECT USING (true);

CREATE POLICY "Allow authenticated users to create companies" ON "public"."companies"
    FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Allow users to update companies they created" ON "public"."companies"
    FOR UPDATE TO authenticated USING (created_by = auth.uid()) WITH CHECK (created_by = auth.uid());

CREATE POLICY "Allow users to delete companies they created" ON "public"."companies"
    FOR DELETE TO authenticated USING (created_by = auth.uid());

-- Create policies for reviews table
CREATE POLICY "Allow public read access to approved reviews" ON "public"."reviews"
    FOR SELECT USING (status = 'approved');

CREATE POLICY "Allow authenticated users to create reviews" ON "public"."reviews"
    FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Allow users to update their own reviews" ON "public"."reviews"
    FOR UPDATE TO authenticated USING (user_id = auth.uid()) WITH CHECK (user_id = auth.uid());

CREATE POLICY "Allow users to delete their own reviews" ON "public"."reviews"
    FOR DELETE TO authenticated USING (user_id = auth.uid());

-- Create policy for admins to manage all reviews
CREATE POLICY "Allow admins to manage all reviews" ON "public"."reviews"
    FOR ALL TO authenticated USING (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid() AND auth.users.role = 'admin'
        )
    ) WITH CHECK (
        EXISTS (
            SELECT 1 FROM auth.users
            WHERE auth.users.id = auth.uid() AND auth.users.role = 'admin'
        )
    ); 