-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create ENUMs
CREATE TYPE company_industry AS ENUM (
    'Technology',
    'Healthcare',
    'Education',
    'Finance',
    'Manufacturing',
    'Retail',
    'Other'
);

CREATE TYPE company_verification_status AS ENUM (
    'pending',
    'verified',
    'rejected'
);

-- Create Tables
CREATE TABLE companies (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name character varying NOT NULL,
    description text,
    industry company_industry,
    location character varying,
    website character varying,
    logo_url text,
    verification_status company_verification_status DEFAULT 'pending',
    verified boolean DEFAULT false,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

CREATE TABLE company_news (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    company_name text NOT NULL,
    title text NOT NULL,
    description text,
    url text,
    published_at timestamp with time zone,
    source text,
    relevance_score double precision,
    cached_at timestamp with time zone DEFAULT now()
);

CREATE TABLE profiles (
    id uuid PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    username text,
    avatar_url text,
    website text
);

CREATE TABLE reviews (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    company_id bigint REFERENCES companies(id) ON DELETE SET NULL,
    user_id uuid,
    title character varying NOT NULL,
    rating integer,
    pros text NOT NULL,
    cons text NOT NULL,
    employment_status character varying,
    position character varying,
    is_current_employee boolean,
    reviewer_name character varying,
    reviewer_email character varying,
    reviewer_id uuid,
    status character varying DEFAULT 'pending',
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Create Indexes
CREATE INDEX idx_companies_industry ON companies(industry);
CREATE INDEX idx_companies_verification_status ON companies(verification_status);
CREATE INDEX idx_reviews_company_id ON reviews(company_id);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_reviews_status ON reviews(status);
CREATE INDEX idx_company_news_company_name ON company_news(company_name);

-- Create Functions
CREATE OR REPLACE FUNCTION is_valid_url(url text)
RETURNS boolean AS $$
BEGIN
    RETURN url ~* '^https?://[^\s/$.?#].[^\s]*$';
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION normalize_company_name(name text)
RETURNS text AS $$
BEGIN
    RETURN trim(regexp_replace(lower(name), '\s+', ' ', 'g'));
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION normalize_industry(industry text)
RETURNS text AS $$
BEGIN
    RETURN trim(regexp_replace(lower(industry), '\s+', ' ', 'g'));
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION log_error(
    operation text,
    table_name text,
    error_message text,
    details jsonb DEFAULT NULL
)
RETURNS void AS $$
BEGIN
    INSERT INTO error_logs (
        operation,
        table_name,
        error_message,
        details,
        created_at
    ) VALUES (
        operation,
        table_name,
        error_message,
        details,
        now()
    );
END;
$$ LANGUAGE plpgsql;

-- Create error_logs table for the log_error function
CREATE TABLE IF NOT EXISTS error_logs (
    id bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    operation text NOT NULL,
    table_name text NOT NULL,
    error_message text NOT NULL,
    details jsonb,
    created_at timestamp with time zone DEFAULT now()
);

-- Add Row Level Security (RLS) policies
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE company_news ENABLE ROW LEVEL SECURITY;
ALTER TABLE error_logs ENABLE ROW LEVEL SECURITY;

-- Basic RLS policies
CREATE POLICY "Public companies are viewable by everyone" ON companies
    FOR SELECT USING (true);

CREATE POLICY "Companies can be created by authenticated users" ON companies
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

CREATE POLICY "Companies can be updated by their creators" ON companies
    FOR UPDATE USING (auth.uid() = created_by);

CREATE POLICY "Public reviews are viewable by everyone" ON reviews
    FOR SELECT USING (true);

CREATE POLICY "Reviews can be created by authenticated users" ON reviews
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Reviews can be updated by their creators" ON reviews
    FOR UPDATE USING (auth.uid() = user_id);

-- Comments
COMMENT ON TABLE companies IS 'Stores company information';
COMMENT ON TABLE reviews IS 'Stores company reviews from users';
COMMENT ON TABLE profiles IS 'Stores user profile information';
COMMENT ON TABLE company_news IS 'Stores news articles related to companies';
COMMENT ON TABLE error_logs IS 'Stores application error logs'; 