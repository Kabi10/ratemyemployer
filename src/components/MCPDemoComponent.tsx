'use client';

import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabaseClient';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';

// This component demonstrates how to use queries generated by MCP in your application
export default function MCPDemoComponent() {
  const [companies, setCompanies] = useState<any[]>([]);
  const [industryRatings, setIndustryRatings] = useState<any[]>([]);
  const [locationStats, setLocationStats] = useState<any[]>([]);
  const [sizeStats, setSizeStats] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Example 1: Fetch companies
  const fetchCompanies = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('companies')
        .select('id, name, industry, location')
        .limit(5);
      
      if (error) throw error;
      
      setCompanies(data || []);
      console.log('Companies:', data);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching companies:', err);
    } finally {
      setLoading(false);
    }
  };
  
  // Example 2: Fetch low-rated reviews
  const fetchLowRatedReviews = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('reviews')
        .select('id, rating, title, company_id, companies(name)')
        .lt('rating', 3)
        .limit(5);
      
      if (error) throw error;
      
      console.log('Low-rated reviews:', data);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  // Example 3: Use a stored procedure
  const fetchAverageRatingsByIndustry = async () => {
    setLoading(true);
    setError(null);
    try {
      // This would use the stored procedure created by MCP
      const { data, error } = await supabase.rpc('get_average_ratings_by_industry');
      
      if (error) throw error;
      console.log('Average ratings by industry:', data);
      setIndustryRatings(data || []);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching average ratings:', err);
    } finally {
      setLoading(false);
    }
  };
  
  // Test the new industry statistics stored procedure
  const fetchIndustryStatistics = async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase.rpc('get_industry_statistics');
      
      if (error) throw error;
      console.log('Industry statistics:', data);
      setIndustryRatings(data || []);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching industry statistics:', err);
    } finally {
      setLoading(false);
    }
  };
  
  // Test the new location statistics stored procedure
  const fetchLocationStatistics = async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase.rpc('get_location_statistics');
      
      if (error) throw error;
      console.log('Location statistics:', data);
      setLocationStats(data || []);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching location statistics:', err);
    } finally {
      setLoading(false);
    }
  };
  
  // Test the new size statistics stored procedure
  const fetchSizeStatistics = async () => {
    setLoading(true);
    setError(null);
    try {
      const { data, error } = await supabase.rpc('get_size_statistics');
      
      if (error) throw error;
      console.log('Size statistics:', data);
      setSizeStats(data || []);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching size statistics:', err);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    fetchCompanies();
  }, []);
  
  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">MCP Demo Component</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 gap-6 mb-8">
        <div className="border rounded-lg p-4 shadow-sm">
          <h2 className="text-xl font-semibold mb-4">Query Examples</h2>
          
          <div className="flex flex-wrap gap-2 mb-6">
            <button 
              onClick={fetchCompanies}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Companies
            </button>
            
            <button 
              onClick={fetchLowRatedReviews}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Low-Rated Reviews
            </button>
            
            <button 
              onClick={fetchAverageRatingsByIndustry}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Industry Ratings
            </button>
            
            <button 
              onClick={fetchIndustryStatistics}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              Test Industry Statistics
            </button>
            
            <button 
              onClick={fetchLocationStatistics}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              Test Location Statistics
            </button>
            
            <button 
              onClick={fetchSizeStatistics}
              className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
            >
              Test Size Statistics
            </button>
          </div>
          
          {companies.length > 0 && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-2">Companies</h3>
              <div className="bg-gray-100 p-4 rounded overflow-auto">
                <pre>{JSON.stringify(companies, null, 2)}</pre>
              </div>
            </div>
          )}
          
          {industryRatings.length > 0 && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-2">Industry Ratings</h3>
              <div className="bg-gray-100 p-4 rounded overflow-auto">
                <pre>{JSON.stringify(industryRatings, null, 2)}</pre>
              </div>
              
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                {industryRatings.map((stat, index) => (
                  <Card key={index}>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">{stat.industry}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center">
                        <span className="font-medium">Average Rating:</span>
                        <span className={`font-bold ${getRatingColor(stat.avg_industry_rating || stat.average_rating)}`}>
                          {(stat.avg_industry_rating || stat.average_rating).toFixed(1)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="font-medium">Companies:</span>
                        <span>{stat.company_count}</span>
                      </div>
                      {stat.review_count !== undefined && (
                        <div className="flex justify-between items-center mt-2">
                          <span className="font-medium">Reviews:</span>
                          <span>{stat.review_count}</span>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
          
          {locationStats.length > 0 && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-2">Location Statistics</h3>
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                {locationStats.map((stat, index) => (
                  <Card key={index}>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">{stat.location}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center">
                        <span className="font-medium">Average Rating:</span>
                        <span className={`font-bold ${getRatingColor(stat.average_rating)}`}>
                          {stat.average_rating.toFixed(1)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="font-medium">Companies:</span>
                        <span>{stat.company_count}</span>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="font-medium">Reviews:</span>
                        <span>{stat.review_count}</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
          
          {sizeStats.length > 0 && (
            <div className="mb-6">
              <h3 className="text-lg font-semibold mb-2">Size Statistics</h3>
              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                {sizeStats.map((stat, index) => (
                  <Card key={index}>
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg">{stat.size}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center">
                        <span className="font-medium">Average Rating:</span>
                        <span className={`font-bold ${getRatingColor(stat.average_rating)}`}>
                          {stat.average_rating.toFixed(1)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="font-medium">Companies:</span>
                        <span>{stat.company_count}</span>
                      </div>
                      <div className="flex justify-between items-center mt-2">
                        <span className="font-medium">Reviews:</span>
                        <span>{stat.review_count}</span>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h2 className="text-xl font-semibold mb-2">How to Use MCP</h2>
        <p className="mb-4">
          To use MCP in your own application, you can follow these steps:
        </p>
        <ol className="list-decimal pl-5 space-y-2">
          <li>Start the MCP server with <code className="bg-gray-200 px-1 rounded">npm run mcp:start</code></li>
          <li>Use the Supabase client to execute queries or stored procedures</li>
          <li>Process and display the results in your UI components</li>
        </ol>
      </div>
    </div>
  );
}

function getRatingColor(rating: number) {
  if (rating < 2.5) return 'text-red-500';
  if (rating < 3.5) return 'text-amber-500';
  return 'text-green-500';
} 