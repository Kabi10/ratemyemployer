'use client';

import { useState, useEffect } from 'react';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
import type { Database } from '@/types/supabase';

// This component demonstrates how to use queries generated by MCP in your application
export default function MCPDemoComponent() {
  const [companies, setCompanies] = useState<any[]>([]);
  const [reviews, setReviews] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  
  const supabase = createClientComponentClient<Database>();
  
  // Example 1: Get all companies
  const fetchCompanies = async () => {
    setLoading(true);
    try {
      // This query could be generated by MCP from: "Show me all companies"
      const { data, error } = await supabase
        .from('companies')
        .select('*')
        .limit(10);
      
      if (error) throw error;
      setCompanies(data || []);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  // Example 2: Get low-rated reviews
  const fetchLowRatedReviews = async () => {
    setLoading(true);
    try {
      // This query could be generated by MCP from: "Find reviews with ratings lower than 3"
      const { data, error } = await supabase
        .from('reviews')
        .select('id, title, rating, company_name, created_at')
        .lt('rating', 3)
        .order('created_at', { ascending: false })
        .limit(10);
      
      if (error) throw error;
      setReviews(data || []);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };
  
  // Example 3: Use a stored procedure
  const fetchAverageRatingsByIndustry = async () => {
    setLoading(true);
    try {
      // This would use the stored procedure created by MCP
      const { data, error } = await supabase.rpc('get_average_ratings_by_industry');
      
      if (error) throw error;
      console.log('Average ratings by industry:', data);
    } catch (err: any) {
      setError(err.message);
      console.error('Error fetching average ratings:', err);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    fetchCompanies();
  }, []);
  
  return (
    <div className="p-6 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">MCP Demo Component</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          <p>{error}</p>
        </div>
      )}
      
      <div className="grid grid-cols-1 gap-6 mb-8">
        <div className="border rounded-lg p-4 shadow-sm">
          <h2 className="text-xl font-semibold mb-4">Query Examples</h2>
          
          <div className="flex flex-wrap gap-2 mb-6">
            <button 
              onClick={fetchCompanies}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Companies
            </button>
            
            <button 
              onClick={fetchLowRatedReviews}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Low-Rated Reviews
            </button>
            
            <button 
              onClick={fetchAverageRatingsByIndustry}
              className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Fetch Industry Ratings
            </button>
          </div>
          
          <div className="bg-gray-100 p-4 rounded">
            <p className="text-sm font-mono">
              {`// These queries can be generated by MCP using natural language`}<br />
              {`// For example: "Show me all companies"`}<br />
              {`const { data } = await supabase.from('companies').select('*').limit(10);`}
            </p>
          </div>
        </div>
      </div>
      
      {loading ? (
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        </div>
      ) : (
        <>
          {companies.length > 0 && (
            <div className="border rounded-lg p-4 shadow-sm mb-6">
              <h2 className="text-xl font-semibold mb-4">Companies</h2>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Industry</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rating</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {companies.map((company) => (
                      <tr key={company.id}>
                        <td className="px-6 py-4 whitespace-nowrap">{company.name}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{company.industry || 'N/A'}</td>
                        <td className="px-6 py-4 whitespace-nowrap">{company.location}</td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          {company.average_rating ? `${company.average_rating.toFixed(1)} / 5` : 'No ratings'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
          
          {reviews.length > 0 && (
            <div className="border rounded-lg p-4 shadow-sm">
              <h2 className="text-xl font-semibold mb-4">Low-Rated Reviews</h2>
              <div className="space-y-4">
                {reviews.map((review) => (
                  <div key={review.id} className="border rounded p-4">
                    <div className="flex justify-between">
                      <h3 className="font-medium">{review.title || 'Untitled Review'}</h3>
                      <span className="text-red-500 font-bold">{review.rating} / 5</span>
                    </div>
                    <p className="text-sm text-gray-600">Company: {review.company_name}</p>
                    <p className="text-xs text-gray-400">
                      {new Date(review.created_at).toLocaleDateString()}
                    </p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </>
      )}
      
      <div className="mt-8 p-4 bg-gray-50 rounded-lg">
        <h2 className="text-lg font-semibold mb-2">How to Use MCP</h2>
        <ol className="list-decimal pl-5 space-y-2">
          <li>Start the MCP server with <code className="bg-gray-200 px-1 rounded">npm run mcp:start</code></li>
          <li>Use natural language in Cursor to generate queries</li>
          <li>Copy the generated queries into your code</li>
          <li>Customize as needed for your specific use case</li>
        </ol>
        <p className="mt-4 text-sm text-gray-600">
          For more information, see the <code className="bg-gray-200 px-1 rounded">MCP_README.md</code> file.
        </p>
      </div>
    </div>
  );
} 