# AI Agent Rules for Recreating and Enhancing the RateMyEmployer Project

## Overview

Welcome, AI Agent! Your mission is to **recreate and enhance** the **RateMyEmployer** project. You have access to the current codebase and documentation. Your goal is to build a superior version of the project, focusing on improved performance, scalability, security, and maintainability. Follow the guidelines below to ensure a successful redevelopment.

## Table of Contents

1. [Project Setup](#project-setup)
2. [Code Structure and Organization](#code-structure-and-organization)
3. [Coding Standards and Best Practices](#coding-standards-and-best-practices)
4. [Testing Strategy](#testing-strategy)
5. [Documentation](#documentation)
6. [Deployment Process](#deployment-process)
7. [Security Measures](#security-measures)
8. [Performance Optimization](#performance-optimization)
9. [Maintenance and Monitoring](#maintenance-and-monitoring)
10. [Continuous Improvement](#continuous-improvement)

---

## Project Setup

### 1. Environment Setup

- **Clone Repository:**
  ```bash
  git clone https://github.com/YOUR_USERNAME/ratemyemployer.git
  ```
- **Install Dependencies:**
  ```bash
  npm install
  ```
- **Configure Environment Variables:**
  ```bash
  cp .env.example .env.local
  ```
  - Populate `.env.local` with the required environment variables:
    - `NEXT_PUBLIC_SUPABASE_URL`
    - `NEXT_PUBLIC_SUPABASE_ANON_KEY`
    - Any other necessary keys.

### 2. Database Setup

- **Supabase Configuration:**
  - Create a Supabase account and set up a new project.
  - Configure the database schema to match application requirements.
  - Implement Row-Level Security (RLS) policies to secure data access.

- **Type Generation:**
  ```bash
  npx supabase gen types typescript --project-id "your-project-id" > src/types/supabase.ts
  ```

### 3. Development Tools

- **Install Global CLI Tools:**
  ```bash
  npm install -g vercel
  ```
- **Initialize Git Hooks:**
  ```bash
  npx husky install
  ```

---

## Code Structure and Organization

### 1. Directory Layout

Maintain a clear and scalable directory structure:

```
src/
├── app/          # Next.js 13 app router
├── components/   # Reusable React components
├── lib/          # Utilities and helpers
├── hooks/        # Custom React hooks
├── types/        # TypeScript definitions
├── pages/        # Next.js pages
├── styles/       # Global and component-specific styles
├── public/       # Static assets
└── __tests__/    # Test suites
```

### 2. File Naming Conventions

- **Components:** `ComponentName.tsx`
- **Hooks:** `useHookName.ts`
- **Utilities:** `utilityName.ts`
- **Types:** `typeName.d.ts`

### 3. Code Modularity

- **Single Responsibility:** Each module or component should have a single responsibility.
- **Reusability:** Design components and utilities to be reusable across different parts of the application.

---

## Coding Standards and Best Practices

### 1. TypeScript

- **Strict Mode:** Enable `strict` mode in `tsconfig.json` for type safety.
- **Explicit Types:** Always define explicit types for variables, function parameters, and return values.

### 2. Linting and Formatting

- **ESLint:** Enforce code quality and standards.
  ```bash
  npm install eslint --save-dev
  npx eslint --init
  ```
- **Prettier:** Ensure consistent code formatting.
  ```bash
  npm install prettier eslint-config-prettier eslint-plugin-prettier --save-dev
  ```
- **Configuration:**
  - Integrate ESLint with Prettier to avoid conflicts.
  - Add `lint` and `format` scripts in `package.json`:
    ```json
    {
      "scripts": {
        "lint": "eslint . --ext .ts,.tsx",
        "format": "prettier --write ."
      }
    }
    ```

### 3. Error Handling

- Implement comprehensive error handling using `try-catch` blocks.
- Provide meaningful error messages to aid in debugging.
- Log errors for monitoring and analysis.

### 4. Security Best Practices

- **Authentication:** Utilize Supabase Auth for managing user authentication.
- **Input Validation:** Use libraries like Zod for validating user inputs.
- **Sanitization:** Sanitize all user-generated content to prevent XSS and SQL injection.
- **Environment Variables:** Protect sensitive data by storing it in `.env.local` and never committing it to version control.

---

## Testing Strategy

### 1. Testing Frameworks

- **Unit Testing:** Use Vitest for unit tests.
- **Integration Testing:** Test interactions between different parts of the application.
- **End-to-End Testing:** Utilize Playwright for comprehensive end-to-end tests.

### 2. Test Structure

Organize tests within `src/__tests__/`:

```
src/__tests__/
├── components/     # Component tests
├── hooks/         # Hook tests
├── lib/           # Library/utility tests
├── integration/   # Integration tests
├── e2e/           # End-to-end tests
├── utils/         # Test utilities
│   ├── renderUtils.tsx
│   ├── customMatchers.ts
│   └── testHelpers.ts
└── mocks/         # Mock data and handlers
    ├── mockData.ts
    └── handlers.ts
```

### 3. Writing Tests

- **Component Tests:**
  - Test rendering with different props.
  - Verify interaction behaviors (e.g., button clicks).

- **Hook Tests:**
  - Validate the logic within custom hooks.
  - Ensure state updates correctly.

- **Utility Tests:**
  - Test utility functions for expected outputs.

### 4. Running Tests

- **Execute All Tests:**
  ```bash
  npm test
  ```
- **Run with Coverage:**
  ```bash
  npm run coverage
  ```
- **Run Specific Tests:**
  ```bash
  npm test path/to/test
  ```
- **Run End-to-End Tests:**
  ```bash
  npm run test:e2e
  ```

### 5. Test Coverage

- **Configuration:** Ensure `vitest.config.ts` includes coverage thresholds.
- **Enforce Coverage:** Maintain at least 80% test coverage across statements, branches, functions, and lines.

---

## Documentation

### 1. Code Documentation

- **JSDoc Comments:**
  - Document functions, classes, and methods with JSDoc for better readability.
  - Example:
    ```typescript
    /**
     * Calculates the average rating.
     * @param ratings - Array of numerical ratings.
     * @returns The average rating.
     */
    const calculateAverage = (ratings: number[]): number => {
      return ratings.reduce((a, b) => a + b, 0) / ratings.length;
    };
    ```

- **Prop Documentation:**
  - Document component props using TypeScript interfaces and JSDoc.

### 2. Project Documentation

- **README.md:**
  - Provide a comprehensive overview of the project.
  - Include setup instructions, features, and contribution guidelines.

- **Documentation Hub:**
  - Centralize all documentation in `docs/`.
  - Include guides on onboarding, system checks, error handling, and more.

### 3. Automated Documentation Generation

- Utilize tools to generate documentation from comments and code annotations.
- Example script to generate documentation:
  ```bash
  npm run docs
  ```

---

## Deployment Process

### 1. Continuous Integration and Continuous Deployment (CI/CD)

- **CI/CD Pipeline:**
  - Use GitHub Actions or similar tools to automate testing, linting, and building.
  - Example GitHub Actions workflow:
    ```yaml
    name: CI/CD Pipeline

    on:
      push:
        branches: [ main ]
      pull_request:
        branches: [ main ]

    jobs:
      build:
        runs-on: ubuntu-latest

        steps:
          - uses: actions/checkout@v2
          - name: Setup Node.js
            uses: actions/setup-node@v2
            with:
              node-version: '18.x'
          - run: npm install
          - run: npm run lint
          - run: npm test
          - run: npm run build
          - name: Deploy to Vercel
            uses: amondnet/vercel-action@v20
            with:
              vercel-token: ${{ secrets.VERCEL_TOKEN }}
              vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
              vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
              working-directory: .
    ```
  
- **Deployment Configuration:**
  - Configure Vercel with necessary environment variables.
  - Ensure proper build settings and output directories.

### 2. Data Protection

- **Input Validation:**
  - Validate all user inputs using Zod schemas to prevent malicious data entry.

- **Sanitization:**
  - Sanitize outputs to prevent cross-site scripting (XSS) and other injection attacks.

- **Encryption:**
  - Encrypt sensitive data both in transit and at rest.

### 3. Dependency Management

- **Regular Audits:**
  - Run `npm audit` regularly to identify and fix vulnerabilities.
- **Update Dependencies:**
  - Keep all dependencies up-to-date to mitigate security risks.

---

## Security Measures

### 1. Authentication and Authorization

- **Supabase Auth:**
  - Use Supabase Auth for managing user authentication.
  - Implement role-based access controls where necessary.

- **Protected Routes:**
  - Use middleware to protect sensitive routes and ensure only authorized access.

### 2. Row-Level Security (RLS)

- **Policy Definitions:**
  - Define RLS policies in Supabase to control data access at the database level.
  - Example Policy:
    ```sql
    CREATE POLICY "Users can insert their own reviews"
    ON public.reviews
    FOR INSERT
    TO authenticated
    WITH CHECK (auth.uid() = user_id);
    ```

### 3. Input and Data Validation

- **Zod Schemas:**
  - Use Zod for robust input validation to ensure data integrity.

- **Sanitization Libraries:**
  - Utilize libraries to sanitize user input and prevent injection attacks.

### 4. Environment Variable Security

- **Protected Storage:**
  - Store sensitive environment variables in secure storage solutions like Vercel secrets.
  - Ensure `.env.local` is included in `.gitignore` to prevent accidental commits.

### 5. Regular Security Audits

- **Code Reviews:**
  - Conduct regular security-focused code reviews to identify and mitigate vulnerabilities.

- **Automated Scanning:**
  - Integrate security scanning tools into the CI/CD pipeline to continuously monitor for issues.

---

## Performance Optimization

### 1. Bundle Optimization

- **Code Splitting:**
  - Implement dynamic imports to reduce initial bundle size.
- **Lazy Loading:**
  - Lazy load non-critical components to enhance loading performance.

### 2. Image Optimization

- **Next.js Image Component:**
  - Utilize Next.js `<Image>` component for automatic image optimization.

### 3. Caching Strategies

- **API Caching:**
  - Implement caching mechanisms for frequently accessed API routes.
- **Static Site Generation (SSG) and Incremental Static Regeneration (ISR):**
  - Leverage Next.js features to serve pre-rendered pages for better performance.

### 4. Monitoring and Profiling

- **Performance Metrics:**
  - Track metrics like First Contentful Paint (FCP) and Time to Interactive (TTI).
- **Profiling Tools:**
  - Use tools like Lighthouse and Web Vitals for performance analysis.

---

## Maintenance and Monitoring

### 1. Regular Updates

- **Dependencies:**
  - Routinely update project dependencies to their latest stable versions.
- **Frameworks and Libraries:**
  - Stay updated with Next.js, Supabase, and other core technologies.

### 2. Monitoring Tools

- **Error Tracking:**
  - Integrate tools like Sentry for real-time error monitoring.
- **Performance Monitoring:**
  - Use services like Vercel Analytics or Google Analytics to monitor application performance.

### 3. Backup and Recovery

- **Database Backups:**
  - Schedule regular backups of the Supabase database.
- **Disaster Recovery Plan:**
  - Develop and maintain a disaster recovery plan to handle unexpected failures.

---

## Continuous Improvement

### 1. Feedback Loop

- **User Feedback:**
  - Collect and analyze user feedback to identify areas for improvement.
- **Team Reviews:**
  - Conduct regular code reviews and retrospectives to enhance development practices.

### 2. Refactoring

- **Code Quality:**
  - Continuously refactor code to improve readability, maintainability, and performance.
- **Eliminate Technical Debt:**
  - Address technical debt promptly to prevent long-term issues.

### 3. Innovation

- **Stay Informed:**
  - Keep abreast of the latest trends and technologies in web development.
- **Implement Enhancements:**
  - Propose and implement innovative features that add value to the project.

---

## Specific Page Enhancements

### 1. Wall of Shame/Fame Pages

- **Enhancements:**
  - **Wall of Shame:** Implement advanced filtering and sorting options based on various metrics like shame score, recent violations, and company ratings.
  - **Wall of Fame:** Highlight top-performing companies with high ratings and positive reviews.
  - **Analytics Dashboard:** Provide administrators with insights and analytics on company performances.

- **User Experience:**
  - **Responsive Design:** Ensure both pages are fully responsive across all devices.
  - **Interactive Elements:** Add interactive charts and graphs to visualize data effectively.

### 2. Background Check Page

- **Enhancements:**
  - **Detailed Reports:** Provide comprehensive background check reports with sections on company history, employee feedback, and compliance records.
  - **Search Functionality:** Implement robust search and filtering options to allow users to find specific companies or criteria.
  - **Integration with External APIs:** Integrate with third-party services for up-to-date background information.

- **User Experience:**
  - **Intuitive Interface:** Design a user-friendly interface that makes accessing and interpreting background information straightforward.
  - **Downloadable Reports:** Allow users to download background check reports in PDF or other formats.

---

## Core Features Implementation

### 1. Company News Integration

- **Data Collection:**
  - Poll news APIs every 6 hours for company updates
  - Validate news sources against whitelist of reliable publishers
  - Store news with metadata: source, publish date, relevance score
  - Implement deduplication logic for similar news items

- **Display Rules:**
  - Show most recent news first
  - Group related news items
  - Highlight major company events (acquisitions, leadership changes)
  - Cache news data for 1 hour on client side

- **Integration Requirements:**
  - Use typed interfaces for news data
  - Implement error boundaries for failed news fetches
  - Add fallback UI for when news is unavailable
  - Track news click-through rates

### 2. Review System

- **Review Structure:**
  - Required fields: overall rating, pros, cons, position held
  - Optional fields: salary info, interview experience
  - Support for anonymous reviews with email verification
  - Allow photo/document attachments for verification

- **Moderation Process:**
  - Auto-flag reviews containing prohibited content
  - Require manual approval for flagged reviews
  - Implement 24-hour editing window for reviewers
  - Store review edit history

- **Scoring System:**
  - Calculate company score using weighted averages
  - Weight recent reviews more heavily
  - Factor in review helpfulness votes
  - Adjust for review volume

- **Dispute Handling:**
  - Allow company responses to reviews
  - Implement review dispute workflow
  - Require evidence for factual disputes
  - Archive rather than delete disputed content

### 3. Assessment System

- **Assessment Criteria:**
  - Company culture evaluation
  - Management effectiveness
  - Career growth opportunities
  - Work-life balance metrics
  - Compensation fairness

- **Scoring Methodology:**
  - Use standardized rubrics for each criterion
  - Calculate composite scores with confidence intervals
  - Adjust for industry benchmarks
  - Factor in company size and age

- **Validation Process:**
  - Cross-reference with public data
  - Verify assessment submitter credentials
  - Implement peer review system
  - Regular assessment audits

- **Update Requirements:**
  - Reassess scores quarterly
  - Allow company challenges to assessments
  - Archive outdated assessments
  - Track assessment trends over time

### 4. Search and Filter System

- **Search Algorithm:**
  - Implement fuzzy matching for company names
  - Include phonetic matching for misspellings
  - Search across multiple fields (name, industry, location)
  - Support boolean operators in search

- **Filter Requirements:**
  - Industry classification filters
  - Company size ranges
  - Rating range filters
  - Location-based filtering
  - Review date ranges

- **Result Ranking:**
  - Prioritize exact matches
  - Factor in review recency
  - Consider company profile completeness
  - Boost verified companies

- **Performance Requirements:**
  - Search results in under 200ms
  - Implement result pagination
  - Cache frequent searches
  - Background load detailed results

---

## Conclusion

By adhering to these rules and guidelines, you will successfully recreate and enhance the RateMyEmployer project, ensuring it is robust, secure, and maintainable. Special attention has been given to the **Wall of Shame/Fame** and **Background Check** pages to improve their functionality and user experience. Strive for excellence in every aspect of development, from code quality to user satisfaction. Together, we can build an outstanding platform that serves its users effectively.

---

*Happy Coding! 🚀* 