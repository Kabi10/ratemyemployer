./src/app/about/page.tsx:'use client'
./src/app/about/page.tsx:
./src/app/about/page.tsx:
./src/app/about/page.tsx:import { JSX } from 'react';
./src/app/about/page.tsx:import { motion } from 'framer-motion';
./src/app/about/page.tsx:
./src/app/about/page.tsx:export default function AboutPage(): JSX.Element {
./src/app/about/page.tsx:  const teamMembers = [
./src/app/about/page.tsx:    {
./src/app/about/page.tsx:      name: 'John Doe',
./src/app/about/page.tsx:      role: 'Founder & CEO',
./src/app/about/page.tsx:      description: 'Passionate about creating transparency in the workplace.',
./src/app/about/page.tsx:    },
./src/app/about/page.tsx:    {
./src/app/about/page.tsx:      name: 'Jane Smith',
./src/app/about/page.tsx:      role: 'Head of Community',
./src/app/about/page.tsx:      description: 'Dedicated to building meaningful connections between employees.',
./src/app/about/page.tsx:    },
./src/app/about/page.tsx:    // Add more team members as needed
./src/app/about/page.tsx:  ];
./src/app/about/page.tsx:
./src/app/about/page.tsx:  const getInitials = (name: string): string => {
./src/app/about/page.tsx:    return name
./src/app/about/page.tsx:      .split(' ')
./src/app/about/page.tsx:      .map(part => part[0])
./src/app/about/page.tsx:      .join('')
./src/app/about/page.tsx:      .toUpperCase();
./src/app/about/page.tsx:  };
./src/app/about/page.tsx:
./src/app/about/page.tsx:  return (
./src/app/about/page.tsx:    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
./src/app/about/page.tsx:      <div className="container mx-auto px-4 py-12">
./src/app/about/page.tsx:        <motion.div
./src/app/about/page.tsx:          initial={{ opacity: 0, y: 20 }}
./src/app/about/page.tsx:          animate={{ opacity: 1, y: 0 }}
./src/app/about/page.tsx:          transition={{ duration: 0.5 }}
./src/app/about/page.tsx:          className="max-w-4xl mx-auto"
./src/app/about/page.tsx:        >
./src/app/about/page.tsx:          {/* Hero Section */}
./src/app/about/page.tsx:          <section className="text-center mb-16">
./src/app/about/page.tsx:            <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
./src/app/about/page.tsx:              About RateMyEmployer
./src/app/about/page.tsx:            </h1>
./src/app/about/page.tsx:            <p className="text-xl text-gray-600 dark:text-gray-300 mb-8">
./src/app/about/page.tsx:              Empowering employees to make informed career decisions through transparent workplace reviews.
./src/app/about/page.tsx:            </p>
./src/app/about/page.tsx:          </section>
./src/app/about/page.tsx:
./src/app/about/page.tsx:          {/* Mission Section */}
./src/app/about/page.tsx:          <section className="mb-16">
./src/app/about/page.tsx:            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">Our Mission</h2>
./src/app/about/page.tsx:            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
./src/app/about/page.tsx:              <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">
./src/app/about/page.tsx:                At RateMyEmployer, we believe in fostering transparency in the workplace. Our platform empowers employees to share their experiences, helping others make informed career decisions while encouraging companies to maintain high standards of workplace quality.
./src/app/about/page.tsx:              </p>
./src/app/about/page.tsx:              <p className="text-lg text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                We&apos;re committed to maintaining a fair and balanced platform where both employees and employers can engage in meaningful dialogue about workplace conditions, culture, and practices.
./src/app/about/page.tsx:              </p>
./src/app/about/page.tsx:            </div>
./src/app/about/page.tsx:          </section>
./src/app/about/page.tsx:
./src/app/about/page.tsx:          {/* Values Section */}
./src/app/about/page.tsx:          <section className="mb-16">
./src/app/about/page.tsx:            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">Our Values</h2>
./src/app/about/page.tsx:            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
./src/app/about/page.tsx:              <motion.div
./src/app/about/page.tsx:                whileHover={{ scale: 1.05 }}
./src/app/about/page.tsx:                className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6"
./src/app/about/page.tsx:              >
./src/app/about/page.tsx:                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Transparency</h3>
./src/app/about/page.tsx:                <p className="text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                  We believe honest feedback leads to positive change in the workplace.
./src/app/about/page.tsx:                </p>
./src/app/about/page.tsx:              </motion.div>
./src/app/about/page.tsx:
./src/app/about/page.tsx:              <motion.div
./src/app/about/page.tsx:                whileHover={{ scale: 1.05 }}
./src/app/about/page.tsx:                className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6"
./src/app/about/page.tsx:              >
./src/app/about/page.tsx:                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Integrity</h3>
./src/app/about/page.tsx:                <p className="text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                  We maintain high standards for review quality and authenticity.
./src/app/about/page.tsx:                </p>
./src/app/about/page.tsx:              </motion.div>
./src/app/about/page.tsx:
./src/app/about/page.tsx:              <motion.div
./src/app/about/page.tsx:                whileHover={{ scale: 1.05 }}
./src/app/about/page.tsx:                className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6"
./src/app/about/page.tsx:              >
./src/app/about/page.tsx:                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Privacy</h3>
./src/app/about/page.tsx:                <p className="text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                  We protect our users&apos; identities while enabling honest discourse.
./src/app/about/page.tsx:                </p>
./src/app/about/page.tsx:              </motion.div>
./src/app/about/page.tsx:
./src/app/about/page.tsx:              <motion.div
./src/app/about/page.tsx:                whileHover={{ scale: 1.05 }}
./src/app/about/page.tsx:                className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6"
./src/app/about/page.tsx:              >
./src/app/about/page.tsx:                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">Community</h3>
./src/app/about/page.tsx:                <p className="text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                  We foster a supportive environment for workplace dialogue.
./src/app/about/page.tsx:                </p>
./src/app/about/page.tsx:              </motion.div>
./src/app/about/page.tsx:            </div>
./src/app/about/page.tsx:          </section>
./src/app/about/page.tsx:
./src/app/about/page.tsx:          {/* Team Section */}
./src/app/about/page.tsx:          <section className="mb-16">
./src/app/about/page.tsx:            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">Our Team</h2>
./src/app/about/page.tsx:            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
./src/app/about/page.tsx:              {teamMembers.map((member, index) => (
./src/app/about/page.tsx:                <motion.div
./src/app/about/page.tsx:                  key={index}
./src/app/about/page.tsx:                  whileHover={{ scale: 1.05 }}
./src/app/about/page.tsx:                  className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6"
./src/app/about/page.tsx:                >
./src/app/about/page.tsx:                  <div className="flex items-center mb-4">
./src/app/about/page.tsx:                    <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center mr-4">
./src/app/about/page.tsx:                      <span className="text-xl font-bold text-white">
./src/app/about/page.tsx:                        {getInitials(member.name)}
./src/app/about/page.tsx:                      </span>
./src/app/about/page.tsx:                    </div>
./src/app/about/page.tsx:                    <div>
./src/app/about/page.tsx:                      <h3 className="text-xl font-semibold text-gray-900 dark:text-white">{member.name}</h3>
./src/app/about/page.tsx:                      <p className="text-gray-600 dark:text-gray-300">{member.role}</p>
./src/app/about/page.tsx:                    </div>
./src/app/about/page.tsx:                  </div>
./src/app/about/page.tsx:                  <p className="text-gray-600 dark:text-gray-300">{member.description}</p>
./src/app/about/page.tsx:                </motion.div>
./src/app/about/page.tsx:              ))}
./src/app/about/page.tsx:            </div>
./src/app/about/page.tsx:          </section>
./src/app/about/page.tsx:
./src/app/about/page.tsx:          {/* Contact Section */}
./src/app/about/page.tsx:          <section>
./src/app/about/page.tsx:            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-6">Get in Touch</h2>
./src/app/about/page.tsx:            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
./src/app/about/page.tsx:              <p className="text-lg text-gray-600 dark:text-gray-300 mb-4">
./src/app/about/page.tsx:                Have questions or suggestions? We&apos;d love to hear from you!
./src/app/about/page.tsx:              </p>
./src/app/about/page.tsx:              <ul className="text-gray-600 dark:text-gray-300">
./src/app/about/page.tsx:                <li className="mb-2">Email: contact@ratemyemployer.com</li>
./src/app/about/page.tsx:                <li className="mb-2">Address: [Your Address]</li>
./src/app/about/page.tsx:                <li>Follow us on social media for updates and news</li>
./src/app/about/page.tsx:              </ul>
./src/app/about/page.tsx:            </div>
./src/app/about/page.tsx:          </section>
./src/app/about/page.tsx:        </motion.div>
./src/app/about/page.tsx:      </div>
./src/app/about/page.tsx:    </div>
./src/app/about/page.tsx:  );
./src/app/about/page.tsx:}
./src/app/account/page.tsx:'use client'
./src/app/account/page.tsx:
./src/app/account/page.tsx:import { useEffect, useState } from 'react'
./src/app/account/page.tsx:import { useRouter } from 'next/navigation'
./src/app/account/page.tsx:import { supabase } from '@/lib/supabaseClient'
./src/app/account/page.tsx:import { toast } from 'sonner'
./src/app/account/page.tsx:
./src/app/account/page.tsx:export default function AccountPage() {
./src/app/account/page.tsx:  const router = useRouter()
./src/app/account/page.tsx:  const [user, setUser] = useState<any>(null)
./src/app/account/page.tsx:  const [reviews, setReviews] = useState<any[]>([])
./src/app/account/page.tsx:  const [isLoading, setIsLoading] = useState(true)
./src/app/account/page.tsx:
./src/app/account/page.tsx:  useEffect(() => {
./src/app/account/page.tsx:    const checkUser = async () => {
./src/app/account/page.tsx:      const { data: { user } } = await supabase.auth.getUser()
./src/app/account/page.tsx:      if (!user) {
./src/app/account/page.tsx:        router.push('/auth/login')
./src/app/account/page.tsx:        return
./src/app/account/page.tsx:      }
./src/app/account/page.tsx:      setUser(user)
./src/app/account/page.tsx:      fetchUserReviews(user.id)
./src/app/account/page.tsx:    }
./src/app/account/page.tsx:
./src/app/account/page.tsx:    checkUser()
./src/app/account/page.tsx:  }, [router])
./src/app/account/page.tsx:
./src/app/account/page.tsx:  const fetchUserReviews = async (userId: string) => {
./src/app/account/page.tsx:    try {
./src/app/account/page.tsx:      const { data, error } = await supabase
./src/app/account/page.tsx:        .from('reviews')
./src/app/account/page.tsx:        .select('*, companies(*)')
./src/app/account/page.tsx:        .eq('reviewer_id', userId)
./src/app/account/page.tsx:        .order('created_at', { ascending: false })
./src/app/account/page.tsx:
./src/app/account/page.tsx:      if (error) throw error
./src/app/account/page.tsx:      setReviews(data || [])
./src/app/account/page.tsx:    } catch (error) {
./src/app/account/page.tsx:      console.error('Error fetching reviews:', error)
./src/app/account/page.tsx:      toast.error('Failed to fetch your reviews')
./src/app/account/page.tsx:    } finally {
./src/app/account/page.tsx:      setIsLoading(false)
./src/app/account/page.tsx:    }
./src/app/account/page.tsx:  }
./src/app/account/page.tsx:
./src/app/account/page.tsx:  const handleDeleteReview = async (reviewId: number) => {
./src/app/account/page.tsx:    try {
./src/app/account/page.tsx:      const { error } = await supabase
./src/app/account/page.tsx:        .from('reviews')
./src/app/account/page.tsx:        .delete()
./src/app/account/page.tsx:        .eq('id', reviewId)
./src/app/account/page.tsx:        .eq('reviewer_id', user.id) // Extra safety check
./src/app/account/page.tsx:
./src/app/account/page.tsx:      if (error) throw error
./src/app/account/page.tsx:
./src/app/account/page.tsx:      setReviews(reviews.filter(review => review.id !== reviewId))
./src/app/account/page.tsx:      toast.success('Review deleted successfully')
./src/app/account/page.tsx:    } catch (error) {
./src/app/account/page.tsx:      console.error('Error deleting review:', error)
./src/app/account/page.tsx:      toast.error('Failed to delete review')
./src/app/account/page.tsx:    }
./src/app/account/page.tsx:  }
./src/app/account/page.tsx:
./src/app/account/page.tsx:  if (isLoading) {
./src/app/account/page.tsx:    return (
./src/app/account/page.tsx:      <div className="min-h-screen flex items-center justify-center">
./src/app/account/page.tsx:        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
./src/app/account/page.tsx:      </div>
./src/app/account/page.tsx:    )
./src/app/account/page.tsx:  }
./src/app/account/page.tsx:
./src/app/account/page.tsx:  return (
./src/app/account/page.tsx:    <div className="container mx-auto px-4 py-8">
./src/app/account/page.tsx:      <h1 className="text-2xl font-bold mb-6">Your Reviews</h1>
./src/app/account/page.tsx:      
./src/app/account/page.tsx:      {reviews.length === 0 ? (
./src/app/account/page.tsx:        <div className="text-center py-8">
./src/app/account/page.tsx:          <p className="text-gray-600">You haven't written any reviews yet.</p>
./src/app/account/page.tsx:          <button
./src/app/account/page.tsx:            onClick={() => router.push('/companies')}
./src/app/account/page.tsx:            className="mt-4 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
./src/app/account/page.tsx:          >
./src/app/account/page.tsx:            Browse Companies
./src/app/account/page.tsx:          </button>
./src/app/account/page.tsx:        </div>
./src/app/account/page.tsx:      ) : (
./src/app/account/page.tsx:        <div className="grid gap-6">
./src/app/account/page.tsx:          {reviews.map((review) => (
./src/app/account/page.tsx:            <div
./src/app/account/page.tsx:              key={review.id}
./src/app/account/page.tsx:              className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-300"
./src/app/account/page.tsx:            >
./src/app/account/page.tsx:              <div className="flex justify-between items-start">
./src/app/account/page.tsx:                <div>
./src/app/account/page.tsx:                  <h3 className="text-xl font-semibold text-gray-900">
./src/app/account/page.tsx:                    {review.companies?.name}
./src/app/account/page.tsx:                  </h3>
./src/app/account/page.tsx:                  <p className="text-gray-600 mt-1">{review.position}</p>
./src/app/account/page.tsx:                </div>
./src/app/account/page.tsx:                <div className="flex items-center space-x-2">
./src/app/account/page.tsx:                  <span className="text-yellow-500 font-semibold">
./src/app/account/page.tsx:                    {review.rating}/5
./src/app/account/page.tsx:                  </span>
./src/app/account/page.tsx:                  <button
./src/app/account/page.tsx:                    onClick={() => handleDeleteReview(review.id)}
./src/app/account/page.tsx:                    className="text-red-600 hover:text-red-800 font-medium"
./src/app/account/page.tsx:                  >
./src/app/account/page.tsx:                    Delete
./src/app/account/page.tsx:                  </button>
./src/app/account/page.tsx:                </div>
./src/app/account/page.tsx:              </div>
./src/app/account/page.tsx:              
./src/app/account/page.tsx:              <div className="mt-4">
./src/app/account/page.tsx:                <h4 className="font-medium text-gray-900">{review.title}</h4>
./src/app/account/page.tsx:                <div className="mt-2 space-y-4">
./src/app/account/page.tsx:                  <div>
./src/app/account/page.tsx:                    <h5 className="text-green-600 font-medium">Pros</h5>
./src/app/account/page.tsx:                    <p className="text-gray-700">{review.pros}</p>
./src/app/account/page.tsx:                  </div>
./src/app/account/page.tsx:                  <div>
./src/app/account/page.tsx:                    <h5 className="text-red-600 font-medium">Cons</h5>
./src/app/account/page.tsx:                    <p className="text-gray-700">{review.cons}</p>
./src/app/account/page.tsx:                  </div>
./src/app/account/page.tsx:                </div>
./src/app/account/page.tsx:              </div>
./src/app/account/page.tsx:
./src/app/account/page.tsx:              <div className="mt-4 text-sm text-gray-500">
./src/app/account/page.tsx:                Posted on {new Date(review.created_at).toLocaleDateString()}
./src/app/account/page.tsx:              </div>
./src/app/account/page.tsx:            </div>
./src/app/account/page.tsx:          ))}
./src/app/account/page.tsx:        </div>
./src/app/account/page.tsx:      )}
./src/app/account/page.tsx:    </div>
./src/app/account/page.tsx:  )
./src/app/account/page.tsx:}
./src/app/account/profile/page.tsx:'use client'
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:import { useEffect, useState } from 'react';
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/account/profile/page.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:import { useAuth } from '@/hooks/useAuth';
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:import { formatDateDisplay } from '@/utils/date';
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:interface Profile {
./src/app/account/profile/page.tsx:  id: string;
./src/app/account/profile/page.tsx:  email: string;
./src/app/account/profile/page.tsx:  username: string | null;
./src/app/account/profile/page.tsx:  role: string | null;
./src/app/account/profile/page.tsx:  is_verified: boolean | null;
./src/app/account/profile/page.tsx:  created_at: string;
./src/app/account/profile/page.tsx:  updated_at: string;
./src/app/account/profile/page.tsx:}
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:export default function ProfilePage() {
./src/app/account/profile/page.tsx:  const { user } = useAuth();
./src/app/account/profile/page.tsx:  const [profile, setProfile] = useState<Profile | null>(null);
./src/app/account/profile/page.tsx:  const [isLoading, setIsLoading] = useState(true);
./src/app/account/profile/page.tsx:  const [error, setError] = useState<Error | null>(null);
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  useEffect(() => {
./src/app/account/profile/page.tsx:    if (!user) return;
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:    const fetchProfile = async () => {
./src/app/account/profile/page.tsx:      try {
./src/app/account/profile/page.tsx:        const response = await fetch(`/api/users/${user.id}/profile`);
./src/app/account/profile/page.tsx:        if (!response.ok) throw new Error('Failed to fetch profile');
./src/app/account/profile/page.tsx:        const data = await response.json();
./src/app/account/profile/page.tsx:        
./src/app/account/profile/page.tsx:        setProfile({
./src/app/account/profile/page.tsx:          id: data.id,
./src/app/account/profile/page.tsx:          email: data.email || '',
./src/app/account/profile/page.tsx:          username: data.username,
./src/app/account/profile/page.tsx:          role: data.role,
./src/app/account/profile/page.tsx:          is_verified: data.is_verified,
./src/app/account/profile/page.tsx:          created_at: data.created_at,
./src/app/account/profile/page.tsx:          updated_at: data.updated_at || data.created_at
./src/app/account/profile/page.tsx:        });
./src/app/account/profile/page.tsx:      } catch (error) {
./src/app/account/profile/page.tsx:        setError(error instanceof Error ? error : new Error('An error occurred'));
./src/app/account/profile/page.tsx:      } finally {
./src/app/account/profile/page.tsx:        setIsLoading(false);
./src/app/account/profile/page.tsx:      }
./src/app/account/profile/page.tsx:    };
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:    fetchProfile();
./src/app/account/profile/page.tsx:  }, [user]);
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  if (!user) {
./src/app/account/profile/page.tsx:    return (
./src/app/account/profile/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/account/profile/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/account/profile/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/account/profile/page.tsx:            <p className="text-center text-gray-600">Please log in to view your profile.</p>
./src/app/account/profile/page.tsx:          </div>
./src/app/account/profile/page.tsx:        </div>
./src/app/account/profile/page.tsx:      </div>
./src/app/account/profile/page.tsx:    );
./src/app/account/profile/page.tsx:  }
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  if (isLoading) {
./src/app/account/profile/page.tsx:    return (
./src/app/account/profile/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/account/profile/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/account/profile/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/account/profile/page.tsx:            <p className="text-center text-gray-600">Loading profile...</p>
./src/app/account/profile/page.tsx:          </div>
./src/app/account/profile/page.tsx:        </div>
./src/app/account/profile/page.tsx:      </div>
./src/app/account/profile/page.tsx:    );
./src/app/account/profile/page.tsx:  }
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  if (error) {
./src/app/account/profile/page.tsx:    return (
./src/app/account/profile/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/account/profile/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/account/profile/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/account/profile/page.tsx:            <p className="text-center text-red-600">Error: {error.message}</p>
./src/app/account/profile/page.tsx:          </div>
./src/app/account/profile/page.tsx:        </div>
./src/app/account/profile/page.tsx:      </div>
./src/app/account/profile/page.tsx:    );
./src/app/account/profile/page.tsx:  }
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  if (!profile) {
./src/app/account/profile/page.tsx:    return (
./src/app/account/profile/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/account/profile/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/account/profile/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/account/profile/page.tsx:            <p className="text-center text-gray-600">Profile not found.</p>
./src/app/account/profile/page.tsx:          </div>
./src/app/account/profile/page.tsx:        </div>
./src/app/account/profile/page.tsx:      </div>
./src/app/account/profile/page.tsx:    );
./src/app/account/profile/page.tsx:  }
./src/app/account/profile/page.tsx:
./src/app/account/profile/page.tsx:  return (
./src/app/account/profile/page.tsx:    <div className="min-h-screen bg-gray-100 py-12">
./src/app/account/profile/page.tsx:      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/account/profile/page.tsx:        <div className="bg-white shadow rounded-lg p-6">
./src/app/account/profile/page.tsx:          <h1 className="text-2xl font-bold mb-6">Profile</h1>
./src/app/account/profile/page.tsx:          
./src/app/account/profile/page.tsx:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
./src/app/account/profile/page.tsx:            <div>
./src/app/account/profile/page.tsx:              <h2 className="text-lg font-semibold mb-4">Basic Information</h2>
./src/app/account/profile/page.tsx:              <div className="space-y-4">
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Email</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">{profile.email}</p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Username</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">{profile.username || 'Not set'}</p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Role</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">{profile.role || 'User'}</p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:              </div>
./src/app/account/profile/page.tsx:            </div>
./src/app/account/profile/page.tsx:            
./src/app/account/profile/page.tsx:            <div>
./src/app/account/profile/page.tsx:              <h2 className="text-lg font-semibold mb-4">Account Details</h2>
./src/app/account/profile/page.tsx:              <div className="space-y-4">
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Account Created</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">{formatDateDisplay(profile.created_at)}</p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Last Updated</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">{formatDateDisplay(profile.updated_at)}</p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:                <div>
./src/app/account/profile/page.tsx:                  <p className="text-sm text-gray-500">Verification Status</p>
./src/app/account/profile/page.tsx:                  <p className="font-medium">
./src/app/account/profile/page.tsx:                    {profile.is_verified ? 'Verified' : 'Not verified'}
./src/app/account/profile/page.tsx:                  </p>
./src/app/account/profile/page.tsx:                </div>
./src/app/account/profile/page.tsx:              </div>
./src/app/account/profile/page.tsx:            </div>
./src/app/account/profile/page.tsx:          </div>
./src/app/account/profile/page.tsx:        </div>
./src/app/account/profile/page.tsx:      </div>
./src/app/account/profile/page.tsx:    </div>
./src/app/account/profile/page.tsx:  );
./src/app/account/profile/page.tsx:}
./src/app/admin/analytics/page.tsx:'use client'
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:import { MonthlyReview } from '@/types';
./src/app/admin/analytics/page.tsx:import { useState, useEffect } from 'react';
./src/app/admin/analytics/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/admin/analytics/page.tsx:import { AdminLayout } from '@/components/layouts/AdminLayout';
./src/app/admin/analytics/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/admin/analytics/page.tsx:import {
./src/app/admin/analytics/page.tsx:  LineChart,
./src/app/admin/analytics/page.tsx:  Line,
./src/app/admin/analytics/page.tsx:  XAxis,
./src/app/admin/analytics/page.tsx:  YAxis,
./src/app/admin/analytics/page.tsx:  CartesianGrid,
./src/app/admin/analytics/page.tsx:  Tooltip,
./src/app/admin/analytics/page.tsx:  Legend,
./src/app/admin/analytics/page.tsx:  ResponsiveContainer,
./src/app/admin/analytics/page.tsx:  BarChart,
./src/app/admin/analytics/page.tsx:  Bar,
./src/app/admin/analytics/page.tsx:} from 'recharts';
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:interface Review {
./src/app/admin/analytics/page.tsx:  rating: number | null;
./src/app/admin/analytics/page.tsx:  created_at?: string | null;
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:interface ReviewWithRating extends Review {
./src/app/admin/analytics/page.tsx:  rating: number;
./src/app/admin/analytics/page.tsx:  created_at: string;
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:interface AnalyticsData {
./src/app/admin/analytics/page.tsx:  totalReviews: number;
./src/app/admin/analytics/page.tsx:  averageRating: number;
./src/app/admin/analytics/page.tsx:  reviewsByMonth: MonthlyReview[];
./src/app/admin/analytics/page.tsx:  ratingDistribution: {
./src/app/admin/analytics/page.tsx:    rating: number;
./src/app/admin/analytics/page.tsx:    count: number;
./src/app/admin/analytics/page.tsx:  }[];
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:function formatDate(dateString: string | null): string {
./src/app/admin/analytics/page.tsx:  if (!dateString) return 'Date not available';
./src/app/admin/analytics/page.tsx:  return new Date(dateString).toLocaleDateString();
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:function calculateAverageRating(reviews: Review[]): number {
./src/app/admin/analytics/page.tsx:  const validReviews = reviews.filter((review): review is Review & { rating: number } => 
./src/app/admin/analytics/page.tsx:    typeof review.rating === 'number'
./src/app/admin/analytics/page.tsx:  );
./src/app/admin/analytics/page.tsx:  if (validReviews.length === 0) return 0;
./src/app/admin/analytics/page.tsx:  return validReviews.reduce((acc, curr) => acc + curr.rating, 0) / validReviews.length;
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:function isValidReview(review: Review): review is Review & { rating: number; created_at: string } {
./src/app/admin/analytics/page.tsx:  return typeof review.rating === 'number' && typeof review.created_at === 'string';
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:function processMonthlyData(reviews: Review[]): MonthlyReview[] {
./src/app/admin/analytics/page.tsx:  const monthlyData: { [key: string]: MonthlyReview } = {};
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  reviews
./src/app/admin/analytics/page.tsx:    .filter((review): review is Review & { rating: number } => 
./src/app/admin/analytics/page.tsx:      typeof review.rating === 'number' && review.created_at !== null
./src/app/admin/analytics/page.tsx:    )
./src/app/admin/analytics/page.tsx:    .forEach(review => {
./src/app/admin/analytics/page.tsx:      const month = new Date(review.created_at!).toLocaleString('default', {
./src/app/admin/analytics/page.tsx:        month: 'long',
./src/app/admin/analytics/page.tsx:        year: 'numeric',
./src/app/admin/analytics/page.tsx:      });
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:      if (monthlyData[month]) {
./src/app/admin/analytics/page.tsx:        monthlyData[month].totalReviews++;
./src/app/admin/analytics/page.tsx:        monthlyData[month].totalRating += review.rating;
./src/app/admin/analytics/page.tsx:        monthlyData[month].averageRating = monthlyData[month].totalRating / monthlyData[month].totalReviews;
./src/app/admin/analytics/page.tsx:      } else {
./src/app/admin/analytics/page.tsx:        monthlyData[month] = {
./src/app/admin/analytics/page.tsx:          month,
./src/app/admin/analytics/page.tsx:          totalReviews: 1,
./src/app/admin/analytics/page.tsx:          totalRating: review.rating,
./src/app/admin/analytics/page.tsx:          averageRating: review.rating,
./src/app/admin/analytics/page.tsx:        };
./src/app/admin/analytics/page.tsx:      }
./src/app/admin/analytics/page.tsx:    });
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  return Object.values(monthlyData);
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:function calculateTotalStats(reviews: { rating: number | null }[]): { totalReviews: number; averageRating: number } {
./src/app/admin/analytics/page.tsx:  const validReviews = reviews.filter((review): review is { rating: number } => 
./src/app/admin/analytics/page.tsx:    typeof review.rating === 'number'
./src/app/admin/analytics/page.tsx:  );
./src/app/admin/analytics/page.tsx:  
./src/app/admin/analytics/page.tsx:  if (validReviews.length === 0) {
./src/app/admin/analytics/page.tsx:    return { totalReviews: 0, averageRating: 0 };
./src/app/admin/analytics/page.tsx:  }
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  const totalReviews = validReviews.length;
./src/app/admin/analytics/page.tsx:  const totalRating = validReviews.reduce((acc, curr) => acc + curr.rating, 0);
./src/app/admin/analytics/page.tsx:  const averageRating = totalRating / totalReviews;
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  return { totalReviews, averageRating };
./src/app/admin/analytics/page.tsx:}
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:export default function AdminAnalytics() {
./src/app/admin/analytics/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/admin/analytics/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/admin/analytics/page.tsx:  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  useEffect(() => {
./src/app/admin/analytics/page.tsx:    async function fetchAnalytics() {
./src/app/admin/analytics/page.tsx:      try {
./src/app/admin/analytics/page.tsx:        // Fetch total reviews and average rating
./src/app/admin/analytics/page.tsx:        const { data: totalData, error: totalError } = await supabase
./src/app/admin/analytics/page.tsx:          .from('reviews')
./src/app/admin/analytics/page.tsx:          .select('rating');
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        if (totalError) throw totalError;
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        const { totalReviews, averageRating } = calculateTotalStats(totalData);
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        // Fetch reviews by month
./src/app/admin/analytics/page.tsx:        const { data: monthlyData, error: monthlyError } = await supabase
./src/app/admin/analytics/page.tsx:          .from('reviews')
./src/app/admin/analytics/page.tsx:          .select('created_at, rating')
./src/app/admin/analytics/page.tsx:          .order('created_at');
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        if (monthlyError) throw monthlyError;
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        const reviewsByMonth = processMonthlyData(monthlyData);
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        // Calculate rating distribution
./src/app/admin/analytics/page.tsx:        const ratingDistribution = Array.from({ length: 5 }, (_, i) => ({
./src/app/admin/analytics/page.tsx:          rating: i + 1,
./src/app/admin/analytics/page.tsx:          count: totalData.filter(r => r.rating === i + 1).length,
./src/app/admin/analytics/page.tsx:        }));
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        setAnalytics({
./src/app/admin/analytics/page.tsx:          totalReviews,
./src/app/admin/analytics/page.tsx:          averageRating,
./src/app/admin/analytics/page.tsx:          reviewsByMonth,
./src/app/admin/analytics/page.tsx:          ratingDistribution,
./src/app/admin/analytics/page.tsx:        });
./src/app/admin/analytics/page.tsx:      } catch (err: unknown) {
./src/app/admin/analytics/page.tsx:        handleError(err);
./src/app/admin/analytics/page.tsx:      } finally {
./src/app/admin/analytics/page.tsx:        setLoading(false);
./src/app/admin/analytics/page.tsx:      }
./src/app/admin/analytics/page.tsx:    }
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:    fetchAnalytics();
./src/app/admin/analytics/page.tsx:  }, []);
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  const handleError = (error: unknown) => {
./src/app/admin/analytics/page.tsx:    // Log error for debugging in development
./src/app/admin/analytics/page.tsx:    if (process.env.NODE_ENV === 'development') {
./src/app/admin/analytics/page.tsx:      console.error('Error:', error);
./src/app/admin/analytics/page.tsx:    }
./src/app/admin/analytics/page.tsx:    setError(error instanceof Error ? error.message : 'An error occurred');
./src/app/admin/analytics/page.tsx:  };
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  if (loading) {
./src/app/admin/analytics/page.tsx:    return (
./src/app/admin/analytics/page.tsx:      <AdminLayout>
./src/app/admin/analytics/page.tsx:        <div className="min-h-screen flex items-center justify-center">
./src/app/admin/analytics/page.tsx:          <LoadingSpinner size="lg" />
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:      </AdminLayout>
./src/app/admin/analytics/page.tsx:    );
./src/app/admin/analytics/page.tsx:  }
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  if (error) {
./src/app/admin/analytics/page.tsx:    return (
./src/app/admin/analytics/page.tsx:      <AdminLayout>
./src/app/admin/analytics/page.tsx:        <div className="bg-red-50 dark:bg-red-900 border-l-4 border-red-500 p-4 rounded">
./src/app/admin/analytics/page.tsx:          <p className="text-red-700 dark:text-red-200">{error}</p>
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:      </AdminLayout>
./src/app/admin/analytics/page.tsx:    );
./src/app/admin/analytics/page.tsx:  }
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  if (!analytics) return null;
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:  return (
./src/app/admin/analytics/page.tsx:    <AdminLayout>
./src/app/admin/analytics/page.tsx:      <h1 className="text-3xl font-bold mb-8">Analytics Dashboard</h1>
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
./src/app/admin/analytics/page.tsx:        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
./src/app/admin/analytics/page.tsx:          <h3 className="text-lg font-semibold mb-2">Total Reviews</h3>
./src/app/admin/analytics/page.tsx:          <p className="text-3xl font-bold text-blue-600">{analytics.totalReviews}</p>
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
./src/app/admin/analytics/page.tsx:          <h3 className="text-lg font-semibold mb-2">Average Rating</h3>
./src/app/admin/analytics/page.tsx:          <p className="text-3xl font-bold text-green-600">{analytics.averageRating.toFixed(1)}</p>
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:      </div>
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
./src/app/admin/analytics/page.tsx:        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
./src/app/admin/analytics/page.tsx:          <h3 className="text-lg font-semibold mb-4">Reviews Over Time</h3>
./src/app/admin/analytics/page.tsx:          <div className="h-80">
./src/app/admin/analytics/page.tsx:            <ResponsiveContainer width="100%" height="100%">
./src/app/admin/analytics/page.tsx:              <LineChart data={analytics.reviewsByMonth}>
./src/app/admin/analytics/page.tsx:                <CartesianGrid strokeDasharray="3 3" />
./src/app/admin/analytics/page.tsx:                <XAxis dataKey="month" />
./src/app/admin/analytics/page.tsx:                <YAxis />
./src/app/admin/analytics/page.tsx:                <Tooltip />
./src/app/admin/analytics/page.tsx:                <Legend />
./src/app/admin/analytics/page.tsx:                <Line type="monotone" dataKey="count" stroke="#3B82F6" name="Number of Reviews" />
./src/app/admin/analytics/page.tsx:                <Line
./src/app/admin/analytics/page.tsx:                  type="monotone"
./src/app/admin/analytics/page.tsx:                  dataKey="averageRating"
./src/app/admin/analytics/page.tsx:                  stroke="#10B981"
./src/app/admin/analytics/page.tsx:                  name="Average Rating"
./src/app/admin/analytics/page.tsx:                />
./src/app/admin/analytics/page.tsx:              </LineChart>
./src/app/admin/analytics/page.tsx:            </ResponsiveContainer>
./src/app/admin/analytics/page.tsx:          </div>
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:
./src/app/admin/analytics/page.tsx:        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm">
./src/app/admin/analytics/page.tsx:          <h3 className="text-lg font-semibold mb-4">Rating Distribution</h3>
./src/app/admin/analytics/page.tsx:          <div className="h-80">
./src/app/admin/analytics/page.tsx:            <ResponsiveContainer width="100%" height="100%">
./src/app/admin/analytics/page.tsx:              <BarChart data={analytics.ratingDistribution}>
./src/app/admin/analytics/page.tsx:                <CartesianGrid strokeDasharray="3 3" />
./src/app/admin/analytics/page.tsx:                <XAxis dataKey="rating" />
./src/app/admin/analytics/page.tsx:                <YAxis />
./src/app/admin/analytics/page.tsx:                <Tooltip />
./src/app/admin/analytics/page.tsx:                <Legend />
./src/app/admin/analytics/page.tsx:                <Bar dataKey="count" fill="#3B82F6" name="Number of Reviews" />
./src/app/admin/analytics/page.tsx:              </BarChart>
./src/app/admin/analytics/page.tsx:            </ResponsiveContainer>
./src/app/admin/analytics/page.tsx:          </div>
./src/app/admin/analytics/page.tsx:        </div>
./src/app/admin/analytics/page.tsx:      </div>
./src/app/admin/analytics/page.tsx:    </AdminLayout>
./src/app/admin/analytics/page.tsx:  );
./src/app/admin/analytics/page.tsx:}
./src/app/admin/companies/page.tsx:'use client'
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:import { useEffect, useState } from 'react'
./src/app/admin/companies/page.tsx:import { useRouter } from 'next/navigation'
./src/app/admin/companies/page.tsx:import { supabase } from '@/lib/supabaseClient'
./src/app/admin/companies/page.tsx:import { withAuth } from '@/lib/auth/withAuth'
./src/app/admin/companies/page.tsx:import { CompanyList } from '@/components/CompanyList'
./src/app/admin/companies/page.tsx:import type { Database } from '@/types/supabase'
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:type Company = Database['public']['Tables']['companies']['Row']
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:function AdminCompaniesPage() {
./src/app/admin/companies/page.tsx:  const [companies, setCompanies] = useState<Company[]>([])
./src/app/admin/companies/page.tsx:  const [isLoading, setIsLoading] = useState(true)
./src/app/admin/companies/page.tsx:  const [error, setError] = useState<Error | null>(null)
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:  useEffect(() => {
./src/app/admin/companies/page.tsx:    const fetchCompanies = async () => {
./src/app/admin/companies/page.tsx:      try {
./src/app/admin/companies/page.tsx:        const { data, error } = await supabase
./src/app/admin/companies/page.tsx:          .from('companies')
./src/app/admin/companies/page.tsx:          .select('*')
./src/app/admin/companies/page.tsx:          .order('created_at', { ascending: false })
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:        if (error) throw error
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:        setCompanies(data || [])
./src/app/admin/companies/page.tsx:      } catch (err) {
./src/app/admin/companies/page.tsx:        console.error('Error fetching companies:', err)
./src/app/admin/companies/page.tsx:        setError(err instanceof Error ? err : new Error('Failed to fetch companies'))
./src/app/admin/companies/page.tsx:      } finally {
./src/app/admin/companies/page.tsx:        setIsLoading(false)
./src/app/admin/companies/page.tsx:      }
./src/app/admin/companies/page.tsx:    }
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:    fetchCompanies()
./src/app/admin/companies/page.tsx:  }, [])
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:  if (isLoading) {
./src/app/admin/companies/page.tsx:    return (
./src/app/admin/companies/page.tsx:      <div className="min-h-screen flex items-center justify-center">
./src/app/admin/companies/page.tsx:        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-indigo-500"></div>
./src/app/admin/companies/page.tsx:      </div>
./src/app/admin/companies/page.tsx:    )
./src/app/admin/companies/page.tsx:  }
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:  if (error) {
./src/app/admin/companies/page.tsx:    return (
./src/app/admin/companies/page.tsx:      <div className="min-h-screen flex items-center justify-center">
./src/app/admin/companies/page.tsx:        <div className="text-red-600">Error: {error.message}</div>
./src/app/admin/companies/page.tsx:      </div>
./src/app/admin/companies/page.tsx:    )
./src/app/admin/companies/page.tsx:  }
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:  return (
./src/app/admin/companies/page.tsx:    <div className="container mx-auto py-8">
./src/app/admin/companies/page.tsx:      <h1 className="text-2xl font-bold mb-6">Manage Companies</h1>
./src/app/admin/companies/page.tsx:      <div className="grid gap-4">
./src/app/admin/companies/page.tsx:        {companies.map((company) => (
./src/app/admin/companies/page.tsx:          <div
./src/app/admin/companies/page.tsx:            key={company.id}
./src/app/admin/companies/page.tsx:            className="p-4 bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-300"
./src/app/admin/companies/page.tsx:          >
./src/app/admin/companies/page.tsx:            <div className="flex justify-between items-start">
./src/app/admin/companies/page.tsx:              <div>
./src/app/admin/companies/page.tsx:                <h2 className="text-xl font-semibold">{company.name}</h2>
./src/app/admin/companies/page.tsx:                <p className="text-gray-600 mt-1">{company.industry}</p>
./src/app/admin/companies/page.tsx:                <p className="text-gray-500 text-sm mt-1">{company.location}</p>
./src/app/admin/companies/page.tsx:              </div>
./src/app/admin/companies/page.tsx:              <div className="flex items-center space-x-2">
./src/app/admin/companies/page.tsx:                <button
./src/app/admin/companies/page.tsx:                  className="px-3 py-1 text-sm text-indigo-600 hover:text-indigo-800 font-medium"
./src/app/admin/companies/page.tsx:                  onClick={() => {/* Add edit functionality */}}
./src/app/admin/companies/page.tsx:                >
./src/app/admin/companies/page.tsx:                  Edit
./src/app/admin/companies/page.tsx:                </button>
./src/app/admin/companies/page.tsx:                <button
./src/app/admin/companies/page.tsx:                  className="px-3 py-1 text-sm text-red-600 hover:text-red-800 font-medium"
./src/app/admin/companies/page.tsx:                  onClick={() => {/* Add delete functionality */}}
./src/app/admin/companies/page.tsx:                >
./src/app/admin/companies/page.tsx:                  Delete
./src/app/admin/companies/page.tsx:                </button>
./src/app/admin/companies/page.tsx:              </div>
./src/app/admin/companies/page.tsx:            </div>
./src/app/admin/companies/page.tsx:            <div className="mt-4 text-sm text-gray-500">
./src/app/admin/companies/page.tsx:              Created on {company.created_at ? new Date(company.created_at).toLocaleDateString() : 'N/A'}
./src/app/admin/companies/page.tsx:            </div>
./src/app/admin/companies/page.tsx:          </div>
./src/app/admin/companies/page.tsx:        ))}
./src/app/admin/companies/page.tsx:      </div>
./src/app/admin/companies/page.tsx:    </div>
./src/app/admin/companies/page.tsx:  )
./src/app/admin/companies/page.tsx:}
./src/app/admin/companies/page.tsx:
./src/app/admin/companies/page.tsx:// Wrap the component with withAuth HOC, requiring admin role
./src/app/admin/companies/page.tsx:export default withAuth(AdminCompaniesPage, { requiredRole: 'admin' })
./src/app/admin/page.tsx:'use client'
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:import { useEffect, useState } from 'react';
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:import { AdminLayout } from '@/components/layouts/AdminLayout';
./src/app/admin/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/admin/page.tsx:import { createClient } from '@/lib/supabaseClient';
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:interface DashboardStats {
./src/app/admin/page.tsx:  total_users: number;
./src/app/admin/page.tsx:  total_companies: number;
./src/app/admin/page.tsx:  total_reviews: number;
./src/app/admin/page.tsx:  average_rating: number;
./src/app/admin/page.tsx:  pending_reviews: number;
./src/app/admin/page.tsx:  pending_verifications: number;
./src/app/admin/page.tsx:}
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:interface ReviewWithRating {
./src/app/admin/page.tsx:  rating: number | null;
./src/app/admin/page.tsx:}
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:function AdminPage() {
./src/app/admin/page.tsx:  const [stats, setStats] = useState<DashboardStats>({
./src/app/admin/page.tsx:    total_users: 0,
./src/app/admin/page.tsx:    total_companies: 0,
./src/app/admin/page.tsx:    total_reviews: 0,
./src/app/admin/page.tsx:    average_rating: 0,
./src/app/admin/page.tsx:    pending_reviews: 0,
./src/app/admin/page.tsx:    pending_verifications: 0
./src/app/admin/page.tsx:  });
./src/app/admin/page.tsx:  const [isLoading, setIsLoading] = useState(true);
./src/app/admin/page.tsx:  const [error, setError] = useState<Error | null>(null);
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:  useEffect(() => {
./src/app/admin/page.tsx:    async function fetchStats() {
./src/app/admin/page.tsx:      try {
./src/app/admin/page.tsx:        const { count: userCount } = await createClient()
./src/app/admin/page.tsx:          .from('user_profiles')
./src/app/admin/page.tsx:          .select('*', { count: 'exact', head: true });
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const { count: companyCount } = await createClient()
./src/app/admin/page.tsx:          .from('companies')
./src/app/admin/page.tsx:          .select('*', { count: 'exact', head: true });
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const { count: reviewCount } = await createClient()
./src/app/admin/page.tsx:          .from('reviews')
./src/app/admin/page.tsx:          .select('*', { count: 'exact', head: true });
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const { data: ratings } = await createClient()
./src/app/admin/page.tsx:          .from('reviews')
./src/app/admin/page.tsx:          .select('rating')
./src/app/admin/page.tsx:          .not('rating', 'is', null) as { data: ReviewWithRating[] | null };
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const { count: pendingReviewCount } = await createClient()
./src/app/admin/page.tsx:          .from('reviews')
./src/app/admin/page.tsx:          .select('*', { count: 'exact', head: true })
./src/app/admin/page.tsx:          .eq('status', 'pending');
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const { count: pendingVerificationCount } = await createClient()
./src/app/admin/page.tsx:          .from('companies')
./src/app/admin/page.tsx:          .select('*', { count: 'exact', head: true })
./src/app/admin/page.tsx:          .eq('is_verified', false);
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        const averageRating = ratings && ratings.length > 0
./src/app/admin/page.tsx:          ? ratings.reduce((acc, curr) => acc + (curr.rating || 0), 0) / ratings.length
./src/app/admin/page.tsx:          : 0;
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:        setStats({
./src/app/admin/page.tsx:          total_users: userCount || 0,
./src/app/admin/page.tsx:          total_companies: companyCount || 0,
./src/app/admin/page.tsx:          total_reviews: reviewCount || 0,
./src/app/admin/page.tsx:          average_rating: averageRating,
./src/app/admin/page.tsx:          pending_reviews: pendingReviewCount || 0,
./src/app/admin/page.tsx:          pending_verifications: pendingVerificationCount || 0
./src/app/admin/page.tsx:        });
./src/app/admin/page.tsx:      } catch (err) {
./src/app/admin/page.tsx:        setError(err instanceof Error ? err : new Error('Failed to fetch stats'));
./src/app/admin/page.tsx:      } finally {
./src/app/admin/page.tsx:        setIsLoading(false);
./src/app/admin/page.tsx:      }
./src/app/admin/page.tsx:    }
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:    fetchStats();
./src/app/admin/page.tsx:  }, []);
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:  if (isLoading) {
./src/app/admin/page.tsx:    return (
./src/app/admin/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/page.tsx:            <p className="text-center text-gray-600">Loading dashboard stats...</p>
./src/app/admin/page.tsx:          </div>
./src/app/admin/page.tsx:        </div>
./src/app/admin/page.tsx:      </div>
./src/app/admin/page.tsx:    );
./src/app/admin/page.tsx:  }
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:  if (error) {
./src/app/admin/page.tsx:    return (
./src/app/admin/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/page.tsx:            <p className="text-center text-red-600">Error: {error.message}</p>
./src/app/admin/page.tsx:          </div>
./src/app/admin/page.tsx:        </div>
./src/app/admin/page.tsx:      </div>
./src/app/admin/page.tsx:    );
./src/app/admin/page.tsx:  }
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:  return (
./src/app/admin/page.tsx:    <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/page.tsx:      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/page.tsx:        <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/page.tsx:          <h1 className="text-2xl font-bold mb-6">Admin Dashboard</h1>
./src/app/admin/page.tsx:          
./src/app/admin/page.tsx:          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
./src/app/admin/page.tsx:            <div className="bg-blue-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-blue-700">Total Users</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-blue-900">{stats.total_users}</p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:            
./src/app/admin/page.tsx:            <div className="bg-green-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-green-700">Total Companies</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-green-900">{stats.total_companies}</p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:            
./src/app/admin/page.tsx:            <div className="bg-purple-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-purple-700">Total Reviews</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-purple-900">{stats.total_reviews}</p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:            
./src/app/admin/page.tsx:            <div className="bg-yellow-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-yellow-700">Average Rating</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-yellow-900">
./src/app/admin/page.tsx:                {stats.average_rating.toFixed(1)}
./src/app/admin/page.tsx:              </p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:            
./src/app/admin/page.tsx:            <div className="bg-red-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-red-700">Pending Reviews</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-red-900">{stats.pending_reviews}</p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:            
./src/app/admin/page.tsx:            <div className="bg-indigo-50 p-6 rounded-lg">
./src/app/admin/page.tsx:              <h3 className="text-lg font-semibold text-indigo-700">Pending Verifications</h3>
./src/app/admin/page.tsx:              <p className="text-3xl font-bold text-indigo-900">{stats.pending_verifications}</p>
./src/app/admin/page.tsx:            </div>
./src/app/admin/page.tsx:          </div>
./src/app/admin/page.tsx:        </div>
./src/app/admin/page.tsx:      </div>
./src/app/admin/page.tsx:    </div>
./src/app/admin/page.tsx:  );
./src/app/admin/page.tsx:}
./src/app/admin/page.tsx:
./src/app/admin/page.tsx:export default withAuth(AdminPage);
./src/app/admin/reviews/page.tsx:'use client'
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:import { useEffect, useState } from 'react';
./src/app/admin/reviews/page.tsx:import { useRouter } from 'next/navigation';
./src/app/admin/reviews/page.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/app/admin/reviews/page.tsx:import { AdminLayout } from '@/components/layouts/AdminLayout';
./src/app/admin/reviews/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/admin/reviews/page.tsx:import { formatDateDisplay } from '@/utils/date';
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:interface Review {
./src/app/admin/reviews/page.tsx:  id: number;
./src/app/admin/reviews/page.tsx:  title: string | null;
./src/app/admin/reviews/page.tsx:  content: string | null;
./src/app/admin/reviews/page.tsx:  rating: number | null;
./src/app/admin/reviews/page.tsx:  created_at: string | null;
./src/app/admin/reviews/page.tsx:  status: string | null;
./src/app/admin/reviews/page.tsx:  company: {
./src/app/admin/reviews/page.tsx:    id: number;
./src/app/admin/reviews/page.tsx:    name: string;
./src/app/admin/reviews/page.tsx:    industry: string | null;
./src/app/admin/reviews/page.tsx:    location: string | null;
./src/app/admin/reviews/page.tsx:  } | null;
./src/app/admin/reviews/page.tsx:}
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:function AdminReviewsPage() {
./src/app/admin/reviews/page.tsx:  const [reviews, setReviews] = useState<Review[]>([]);
./src/app/admin/reviews/page.tsx:  const [isLoading, setIsLoading] = useState(true);
./src/app/admin/reviews/page.tsx:  const [error, setError] = useState<Error | null>(null);
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:  useEffect(() => {
./src/app/admin/reviews/page.tsx:    async function fetchReviews() {
./src/app/admin/reviews/page.tsx:      try {
./src/app/admin/reviews/page.tsx:        const { data, error: fetchError } = await supabase
./src/app/admin/reviews/page.tsx:          .from('reviews')
./src/app/admin/reviews/page.tsx:          .select(`
./src/app/admin/reviews/page.tsx:            *,
./src/app/admin/reviews/page.tsx:            company:companies (
./src/app/admin/reviews/page.tsx:              id,
./src/app/admin/reviews/page.tsx:              name,
./src/app/admin/reviews/page.tsx:              industry,
./src/app/admin/reviews/page.tsx:              location
./src/app/admin/reviews/page.tsx:            )
./src/app/admin/reviews/page.tsx:          `)
./src/app/admin/reviews/page.tsx:          .order('created_at', { ascending: false });
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:        if (fetchError) {
./src/app/admin/reviews/page.tsx:          throw fetchError;
./src/app/admin/reviews/page.tsx:        }
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:        if (data) {
./src/app/admin/reviews/page.tsx:          setReviews(data as Review[]);
./src/app/admin/reviews/page.tsx:        }
./src/app/admin/reviews/page.tsx:      } catch (err) {
./src/app/admin/reviews/page.tsx:        setError(err instanceof Error ? err : new Error('Failed to fetch reviews'));
./src/app/admin/reviews/page.tsx:      } finally {
./src/app/admin/reviews/page.tsx:        setIsLoading(false);
./src/app/admin/reviews/page.tsx:      }
./src/app/admin/reviews/page.tsx:    }
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:    fetchReviews();
./src/app/admin/reviews/page.tsx:  }, []);
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:  const handleApproveReview = async (reviewId: number) => {
./src/app/admin/reviews/page.tsx:    try {
./src/app/admin/reviews/page.tsx:      const { error: updateError } = await supabase
./src/app/admin/reviews/page.tsx:        .from('reviews')
./src/app/admin/reviews/page.tsx:        .update({ status: 'approved' })
./src/app/admin/reviews/page.tsx:        .eq('id', reviewId);
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:      if (updateError) {
./src/app/admin/reviews/page.tsx:        throw updateError;
./src/app/admin/reviews/page.tsx:      }
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:      setReviews(reviews.map(review => 
./src/app/admin/reviews/page.tsx:        review.id === reviewId 
./src/app/admin/reviews/page.tsx:          ? { ...review, status: 'approved' }
./src/app/admin/reviews/page.tsx:          : review
./src/app/admin/reviews/page.tsx:      ));
./src/app/admin/reviews/page.tsx:    } catch (err) {
./src/app/admin/reviews/page.tsx:      console.error('Error approving review:', err);
./src/app/admin/reviews/page.tsx:    }
./src/app/admin/reviews/page.tsx:  };
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:  if (isLoading) {
./src/app/admin/reviews/page.tsx:    return (
./src/app/admin/reviews/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/reviews/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/reviews/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/reviews/page.tsx:            <p className="text-center text-gray-600">Loading reviews...</p>
./src/app/admin/reviews/page.tsx:          </div>
./src/app/admin/reviews/page.tsx:        </div>
./src/app/admin/reviews/page.tsx:      </div>
./src/app/admin/reviews/page.tsx:    );
./src/app/admin/reviews/page.tsx:  }
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:  if (error) {
./src/app/admin/reviews/page.tsx:    return (
./src/app/admin/reviews/page.tsx:      <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/reviews/page.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/reviews/page.tsx:          <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/reviews/page.tsx:            <p className="text-center text-red-600">Error: {error.message}</p>
./src/app/admin/reviews/page.tsx:          </div>
./src/app/admin/reviews/page.tsx:        </div>
./src/app/admin/reviews/page.tsx:        </div>
./src/app/admin/reviews/page.tsx:    );
./src/app/admin/reviews/page.tsx:  }
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:  return (
./src/app/admin/reviews/page.tsx:    <div className="min-h-screen bg-gray-100 py-12">
./src/app/admin/reviews/page.tsx:      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/app/admin/reviews/page.tsx:        <div className="bg-white shadow rounded-lg p-6">
./src/app/admin/reviews/page.tsx:          <h1 className="text-2xl font-bold mb-6">Review Management</h1>
./src/app/admin/reviews/page.tsx:          
./src/app/admin/reviews/page.tsx:          <div className="space-y-6">
./src/app/admin/reviews/page.tsx:            {reviews.map((review) => (
./src/app/admin/reviews/page.tsx:              <div key={review.id} className="bg-gray-50 rounded-lg p-6">
./src/app/admin/reviews/page.tsx:                <div className="flex justify-between items-start">
./src/app/admin/reviews/page.tsx:              <div>
./src/app/admin/reviews/page.tsx:                    <h3 className="text-lg font-semibold">
./src/app/admin/reviews/page.tsx:                  {review.company?.name || 'Unknown Company'}
./src/app/admin/reviews/page.tsx:                    </h3>
./src/app/admin/reviews/page.tsx:                    <p className="text-sm text-gray-500">
./src/app/admin/reviews/page.tsx:                      {review.company?.industry || 'Industry not specified'} • 
./src/app/admin/reviews/page.tsx:                      {review.company?.location || 'Location not specified'}
./src/app/admin/reviews/page.tsx:                    </p>
./src/app/admin/reviews/page.tsx:                </div>
./src/app/admin/reviews/page.tsx:                  {review.status === 'pending' && (
./src/app/admin/reviews/page.tsx:                  <button
./src/app/admin/reviews/page.tsx:                      onClick={() => handleApproveReview(review.id)}
./src/app/admin/reviews/page.tsx:                      className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
./src/app/admin/reviews/page.tsx:                  >
./src/app/admin/reviews/page.tsx:                    Approve
./src/app/admin/reviews/page.tsx:                  </button>
./src/app/admin/reviews/page.tsx:                )}
./src/app/admin/reviews/page.tsx:              </div>
./src/app/admin/reviews/page.tsx:                
./src/app/admin/reviews/page.tsx:                <div className="mt-4">
./src/app/admin/reviews/page.tsx:                  <p className="text-gray-700">{review.content || 'No content provided'}</p>
./src/app/admin/reviews/page.tsx:            </div>
./src/app/admin/reviews/page.tsx:                
./src/app/admin/reviews/page.tsx:                <div className="mt-4 flex justify-between items-center text-sm text-gray-500">
./src/app/admin/reviews/page.tsx:              <div>
./src/app/admin/reviews/page.tsx:                    Rating: <span className="font-medium">{review.rating || 'Not rated'}</span>
./src/app/admin/reviews/page.tsx:              </div>
./src/app/admin/reviews/page.tsx:              <div>
./src/app/admin/reviews/page.tsx:                    Posted on {formatDateDisplay(review.created_at)}
./src/app/admin/reviews/page.tsx:              </div>
./src/app/admin/reviews/page.tsx:            </div>
./src/app/admin/reviews/page.tsx:          </div>
./src/app/admin/reviews/page.tsx:        ))}
./src/app/admin/reviews/page.tsx:            
./src/app/admin/reviews/page.tsx:            {reviews.length === 0 && (
./src/app/admin/reviews/page.tsx:              <p className="text-center text-gray-600">No reviews found.</p>
./src/app/admin/reviews/page.tsx:            )}
./src/app/admin/reviews/page.tsx:          </div>
./src/app/admin/reviews/page.tsx:        </div>
./src/app/admin/reviews/page.tsx:      </div>
./src/app/admin/reviews/page.tsx:      </div>
./src/app/admin/reviews/page.tsx:  );
./src/app/admin/reviews/page.tsx:}
./src/app/admin/reviews/page.tsx:
./src/app/admin/reviews/page.tsx:export default withAuth(AdminReviewsPage);
./src/app/admin/users/page.tsx:'use client'
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:import { useState, useEffect } from 'react';
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:import { User as SupabaseUser } from '@supabase/supabase-js';
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:import { createClient } from '@/lib/supabaseClient';
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:import { AdminLayout } from '@/components/layouts/AdminLayout';
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/admin/users/page.tsx:import { useToast } from '@/components/ui/toast';
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:type User = {
./src/app/admin/users/page.tsx:  id: string;
./src/app/admin/users/page.tsx:  email: string;
./src/app/admin/users/page.tsx:  created_at: string;
./src/app/admin/users/page.tsx:  app_metadata: {
./src/app/admin/users/page.tsx:    role?: string;
./src/app/admin/users/page.tsx:    provider?: string;
./src/app/admin/users/page.tsx:    providers?: string[];
./src/app/admin/users/page.tsx:  };
./src/app/admin/users/page.tsx:};
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:const mapSupabaseUser = (user: SupabaseUser): User => ({
./src/app/admin/users/page.tsx:  id: user.id,
./src/app/admin/users/page.tsx:  email: user.email || '',
./src/app/admin/users/page.tsx:  created_at: user.created_at,
./src/app/admin/users/page.tsx:  app_metadata: user.app_metadata || { role: 'user' }
./src/app/admin/users/page.tsx:});
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:export default function AdminUsers() {
./src/app/admin/users/page.tsx:  const { toast } = useToast();
./src/app/admin/users/page.tsx:  const [users, setUsers] = useState<User[]>([]);
./src/app/admin/users/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/admin/users/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:  useEffect(() => {
./src/app/admin/users/page.tsx:    async function fetchUsers() {
./src/app/admin/users/page.tsx:      try {
./src/app/admin/users/page.tsx:        const supabase = createClient();
./src/app/admin/users/page.tsx:        const { data: { users: supabaseUsers }, error } = await supabase.auth.admin.listUsers();
./src/app/admin/users/page.tsx:        if (error) throw error;
./src/app/admin/users/page.tsx:        setUsers((supabaseUsers || []).map(mapSupabaseUser));
./src/app/admin/users/page.tsx:      } catch (err) {
./src/app/admin/users/page.tsx:        console.error('Error fetching users:', err);
./src/app/admin/users/page.tsx:        setError('Failed to load users');
./src/app/admin/users/page.tsx:      } finally {
./src/app/admin/users/page.tsx:        setLoading(false);
./src/app/admin/users/page.tsx:      }
./src/app/admin/users/page.tsx:    }
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:    fetchUsers();
./src/app/admin/users/page.tsx:  }, []);
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:  const handleRoleChange = async (userId: string, newRole: string) => {
./src/app/admin/users/page.tsx:    try {
./src/app/admin/users/page.tsx:      const supabase = createClient();
./src/app/admin/users/page.tsx:      const { error } = await supabase.auth.admin.updateUserById(userId, {
./src/app/admin/users/page.tsx:        user_metadata: { role: newRole }
./src/app/admin/users/page.tsx:      });
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:      if (error) throw error;
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:      setUsers(users.map(u => 
./src/app/admin/users/page.tsx:        u.id === userId 
./src/app/admin/users/page.tsx:          ? { ...u, app_metadata: { ...u.app_metadata, role: newRole } }
./src/app/admin/users/page.tsx:          : u
./src/app/admin/users/page.tsx:      ));
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:      toast('User role updated successfully', 'success');
./src/app/admin/users/page.tsx:    } catch (err) {
./src/app/admin/users/page.tsx:      console.error('Error updating user role:', err);
./src/app/admin/users/page.tsx:      toast('Failed to update user role', 'error');
./src/app/admin/users/page.tsx:    }
./src/app/admin/users/page.tsx:  };
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:  if (loading) {
./src/app/admin/users/page.tsx:    return (
./src/app/admin/users/page.tsx:      <AdminLayout>
./src/app/admin/users/page.tsx:        <div className="min-h-screen flex items-center justify-center">
./src/app/admin/users/page.tsx:          <LoadingSpinner size="lg" />
./src/app/admin/users/page.tsx:        </div>
./src/app/admin/users/page.tsx:      </AdminLayout>
./src/app/admin/users/page.tsx:    );
./src/app/admin/users/page.tsx:  }
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:  if (error) {
./src/app/admin/users/page.tsx:    return (
./src/app/admin/users/page.tsx:      <AdminLayout>
./src/app/admin/users/page.tsx:        <div className="bg-red-50 dark:bg-red-900 border-l-4 border-red-500 p-4 rounded">
./src/app/admin/users/page.tsx:          <p className="text-red-700 dark:text-red-200">{error}</p>
./src/app/admin/users/page.tsx:        </div>
./src/app/admin/users/page.tsx:      </AdminLayout>
./src/app/admin/users/page.tsx:    );
./src/app/admin/users/page.tsx:  }
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:  return (
./src/app/admin/users/page.tsx:    <AdminLayout>
./src/app/admin/users/page.tsx:      <h1 className="text-3xl font-bold mb-8">Manage Users</h1>
./src/app/admin/users/page.tsx:
./src/app/admin/users/page.tsx:      <div className="overflow-x-auto">
./src/app/admin/users/page.tsx:        <table className="min-w-full bg-white dark:bg-gray-800 rounded-lg shadow">
./src/app/admin/users/page.tsx:          <thead>
./src/app/admin/users/page.tsx:            <tr className="bg-gray-50 dark:bg-gray-700">
./src/app/admin/users/page.tsx:              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
./src/app/admin/users/page.tsx:                Email
./src/app/admin/users/page.tsx:              </th>
./src/app/admin/users/page.tsx:              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
./src/app/admin/users/page.tsx:                Role
./src/app/admin/users/page.tsx:              </th>
./src/app/admin/users/page.tsx:              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
./src/app/admin/users/page.tsx:                Joined
./src/app/admin/users/page.tsx:              </th>
./src/app/admin/users/page.tsx:            </tr>
./src/app/admin/users/page.tsx:          </thead>
./src/app/admin/users/page.tsx:          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
./src/app/admin/users/page.tsx:            {users.map(u => (
./src/app/admin/users/page.tsx:              <tr key={u.id}>
./src/app/admin/users/page.tsx:                <td className="px-6 py-4 whitespace-nowrap">{u.email}</td>
./src/app/admin/users/page.tsx:                <td className="px-6 py-4 whitespace-nowrap">
./src/app/admin/users/page.tsx:                  <select
./src/app/admin/users/page.tsx:                    value={u.app_metadata?.role || 'user'}
./src/app/admin/users/page.tsx:                    onChange={e => handleRoleChange(u.id, e.target.value)}
./src/app/admin/users/page.tsx:                    className="rounded border-gray-300 dark:border-gray-600 dark:bg-gray-700"
./src/app/admin/users/page.tsx:                  >
./src/app/admin/users/page.tsx:                    <option value="user">User</option>
./src/app/admin/users/page.tsx:                    <option value="admin">Admin</option>
./src/app/admin/users/page.tsx:                  </select>
./src/app/admin/users/page.tsx:                </td>
./src/app/admin/users/page.tsx:                <td className="px-6 py-4 whitespace-nowrap">
./src/app/admin/users/page.tsx:                  {new Date(u.created_at).toLocaleDateString()}
./src/app/admin/users/page.tsx:                </td>
./src/app/admin/users/page.tsx:              </tr>
./src/app/admin/users/page.tsx:            ))}
./src/app/admin/users/page.tsx:          </tbody>
./src/app/admin/users/page.tsx:        </table>
./src/app/admin/users/page.tsx:      </div>
./src/app/admin/users/page.tsx:    </AdminLayout>
./src/app/admin/users/page.tsx:  );
./src/app/admin/users/page.tsx:}
./src/app/api/auth/route.ts:import { cookies } from 'next/headers'
./src/app/api/auth/route.ts:import { NextResponse } from 'next/server'
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr'
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:// Helper function to create Supabase client
./src/app/api/auth/route.ts:const createClient = () => {
./src/app/api/auth/route.ts:  return createServerClient(
./src/app/api/auth/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/app/api/auth/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/app/api/auth/route.ts:    {
./src/app/api/auth/route.ts:      cookies: {
./src/app/api/auth/route.ts:        async get(name: string) {
./src/app/api/auth/route.ts:          const cookieStore = await cookies()
./src/app/api/auth/route.ts:          return cookieStore.get(name)?.value
./src/app/api/auth/route.ts:        },
./src/app/api/auth/route.ts:        async set(name: string, value: string, options: CookieOptions) {
./src/app/api/auth/route.ts:          const cookieStore = await cookies()
./src/app/api/auth/route.ts:          cookieStore.set({
./src/app/api/auth/route.ts:            name,
./src/app/api/auth/route.ts:            value,
./src/app/api/auth/route.ts:            ...options,
./src/app/api/auth/route.ts:            path: '/'
./src/app/api/auth/route.ts:          })
./src/app/api/auth/route.ts:        },
./src/app/api/auth/route.ts:        async remove(name: string, _options: CookieOptions) {
./src/app/api/auth/route.ts:          const cookieStore = await cookies()
./src/app/api/auth/route.ts:          cookieStore.delete(name)
./src/app/api/auth/route.ts:        }
./src/app/api/auth/route.ts:      }
./src/app/api/auth/route.ts:    }
./src/app/api/auth/route.ts:  )
./src/app/api/auth/route.ts:}
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:export async function POST(request: Request) {
./src/app/api/auth/route.ts:  const { email, password } = await request.json()
./src/app/api/auth/route.ts:  const supabase = createClient()
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  const { data, error } = await supabase.auth.signInWithPassword({
./src/app/api/auth/route.ts:    email,
./src/app/api/auth/route.ts:    password,
./src/app/api/auth/route.ts:  })
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  if (error) {
./src/app/api/auth/route.ts:    return NextResponse.json({ error: error.message }, { status: 401 })
./src/app/api/auth/route.ts:  }
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  return NextResponse.json(data)
./src/app/api/auth/route.ts:}
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:export async function DELETE() {
./src/app/api/auth/route.ts:  const supabase = createClient()
./src/app/api/auth/route.ts:  const { error } = await supabase.auth.signOut()
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  if (error) {
./src/app/api/auth/route.ts:    return NextResponse.json({ error: error.message }, { status: 500 })
./src/app/api/auth/route.ts:  }
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  return NextResponse.json({ success: true })
./src/app/api/auth/route.ts:}
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:export async function GET() {
./src/app/api/auth/route.ts:  const supabase = createClient()
./src/app/api/auth/route.ts:  const { data: { session }, error } = await supabase.auth.getSession()
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  if (error) {
./src/app/api/auth/route.ts:    return NextResponse.json({ error: error.message }, { status: 500 })
./src/app/api/auth/route.ts:  }
./src/app/api/auth/route.ts:
./src/app/api/auth/route.ts:  return NextResponse.json({ session })
./src/app/api/auth/route.ts:}
./src/app/api/companies/route.ts:import { NextRequest, NextResponse } from 'next/server';
./src/app/api/companies/route.ts:import { cookies } from 'next/headers';
./src/app/api/companies/route.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr';
./src/app/api/companies/route.ts:import type { Database } from '@/types/supabase';
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:type Company = Database['public']['Tables']['companies']['Row'];
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:// Helper function to create Supabase client
./src/app/api/companies/route.ts:const createClient = async () => {
./src/app/api/companies/route.ts:  return createServerClient(
./src/app/api/companies/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/app/api/companies/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/app/api/companies/route.ts:    {
./src/app/api/companies/route.ts:      cookies: {
./src/app/api/companies/route.ts:        async get(name: string) {
./src/app/api/companies/route.ts:          const cookieStore = await cookies();
./src/app/api/companies/route.ts:          return cookieStore.get(name)?.value;
./src/app/api/companies/route.ts:        },
./src/app/api/companies/route.ts:        async set(name: string, value: string, options: CookieOptions) {
./src/app/api/companies/route.ts:          const cookieStore = await cookies();
./src/app/api/companies/route.ts:          cookieStore.set({ name, value, ...options });
./src/app/api/companies/route.ts:        },
./src/app/api/companies/route.ts:        async remove(name: string, options: CookieOptions) {
./src/app/api/companies/route.ts:          const cookieStore = await cookies();
./src/app/api/companies/route.ts:          cookieStore.delete({ name, ...options });
./src/app/api/companies/route.ts:        }
./src/app/api/companies/route.ts:      }
./src/app/api/companies/route.ts:    }
./src/app/api/companies/route.ts:  );
./src/app/api/companies/route.ts:};
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:export async function GET(request: Request) {
./src/app/api/companies/route.ts:  const supabase = await createClient();
./src/app/api/companies/route.ts:  const searchParams = new URL(request.url).searchParams;
./src/app/api/companies/route.ts:  const search = searchParams.get('search');
./src/app/api/companies/route.ts:  const industry = searchParams.get('industry');
./src/app/api/companies/route.ts:  const minRating = searchParams.get('minRating');
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  let query = supabase.from('companies').select('*');
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  if (search) {
./src/app/api/companies/route.ts:    query = query.ilike('name', `%${search}%`);
./src/app/api/companies/route.ts:  }
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  if (industry) {
./src/app/api/companies/route.ts:    query = query.eq('industry', industry);
./src/app/api/companies/route.ts:  }
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  if (minRating) {
./src/app/api/companies/route.ts:    query = query.gte('average_rating', minRating);
./src/app/api/companies/route.ts:  }
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  const { data, error } = await query;
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  if (error) {
./src/app/api/companies/route.ts:    return NextResponse.json({ error: error.message }, { status: 500 });
./src/app/api/companies/route.ts:  }
./src/app/api/companies/route.ts:
./src/app/api/companies/route.ts:  return NextResponse.json(data);
./src/app/api/companies/route.ts:}
./src/app/api/companies/[id]/reviews/route.ts:import { cookies } from 'next/headers'
./src/app/api/companies/[id]/reviews/route.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr'
./src/app/api/companies/[id]/reviews/route.ts:import { NextRequest, NextResponse } from 'next/server'
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:type RouteParams = { params: { id: string } }
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:// Helper function to create Supabase client
./src/app/api/companies/[id]/reviews/route.ts:const createClient = () => {
./src/app/api/companies/[id]/reviews/route.ts:  return createServerClient(
./src/app/api/companies/[id]/reviews/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/app/api/companies/[id]/reviews/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/app/api/companies/[id]/reviews/route.ts:    {
./src/app/api/companies/[id]/reviews/route.ts:      cookies: {
./src/app/api/companies/[id]/reviews/route.ts:        async get(name: string) {
./src/app/api/companies/[id]/reviews/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/reviews/route.ts:          return cookieStore.get(name)?.value
./src/app/api/companies/[id]/reviews/route.ts:        },
./src/app/api/companies/[id]/reviews/route.ts:        async set(name: string, value: string, options: CookieOptions) {
./src/app/api/companies/[id]/reviews/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/reviews/route.ts:          cookieStore.set({ name, value, ...options })
./src/app/api/companies/[id]/reviews/route.ts:        },
./src/app/api/companies/[id]/reviews/route.ts:        async remove(name: string, options: CookieOptions) {
./src/app/api/companies/[id]/reviews/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/reviews/route.ts:          cookieStore.set({ name, value: '', ...options })
./src/app/api/companies/[id]/reviews/route.ts:        },
./src/app/api/companies/[id]/reviews/route.ts:      },
./src/app/api/companies/[id]/reviews/route.ts:    }
./src/app/api/companies/[id]/reviews/route.ts:  )
./src/app/api/companies/[id]/reviews/route.ts:}
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:type Context = {
./src/app/api/companies/[id]/reviews/route.ts:  params: {
./src/app/api/companies/[id]/reviews/route.ts:    id: string
./src/app/api/companies/[id]/reviews/route.ts:  }
./src/app/api/companies/[id]/reviews/route.ts:}
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:export async function GET(
./src/app/api/companies/[id]/reviews/route.ts:  _request: NextRequest,
./src/app/api/companies/[id]/reviews/route.ts:  { params }: Context
./src/app/api/companies/[id]/reviews/route.ts:): Promise<Response> {
./src/app/api/companies/[id]/reviews/route.ts:  const supabase = createClient()
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:  try {
./src/app/api/companies/[id]/reviews/route.ts:    const { data: reviews, error } = await supabase
./src/app/api/companies/[id]/reviews/route.ts:      .from('reviews')
./src/app/api/companies/[id]/reviews/route.ts:      .select('*')
./src/app/api/companies/[id]/reviews/route.ts:      .eq('company_id', params.id)
./src/app/api/companies/[id]/reviews/route.ts:      .order('created_at', { ascending: false })
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:    if (error) {
./src/app/api/companies/[id]/reviews/route.ts:      throw error
./src/app/api/companies/[id]/reviews/route.ts:    }
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:    return NextResponse.json(reviews)
./src/app/api/companies/[id]/reviews/route.ts:  } catch (error) {
./src/app/api/companies/[id]/reviews/route.ts:    console.error('Error:', error)
./src/app/api/companies/[id]/reviews/route.ts:    return NextResponse.json(
./src/app/api/companies/[id]/reviews/route.ts:      { error: error instanceof Error ? error.message : 'Failed to fetch reviews' },
./src/app/api/companies/[id]/reviews/route.ts:      { status: 500 }
./src/app/api/companies/[id]/reviews/route.ts:    )
./src/app/api/companies/[id]/reviews/route.ts:  }
./src/app/api/companies/[id]/reviews/route.ts:}
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:export async function POST(
./src/app/api/companies/[id]/reviews/route.ts:  request: NextRequest,
./src/app/api/companies/[id]/reviews/route.ts:  { params }: Context
./src/app/api/companies/[id]/reviews/route.ts:): Promise<Response> {
./src/app/api/companies/[id]/reviews/route.ts:  const body = await request.json()
./src/app/api/companies/[id]/reviews/route.ts:  const supabase = createClient()
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:  try {
./src/app/api/companies/[id]/reviews/route.ts:    const { data, error } = await supabase
./src/app/api/companies/[id]/reviews/route.ts:      .from('reviews')
./src/app/api/companies/[id]/reviews/route.ts:      .insert([{ ...body, company_id: params.id }])
./src/app/api/companies/[id]/reviews/route.ts:      .select()
./src/app/api/companies/[id]/reviews/route.ts:      .single()
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:    if (error) {
./src/app/api/companies/[id]/reviews/route.ts:      throw error
./src/app/api/companies/[id]/reviews/route.ts:    }
./src/app/api/companies/[id]/reviews/route.ts:
./src/app/api/companies/[id]/reviews/route.ts:    return NextResponse.json(data)
./src/app/api/companies/[id]/reviews/route.ts:  } catch (error) {
./src/app/api/companies/[id]/reviews/route.ts:    console.error('Error:', error)
./src/app/api/companies/[id]/reviews/route.ts:    return NextResponse.json(
./src/app/api/companies/[id]/reviews/route.ts:      { error: error instanceof Error ? error.message : 'Failed to create review' },
./src/app/api/companies/[id]/reviews/route.ts:      { status: 500 }
./src/app/api/companies/[id]/reviews/route.ts:    )
./src/app/api/companies/[id]/reviews/route.ts:  }
./src/app/api/companies/[id]/reviews/route.ts:}
./src/app/api/companies/[id]/route.ts:import { cookies } from 'next/headers'
./src/app/api/companies/[id]/route.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr'
./src/app/api/companies/[id]/route.ts:import { NextResponse } from 'next/server'
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:// Helper function to create Supabase client
./src/app/api/companies/[id]/route.ts:const createClient = () => {
./src/app/api/companies/[id]/route.ts:  return createServerClient(
./src/app/api/companies/[id]/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/app/api/companies/[id]/route.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/app/api/companies/[id]/route.ts:    {
./src/app/api/companies/[id]/route.ts:      cookies: {
./src/app/api/companies/[id]/route.ts:        async get(name: string) {
./src/app/api/companies/[id]/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/route.ts:          return cookieStore.get(name)?.value
./src/app/api/companies/[id]/route.ts:        },
./src/app/api/companies/[id]/route.ts:        async set(name: string, value: string, options: CookieOptions) {
./src/app/api/companies/[id]/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/route.ts:          cookieStore.set({ name, value, ...options })
./src/app/api/companies/[id]/route.ts:        },
./src/app/api/companies/[id]/route.ts:        async remove(name: string, options: CookieOptions) {
./src/app/api/companies/[id]/route.ts:          const cookieStore = await cookies()
./src/app/api/companies/[id]/route.ts:          cookieStore.set({ name, value: '', ...options })
./src/app/api/companies/[id]/route.ts:        },
./src/app/api/companies/[id]/route.ts:      },
./src/app/api/companies/[id]/route.ts:    }
./src/app/api/companies/[id]/route.ts:  )
./src/app/api/companies/[id]/route.ts:}
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:export async function GET(request: Request, { params }: any) {
./src/app/api/companies/[id]/route.ts:  const supabase = createClient()
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:  try {
./src/app/api/companies/[id]/route.ts:    const { data, error } = await supabase
./src/app/api/companies/[id]/route.ts:      .from('companies')
./src/app/api/companies/[id]/route.ts:      .select('*')
./src/app/api/companies/[id]/route.ts:      .eq('id', params?.id)
./src/app/api/companies/[id]/route.ts:      .single()
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:    if (error) throw error
./src/app/api/companies/[id]/route.ts:    if (!data) return NextResponse.json({ error: 'Company not found' }, { status: 404 })
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(data)
./src/app/api/companies/[id]/route.ts:  } catch (error) {
./src/app/api/companies/[id]/route.ts:    console.error('Error:', error)
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(
./src/app/api/companies/[id]/route.ts:      { error: error instanceof Error ? error.message : 'Failed to fetch company' },
./src/app/api/companies/[id]/route.ts:      { status: 500 }
./src/app/api/companies/[id]/route.ts:    )
./src/app/api/companies/[id]/route.ts:  }
./src/app/api/companies/[id]/route.ts:}
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:export async function PUT(request: Request, { params }: { params: { id: string } }) {
./src/app/api/companies/[id]/route.ts:  const supabase = createClient()
./src/app/api/companies/[id]/route.ts:  const updates = await request.json()
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:  try {
./src/app/api/companies/[id]/route.ts:    const { data, error } = await supabase
./src/app/api/companies/[id]/route.ts:      .from('companies')
./src/app/api/companies/[id]/route.ts:      .update(updates)
./src/app/api/companies/[id]/route.ts:      .eq('id', params?.id)
./src/app/api/companies/[id]/route.ts:      .select()
./src/app/api/companies/[id]/route.ts:      .single()
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:    if (error) throw error
./src/app/api/companies/[id]/route.ts:    if (!data) return NextResponse.json({ error: 'Company not found' }, { status: 404 })
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(data)
./src/app/api/companies/[id]/route.ts:  } catch (error) {
./src/app/api/companies/[id]/route.ts:    console.error('Error:', error)
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(
./src/app/api/companies/[id]/route.ts:      { error: error instanceof Error ? error.message : 'Failed to update company' },
./src/app/api/companies/[id]/route.ts:      { status: 500 }
./src/app/api/companies/[id]/route.ts:    )
./src/app/api/companies/[id]/route.ts:  }
./src/app/api/companies/[id]/route.ts:}
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:export async function DELETE(request: Request, { params }: { params: { id: string } }) {
./src/app/api/companies/[id]/route.ts:  const supabase = createClient()
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:  try {
./src/app/api/companies/[id]/route.ts:    const { error } = await supabase
./src/app/api/companies/[id]/route.ts:      .from('companies')
./src/app/api/companies/[id]/route.ts:      .delete()
./src/app/api/companies/[id]/route.ts:      .eq('id', params?.id)
./src/app/api/companies/[id]/route.ts:
./src/app/api/companies/[id]/route.ts:    if (error) throw error
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(null, { status: 204 })
./src/app/api/companies/[id]/route.ts:  } catch (error) {
./src/app/api/companies/[id]/route.ts:    console.error('Error:', error)
./src/app/api/companies/[id]/route.ts:    return NextResponse.json(
./src/app/api/companies/[id]/route.ts:      { error: error instanceof Error ? error.message : 'Failed to delete company' },
./src/app/api/companies/[id]/route.ts:      { status: 500 }
./src/app/api/companies/[id]/route.ts:    )
./src/app/api/companies/[id]/route.ts:  }
./src/app/api/companies/[id]/route.ts:}
./src/app/api/reviews/route.ts:import { Review } from '@/types';
./src/app/api/reviews/route.ts:import { NextResponse } from 'next/server';
./src/app/api/reviews/route.ts:import { createServerSupabaseClient } from '@/lib/supabaseServer';
./src/app/api/reviews/route.ts:import { Database } from '@/types/supabase';
./src/app/api/reviews/route.ts:import { reviewSchema } from '@/lib/schemas';
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:/**
./src/app/api/reviews/route.ts: * src/app/api/reviews/route.ts
./src/app/api/reviews/route.ts: * API routes for handling review creation and updates
./src/app/api/reviews/route.ts: */
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:export async function GET(request: Request) {
./src/app/api/reviews/route.ts:  try {
./src/app/api/reviews/route.ts:    const supabase = createServerSupabaseClient();
./src/app/api/reviews/route.ts:    const { searchParams } = new URL(request.url);
./src/app/api/reviews/route.ts:    
./src/app/api/reviews/route.ts:    const companyId = searchParams.get('companyId');
./src/app/api/reviews/route.ts:    const page = parseInt(searchParams.get('page') || '1');
./src/app/api/reviews/route.ts:    const limit = parseInt(searchParams.get('limit') || '10');
./src/app/api/reviews/route.ts:    const offset = (page - 1) * limit;
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    let query = supabase
./src/app/api/reviews/route.ts:      .from('reviews')
./src/app/api/reviews/route.ts:      .select('*')
./src/app/api/reviews/route.ts:      .order('created_at', { ascending: false })
./src/app/api/reviews/route.ts:      .range(offset, offset + limit - 1);
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    if (companyId) {
./src/app/api/reviews/route.ts:      query = query.eq('company_id', parseInt(companyId));
./src/app/api/reviews/route.ts:    }
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    const { data, error, count } = await query;
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    if (error) throw error;
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    return NextResponse.json({
./src/app/api/reviews/route.ts:      reviews: data,
./src/app/api/reviews/route.ts:      total: count || 0,
./src/app/api/reviews/route.ts:      page,
./src/app/api/reviews/route.ts:      limit
./src/app/api/reviews/route.ts:    });
./src/app/api/reviews/route.ts:  } catch (error) {
./src/app/api/reviews/route.ts:    console.error('Error fetching reviews:', error);
./src/app/api/reviews/route.ts:    return NextResponse.json(
./src/app/api/reviews/route.ts:      { error: 'Failed to fetch reviews' },
./src/app/api/reviews/route.ts:      { status: 500 }
./src/app/api/reviews/route.ts:    );
./src/app/api/reviews/route.ts:  }
./src/app/api/reviews/route.ts:}
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:export async function POST(request: Request) {
./src/app/api/reviews/route.ts:  try {
./src/app/api/reviews/route.ts:    const supabase = createServerSupabaseClient();
./src/app/api/reviews/route.ts:    const { data: { user }, error: authError } = await supabase.auth.getUser();
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    if (authError || !user) {
./src/app/api/reviews/route.ts:      return NextResponse.json(
./src/app/api/reviews/route.ts:        { error: 'Unauthorized' },
./src/app/api/reviews/route.ts:        { status: 401 }
./src/app/api/reviews/route.ts:      );
./src/app/api/reviews/route.ts:    }
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    const body = await request.json();
./src/app/api/reviews/route.ts:    const validatedData = reviewSchema.parse(body);
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    const { data, error } = await supabase
./src/app/api/reviews/route.ts:      .from('reviews')
./src/app/api/reviews/route.ts:      .insert({
./src/app/api/reviews/route.ts:        ...validatedData,
./src/app/api/reviews/route.ts:        reviewer_id: user.id,
./src/app/api/reviews/route.ts:        status: 'pending'
./src/app/api/reviews/route.ts:      })
./src/app/api/reviews/route.ts:      .select()
./src/app/api/reviews/route.ts:      .single();
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    if (error) throw error;
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    return NextResponse.json(data);
./src/app/api/reviews/route.ts:  } catch (error) {
./src/app/api/reviews/route.ts:    console.error('Error creating review:', error);
./src/app/api/reviews/route.ts:    return NextResponse.json(
./src/app/api/reviews/route.ts:      { error: 'Failed to create review' },
./src/app/api/reviews/route.ts:      { status: 500 }
./src/app/api/reviews/route.ts:    );
./src/app/api/reviews/route.ts:  }
./src/app/api/reviews/route.ts:}
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:export async function DELETE(request: Request) {
./src/app/api/reviews/route.ts:  const supabase = createServerSupabaseClient()
./src/app/api/reviews/route.ts:  const { id } = await request.json()
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:  try {
./src/app/api/reviews/route.ts:    const { error } = await supabase
./src/app/api/reviews/route.ts:      .from('reviews')
./src/app/api/reviews/route.ts:      .delete()
./src/app/api/reviews/route.ts:      .eq('id', id)
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    if (error) {
./src/app/api/reviews/route.ts:      throw error
./src/app/api/reviews/route.ts:    }
./src/app/api/reviews/route.ts:
./src/app/api/reviews/route.ts:    return new Response(null, { status: 204 })
./src/app/api/reviews/route.ts:  } catch (error) {
./src/app/api/reviews/route.ts:    console.error('Error deleting review:', error)
./src/app/api/reviews/route.ts:    return new Response(
./src/app/api/reviews/route.ts:      JSON.stringify({ error: 'Failed to delete review' }),
./src/app/api/reviews/route.ts:      {
./src/app/api/reviews/route.ts:        status: 500,
./src/app/api/reviews/route.ts:        headers: { 'Content-Type': 'application/json' },
./src/app/api/reviews/route.ts:      }
./src/app/api/reviews/route.ts:    )
./src/app/api/reviews/route.ts:  }
./src/app/api/reviews/route.ts:}
./src/app/api/test-connection/route.ts:import { NextResponse } from 'next/server';
./src/app/api/test-connection/route.ts:import { createServerSupabaseClient } from '@/lib/supabaseServer';
./src/app/api/test-connection/route.ts:
./src/app/api/test-connection/route.ts:export async function GET() {
./src/app/api/test-connection/route.ts:  try {
./src/app/api/test-connection/route.ts:    const supabase = createServerSupabaseClient();
./src/app/api/test-connection/route.ts:    const { data, error } = await supabase.from('companies').select('count').single();
./src/app/api/test-connection/route.ts:
./src/app/api/test-connection/route.ts:    if (error) throw error;
./src/app/api/test-connection/route.ts:
./src/app/api/test-connection/route.ts:    return NextResponse.json({
./src/app/api/test-connection/route.ts:      status: 'success',
./src/app/api/test-connection/route.ts:      message: 'Successfully connected to Supabase',
./src/app/api/test-connection/route.ts:      data
./src/app/api/test-connection/route.ts:    });
./src/app/api/test-connection/route.ts:  } catch (error) {
./src/app/api/test-connection/route.ts:    console.error('Database connection error:', error);
./src/app/api/test-connection/route.ts:    return NextResponse.json(
./src/app/api/test-connection/route.ts:      {
./src/app/api/test-connection/route.ts:        status: 'error',
./src/app/api/test-connection/route.ts:        message: 'Failed to connect to database',
./src/app/api/test-connection/route.ts:        error: error instanceof Error ? error.message : 'Unknown error'
./src/app/api/test-connection/route.ts:      },
./src/app/api/test-connection/route.ts:      { status: 500 }
./src/app/api/test-connection/route.ts:    );
./src/app/api/test-connection/route.ts:  }
./src/app/api/test-connection/route.ts:}
./src/app/api/test-news/route.ts:import { fetchCompanyNews } from '@/lib/marketauxApi';
./src/app/api/test-news/route.ts:import { NextResponse } from 'next/server';
./src/app/api/test-news/route.ts:
./src/app/api/test-news/route.ts:export async function GET(request: Request) {
./src/app/api/test-news/route.ts:  const { searchParams } = new URL(request.url);
./src/app/api/test-news/route.ts:  const company = searchParams.get('company');
./src/app/api/test-news/route.ts:
./src/app/api/test-news/route.ts:  if (!company) {
./src/app/api/test-news/route.ts:    return NextResponse.json({ error: 'Company name is required' }, { status: 400 });
./src/app/api/test-news/route.ts:  }
./src/app/api/test-news/route.ts:
./src/app/api/test-news/route.ts:  try {
./src/app/api/test-news/route.ts:    const articles = await fetchCompanyNews(company);
./src/app/api/test-news/route.ts:    return NextResponse.json({ articles });
./src/app/api/test-news/route.ts:  } catch (error) {
./src/app/api/test-news/route.ts:    console.error('Error fetching news:', error);
./src/app/api/test-news/route.ts:    return NextResponse.json(
./src/app/api/test-news/route.ts:      { error: 'Failed to fetch news' },
./src/app/api/test-news/route.ts:      { status: 500 }
./src/app/api/test-news/route.ts:    );
./src/app/api/test-news/route.ts:  }
./src/app/api/test-news/route.ts:} 
./src/app/auth/callback/page.tsx:'use client';
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:import { useEffect } from 'react';
./src/app/auth/callback/page.tsx:import { useRouter } from 'next/navigation';
./src/app/auth/callback/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:export default function AuthCallbackPage() {
./src/app/auth/callback/page.tsx:  const router = useRouter();
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:  useEffect(() => {
./src/app/auth/callback/page.tsx:    const handleAuthCallback = async () => {
./src/app/auth/callback/page.tsx:      try {
./src/app/auth/callback/page.tsx:        // First check if we already have a session
./src/app/auth/callback/page.tsx:        const { data: { session: existingSession } } = await supabase.auth.getSession();
./src/app/auth/callback/page.tsx:        if (existingSession) {
./src/app/auth/callback/page.tsx:          console.log('Already have a valid session, redirecting to home');
./src/app/auth/callback/page.tsx:          router.push('/');
./src/app/auth/callback/page.tsx:          return;
./src/app/auth/callback/page.tsx:        }
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:        // Check for error in URL
./src/app/auth/callback/page.tsx:        const error = new URLSearchParams(window.location.search).get('error');
./src/app/auth/callback/page.tsx:        if (error) {
./src/app/auth/callback/page.tsx:          console.error('Auth provider error:', error);
./src/app/auth/callback/page.tsx:          throw new Error(`Auth provider error: ${error}`);
./src/app/auth/callback/page.tsx:        }
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:        // Get code from URL
./src/app/auth/callback/page.tsx:        const code = new URLSearchParams(window.location.search).get('code');
./src/app/auth/callback/page.tsx:        if (!code) {
./src/app/auth/callback/page.tsx:          console.error('No code found in URL:', window.location.search);
./src/app/auth/callback/page.tsx:          throw new Error('Authorization code missing');
./src/app/auth/callback/page.tsx:        }
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:        // Exchange code for session
./src/app/auth/callback/page.tsx:        const { data, error: sessionError } = await supabase.auth.exchangeCodeForSession(code);
./src/app/auth/callback/page.tsx:        if (sessionError) {
./src/app/auth/callback/page.tsx:          console.error('Session exchange error:', sessionError);
./src/app/auth/callback/page.tsx:          throw sessionError;
./src/app/auth/callback/page.tsx:        }
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:        // Verify we got a session
./src/app/auth/callback/page.tsx:        if (!data.session) {
./src/app/auth/callback/page.tsx:          throw new Error('No session returned from code exchange');
./src/app/auth/callback/page.tsx:        }
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:        console.log('Successfully authenticated, redirecting to home');
./src/app/auth/callback/page.tsx:        router.push('/');
./src/app/auth/callback/page.tsx:      } catch (error) {
./src/app/auth/callback/page.tsx:        console.error('Authentication error:', error);
./src/app/auth/callback/page.tsx:        router.push('/auth/login?error=auth_failed');
./src/app/auth/callback/page.tsx:      }
./src/app/auth/callback/page.tsx:    };
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:    handleAuthCallback();
./src/app/auth/callback/page.tsx:  }, [router]);
./src/app/auth/callback/page.tsx:
./src/app/auth/callback/page.tsx:  return (
./src/app/auth/callback/page.tsx:    <div className="min-h-screen flex items-center justify-center bg-gray-50">
./src/app/auth/callback/page.tsx:      <div className="text-center space-y-4">
./src/app/auth/callback/page.tsx:        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500 mx-auto" />
./src/app/auth/callback/page.tsx:        <p className="text-gray-600">Completing authentication...</p>
./src/app/auth/callback/page.tsx:      </div>
./src/app/auth/callback/page.tsx:    </div>
./src/app/auth/callback/page.tsx:  );
./src/app/auth/callback/page.tsx:} 
./src/app/auth/error/page.tsx:'use client';
./src/app/auth/error/page.tsx:
./src/app/auth/error/page.tsx:import { useEffect } from 'react';
./src/app/auth/error/page.tsx:import { useSearchParams } from 'next/navigation';
./src/app/auth/error/page.tsx:import { useRouter } from 'next/navigation';
./src/app/auth/error/page.tsx:
./src/app/auth/error/page.tsx:export default function AuthErrorPage() {
./src/app/auth/error/page.tsx:  const searchParams = useSearchParams();
./src/app/auth/error/page.tsx:  const error = searchParams?.get('error');
./src/app/auth/error/page.tsx:  const router = useRouter();
./src/app/auth/error/page.tsx:
./src/app/auth/error/page.tsx:  useEffect(() => {
./src/app/auth/error/page.tsx:    // Log the error for debugging
./src/app/auth/error/page.tsx:    if (error) {
./src/app/auth/error/page.tsx:      console.error('Auth error:', error);
./src/app/auth/error/page.tsx:    }
./src/app/auth/error/page.tsx:  }, [error]);
./src/app/auth/error/page.tsx:
./src/app/auth/error/page.tsx:  return (
./src/app/auth/error/page.tsx:    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
./src/app/auth/error/page.tsx:      <div className="max-w-md w-full space-y-8">
./src/app/auth/error/page.tsx:        <div>
./src/app/auth/error/page.tsx:          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-gray-100">
./src/app/auth/error/page.tsx:            Authentication Error
./src/app/auth/error/page.tsx:          </h2>
./src/app/auth/error/page.tsx:          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
./src/app/auth/error/page.tsx:            {error || 'An error occurred during authentication'}
./src/app/auth/error/page.tsx:          </p>
./src/app/auth/error/page.tsx:        </div>
./src/app/auth/error/page.tsx:        <div className="mt-8 space-y-6">
./src/app/auth/error/page.tsx:          <div className="text-center">
./src/app/auth/error/page.tsx:            <button
./src/app/auth/error/page.tsx:              onClick={() => router.push('/auth/login')}
./src/app/auth/error/page.tsx:              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
./src/app/auth/error/page.tsx:            >
./src/app/auth/error/page.tsx:              Return to Login
./src/app/auth/error/page.tsx:            </button>
./src/app/auth/error/page.tsx:          </div>
./src/app/auth/error/page.tsx:        </div>
./src/app/auth/error/page.tsx:      </div>
./src/app/auth/error/page.tsx:    </div>
./src/app/auth/error/page.tsx:  );
./src/app/auth/error/page.tsx:} 
./src/app/auth/login/page.tsx:'use client'
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:import { useState, useEffect } from 'react'
./src/app/auth/login/page.tsx:import { useRouter, useSearchParams } from 'next/navigation'
./src/app/auth/login/page.tsx:import { motion, AnimatePresence } from 'framer-motion'
./src/app/auth/login/page.tsx:import { User, Lock, Mail } from 'lucide-react'
./src/app/auth/login/page.tsx:import { supabase } from '@/lib/supabaseClient'
./src/app/auth/login/page.tsx:import { Button } from '@/components/ui/button'
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:function LoginContent() {
./src/app/auth/login/page.tsx:  const router = useRouter()
./src/app/auth/login/page.tsx:  const searchParams = useSearchParams()
./src/app/auth/login/page.tsx:  const isSignUp = searchParams?.get('signup') === 'true'
./src/app/auth/login/page.tsx:  const [error, setError] = useState<string | null>(null)
./src/app/auth/login/page.tsx:  const [email, setEmail] = useState('')
./src/app/auth/login/page.tsx:  const [password, setPassword] = useState('')
./src/app/auth/login/page.tsx:  const [isLoading, setIsLoading] = useState(false)
./src/app/auth/login/page.tsx:  const [showResetForm, setShowResetForm] = useState(false)
./src/app/auth/login/page.tsx:  const [resetEmail, setResetEmail] = useState('')
./src/app/auth/login/page.tsx:  const [resetSuccess, setResetSuccess] = useState(false)
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  useEffect(() => {
./src/app/auth/login/page.tsx:    // Check if user is already logged in
./src/app/auth/login/page.tsx:    const checkSession = async () => {
./src/app/auth/login/page.tsx:      const { data: { session } } = await supabase.auth.getSession()
./src/app/auth/login/page.tsx:      if (session) {
./src/app/auth/login/page.tsx:        console.log('User already logged in, redirecting to home')
./src/app/auth/login/page.tsx:        router.push('/')
./src/app/auth/login/page.tsx:        return
./src/app/auth/login/page.tsx:      }
./src/app/auth/login/page.tsx:    }
./src/app/auth/login/page.tsx:    checkSession()
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:    // Check for callback errors
./src/app/auth/login/page.tsx:    const callbackError = searchParams?.get('error')
./src/app/auth/login/page.tsx:    if (callbackError) {
./src/app/auth/login/page.tsx:      handleError('Authentication failed. Please try again.')
./src/app/auth/login/page.tsx:    }
./src/app/auth/login/page.tsx:  }, [searchParams, router])
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  const handleSuccess = () => {
./src/app/auth/login/page.tsx:    router.push('/')
./src/app/auth/login/page.tsx:  }
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  const handleError = (error: string) => {
./src/app/auth/login/page.tsx:    setError(error)
./src/app/auth/login/page.tsx:    setTimeout(() => setError(null), 5000)
./src/app/auth/login/page.tsx:  }
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  const handleEmailSignIn = async (e: React.FormEvent) => {
./src/app/auth/login/page.tsx:    e.preventDefault()
./src/app/auth/login/page.tsx:    setIsLoading(true)
./src/app/auth/login/page.tsx:    try {
./src/app/auth/login/page.tsx:      const { data, error } = isSignUp 
./src/app/auth/login/page.tsx:        ? await supabase.auth.signUp({
./src/app/auth/login/page.tsx:            email,
./src/app/auth/login/page.tsx:            password,
./src/app/auth/login/page.tsx:            options: {
./src/app/auth/login/page.tsx:              emailRedirectTo: `${window.location.origin}/auth/callback`,
./src/app/auth/login/page.tsx:            },
./src/app/auth/login/page.tsx:          })
./src/app/auth/login/page.tsx:        : await supabase.auth.signInWithPassword({
./src/app/auth/login/page.tsx:            email,
./src/app/auth/login/page.tsx:            password,
./src/app/auth/login/page.tsx:          })
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:      if (error) throw error
./src/app/auth/login/page.tsx:      
./src/app/auth/login/page.tsx:      if (isSignUp) {
./src/app/auth/login/page.tsx:        handleSuccess()
./src/app/auth/login/page.tsx:      } else if (data?.user) {
./src/app/auth/login/page.tsx:        handleSuccess()
./src/app/auth/login/page.tsx:      }
./src/app/auth/login/page.tsx:    } catch (error) {
./src/app/auth/login/page.tsx:      handleError(error instanceof Error ? error.message : `Failed to ${isSignUp ? 'create account' : 'sign in'}`)
./src/app/auth/login/page.tsx:    } finally {
./src/app/auth/login/page.tsx:      setIsLoading(false)
./src/app/auth/login/page.tsx:    }
./src/app/auth/login/page.tsx:  }
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  const handlePasswordReset = async (e: React.FormEvent) => {
./src/app/auth/login/page.tsx:    e.preventDefault()
./src/app/auth/login/page.tsx:    setIsLoading(true)
./src/app/auth/login/page.tsx:    try {
./src/app/auth/login/page.tsx:      const { error } = await supabase.auth.resetPasswordForEmail(resetEmail, {
./src/app/auth/login/page.tsx:        redirectTo: `${window.location.origin}/auth/reset-password`,
./src/app/auth/login/page.tsx:      })
./src/app/auth/login/page.tsx:      
./src/app/auth/login/page.tsx:      if (error) throw error
./src/app/auth/login/page.tsx:      
./src/app/auth/login/page.tsx:      setResetSuccess(true)
./src/app/auth/login/page.tsx:      setTimeout(() => {
./src/app/auth/login/page.tsx:        setShowResetForm(false)
./src/app/auth/login/page.tsx:        setResetSuccess(false)
./src/app/auth/login/page.tsx:      }, 3000)
./src/app/auth/login/page.tsx:    } catch (error) {
./src/app/auth/login/page.tsx:      handleError(error instanceof Error ? error.message : 'Failed to send reset email')
./src/app/auth/login/page.tsx:    } finally {
./src/app/auth/login/page.tsx:      setIsLoading(false)
./src/app/auth/login/page.tsx:    }
./src/app/auth/login/page.tsx:  }
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  const handleGoogleLogin = async () => {
./src/app/auth/login/page.tsx:    try {
./src/app/auth/login/page.tsx:      setIsLoading(true)
./src/app/auth/login/page.tsx:      setError(null)
./src/app/auth/login/page.tsx:      
./src/app/auth/login/page.tsx:      const { data, error } = await supabase.auth.signInWithOAuth({
./src/app/auth/login/page.tsx:        provider: 'google',
./src/app/auth/login/page.tsx:        options: {
./src/app/auth/login/page.tsx:          redirectTo: `${window.location.origin}/auth/callback`,
./src/app/auth/login/page.tsx:          queryParams: {
./src/app/auth/login/page.tsx:            access_type: 'offline',
./src/app/auth/login/page.tsx:            prompt: 'consent',
./src/app/auth/login/page.tsx:            response_type: 'code'
./src/app/auth/login/page.tsx:          }
./src/app/auth/login/page.tsx:        }
./src/app/auth/login/page.tsx:      })
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:      if (error) throw error
./src/app/auth/login/page.tsx:      
./src/app/auth/login/page.tsx:      // No need to redirect here - OAuth will handle it
./src/app/auth/login/page.tsx:    } catch (error) {
./src/app/auth/login/page.tsx:      console.error('Error signing in with Google:', error)
./src/app/auth/login/page.tsx:      handleError(error instanceof Error ? error.message : 'Failed to sign in with Google')
./src/app/auth/login/page.tsx:      setIsLoading(false)
./src/app/auth/login/page.tsx:    }
./src/app/auth/login/page.tsx:  }
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:  return (
./src/app/auth/login/page.tsx:    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
./src/app/auth/login/page.tsx:      <div className="max-w-md w-full space-y-8">
./src/app/auth/login/page.tsx:        <div>
./src/app/auth/login/page.tsx:          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
./src/app/auth/login/page.tsx:            {showResetForm ? 'Reset Password' : isSignUp ? 'Create an account' : 'Sign in to your account'}
./src/app/auth/login/page.tsx:          </h2>
./src/app/auth/login/page.tsx:        </div>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:        <AnimatePresence mode="wait">
./src/app/auth/login/page.tsx:          {error && (
./src/app/auth/login/page.tsx:            <motion.div
./src/app/auth/login/page.tsx:              initial={{ opacity: 0, y: -10 }}
./src/app/auth/login/page.tsx:              animate={{ opacity: 1, y: 0 }}
./src/app/auth/login/page.tsx:              exit={{ opacity: 0, y: -10 }}
./src/app/auth/login/page.tsx:              className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
./src/app/auth/login/page.tsx:              role="alert"
./src/app/auth/login/page.tsx:            >
./src/app/auth/login/page.tsx:              <span className="block sm:inline">{error}</span>
./src/app/auth/login/page.tsx:            </motion.div>
./src/app/auth/login/page.tsx:          )}
./src/app/auth/login/page.tsx:        </AnimatePresence>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:        {showResetForm ? (
./src/app/auth/login/page.tsx:          <form className="mt-8 space-y-6" onSubmit={handlePasswordReset}>
./src/app/auth/login/page.tsx:            <div className="rounded-md shadow-sm -space-y-px">
./src/app/auth/login/page.tsx:              <div>
./src/app/auth/login/page.tsx:                <label htmlFor="reset-email" className="sr-only">
./src/app/auth/login/page.tsx:                  Email address
./src/app/auth/login/page.tsx:                </label>
./src/app/auth/login/page.tsx:                <div className="relative">
./src/app/auth/login/page.tsx:                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
./src/app/auth/login/page.tsx:                    <Mail className="h-5 w-5 text-gray-400" />
./src/app/auth/login/page.tsx:                  </div>
./src/app/auth/login/page.tsx:                  <input
./src/app/auth/login/page.tsx:                    id="reset-email"
./src/app/auth/login/page.tsx:                    name="email"
./src/app/auth/login/page.tsx:                    type="email"
./src/app/auth/login/page.tsx:                    autoComplete="email"
./src/app/auth/login/page.tsx:                    required
./src/app/auth/login/page.tsx:                    className="appearance-none rounded-md relative block w-full px-3 py-2 pl-10 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
./src/app/auth/login/page.tsx:                    placeholder="Email address"
./src/app/auth/login/page.tsx:                    value={resetEmail}
./src/app/auth/login/page.tsx:                    onChange={(e) => setResetEmail(e.target.value)}
./src/app/auth/login/page.tsx:                  />
./src/app/auth/login/page.tsx:                </div>
./src/app/auth/login/page.tsx:              </div>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:            <div>
./src/app/auth/login/page.tsx:              <button
./src/app/auth/login/page.tsx:                type="submit"
./src/app/auth/login/page.tsx:                disabled={isLoading}
./src/app/auth/login/page.tsx:                className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white ${
./src/app/auth/login/page.tsx:                  isLoading ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'
./src/app/auth/login/page.tsx:                } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
./src/app/auth/login/page.tsx:              >
./src/app/auth/login/page.tsx:                {isLoading ? 'Sending...' : 'Send Reset Link'}
./src/app/auth/login/page.tsx:              </button>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:            <div className="text-sm text-center">
./src/app/auth/login/page.tsx:              <button
./src/app/auth/login/page.tsx:                type="button"
./src/app/auth/login/page.tsx:                onClick={() => setShowResetForm(false)}
./src/app/auth/login/page.tsx:                className="font-medium text-indigo-600 hover:text-indigo-500"
./src/app/auth/login/page.tsx:              >
./src/app/auth/login/page.tsx:                Back to sign in
./src/app/auth/login/page.tsx:              </button>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:          </form>
./src/app/auth/login/page.tsx:        ) : (
./src/app/auth/login/page.tsx:          <form className="mt-8 space-y-6" onSubmit={handleEmailSignIn}>
./src/app/auth/login/page.tsx:            <div className="rounded-md shadow-sm -space-y-px">
./src/app/auth/login/page.tsx:              <div>
./src/app/auth/login/page.tsx:                <label htmlFor="email-address" className="sr-only">
./src/app/auth/login/page.tsx:                  Email address
./src/app/auth/login/page.tsx:                </label>
./src/app/auth/login/page.tsx:                <div className="relative">
./src/app/auth/login/page.tsx:                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
./src/app/auth/login/page.tsx:                    <Mail className="h-5 w-5 text-gray-400" />
./src/app/auth/login/page.tsx:                  </div>
./src/app/auth/login/page.tsx:                  <input
./src/app/auth/login/page.tsx:                    id="email-address"
./src/app/auth/login/page.tsx:                    name="email"
./src/app/auth/login/page.tsx:                    type="email"
./src/app/auth/login/page.tsx:                    autoComplete="email"
./src/app/auth/login/page.tsx:                    required
./src/app/auth/login/page.tsx:                    className="appearance-none rounded-t-md relative block w-full px-3 py-2 pl-10 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
./src/app/auth/login/page.tsx:                    placeholder="Email address"
./src/app/auth/login/page.tsx:                    value={email}
./src/app/auth/login/page.tsx:                    onChange={(e) => setEmail(e.target.value)}
./src/app/auth/login/page.tsx:                  />
./src/app/auth/login/page.tsx:                </div>
./src/app/auth/login/page.tsx:              </div>
./src/app/auth/login/page.tsx:              <div>
./src/app/auth/login/page.tsx:                <label htmlFor="password" className="sr-only">
./src/app/auth/login/page.tsx:                  Password
./src/app/auth/login/page.tsx:                </label>
./src/app/auth/login/page.tsx:                <div className="relative">
./src/app/auth/login/page.tsx:                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
./src/app/auth/login/page.tsx:                    <Lock className="h-5 w-5 text-gray-400" />
./src/app/auth/login/page.tsx:                  </div>
./src/app/auth/login/page.tsx:                  <input
./src/app/auth/login/page.tsx:                    id="password"
./src/app/auth/login/page.tsx:                    name="password"
./src/app/auth/login/page.tsx:                    type="password"
./src/app/auth/login/page.tsx:                    autoComplete="current-password"
./src/app/auth/login/page.tsx:                    required
./src/app/auth/login/page.tsx:                    className="appearance-none rounded-b-md relative block w-full px-3 py-2 pl-10 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
./src/app/auth/login/page.tsx:                    placeholder="Password"
./src/app/auth/login/page.tsx:                    value={password}
./src/app/auth/login/page.tsx:                    onChange={(e) => setPassword(e.target.value)}
./src/app/auth/login/page.tsx:                  />
./src/app/auth/login/page.tsx:                </div>
./src/app/auth/login/page.tsx:              </div>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:            <div className="flex items-center justify-between">
./src/app/auth/login/page.tsx:              <div className="text-sm">
./src/app/auth/login/page.tsx:                <button
./src/app/auth/login/page.tsx:                  type="button"
./src/app/auth/login/page.tsx:                  onClick={() => setShowResetForm(true)}
./src/app/auth/login/page.tsx:                  className="font-medium text-indigo-600 hover:text-indigo-500"
./src/app/auth/login/page.tsx:                >
./src/app/auth/login/page.tsx:                  Forgot your password?
./src/app/auth/login/page.tsx:                </button>
./src/app/auth/login/page.tsx:              </div>
./src/app/auth/login/page.tsx:              <div className="text-sm">
./src/app/auth/login/page.tsx:                <button
./src/app/auth/login/page.tsx:                  type="button"
./src/app/auth/login/page.tsx:                  onClick={() => router.push(`/auth/login?signup=${!isSignUp}`)}
./src/app/auth/login/page.tsx:                  className="font-medium text-indigo-600 hover:text-indigo-500"
./src/app/auth/login/page.tsx:                >
./src/app/auth/login/page.tsx:                  {isSignUp ? 'Already have an account?' : "Don't have an account?"}
./src/app/auth/login/page.tsx:                </button>
./src/app/auth/login/page.tsx:              </div>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:            <div>
./src/app/auth/login/page.tsx:              <button
./src/app/auth/login/page.tsx:                type="submit"
./src/app/auth/login/page.tsx:                disabled={isLoading}
./src/app/auth/login/page.tsx:                className={`group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white ${
./src/app/auth/login/page.tsx:                  isLoading ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'
./src/app/auth/login/page.tsx:                } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500`}
./src/app/auth/login/page.tsx:              >
./src/app/auth/login/page.tsx:                <span className="absolute left-0 inset-y-0 flex items-center pl-3">
./src/app/auth/login/page.tsx:                  <User className="h-5 w-5 text-indigo-500 group-hover:text-indigo-400" />
./src/app/auth/login/page.tsx:                </span>
./src/app/auth/login/page.tsx:                {isLoading ? 'Processing...' : isSignUp ? 'Create Account' : 'Sign in'}
./src/app/auth/login/page.tsx:              </button>
./src/app/auth/login/page.tsx:            </div>
./src/app/auth/login/page.tsx:          </form>
./src/app/auth/login/page.tsx:        )}
./src/app/auth/login/page.tsx:      </div>
./src/app/auth/login/page.tsx:    </div>
./src/app/auth/login/page.tsx:  )
./src/app/auth/login/page.tsx:}
./src/app/auth/login/page.tsx:
./src/app/auth/login/page.tsx:export default function LoginPage(): JSX.Element {
./src/app/auth/login/page.tsx:  return (
./src/app/auth/login/page.tsx:    <div className="min-h-screen bg-gray-50">
./src/app/auth/login/page.tsx:      <LoginContent />
./src/app/auth/login/page.tsx:    </div>
./src/app/auth/login/page.tsx:  )
./src/app/auth/login/page.tsx:}
./src/app/auth/page.tsx:'use client'
./src/app/auth/page.tsx:
./src/app/auth/page.tsx:import { useEffect } from 'react';
./src/app/auth/page.tsx:import { useRouter } from 'next/navigation';
./src/app/auth/page.tsx:import Auth from '@/components/Auth';
./src/app/auth/page.tsx:
./src/app/auth/page.tsx:export default function AuthPage() {
./src/app/auth/page.tsx:  const router = useRouter();
./src/app/auth/page.tsx:
./src/app/auth/page.tsx:  return (
./src/app/auth/page.tsx:    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 py-12 sm:px-6 lg:px-8">
./src/app/auth/page.tsx:      <div className="sm:mx-auto sm:w-full sm:max-w-md">
./src/app/auth/page.tsx:        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
./src/app/auth/page.tsx:          Sign in to your account
./src/app/auth/page.tsx:        </h2>
./src/app/auth/page.tsx:        <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
./src/app/auth/page.tsx:          Or{' '}
./src/app/auth/page.tsx:          <span className="font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">
./src/app/auth/page.tsx:            create a new account
./src/app/auth/page.tsx:          </span>
./src/app/auth/page.tsx:        </p>
./src/app/auth/page.tsx:      </div>
./src/app/auth/page.tsx:
./src/app/auth/page.tsx:      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
./src/app/auth/page.tsx:        <div className="bg-white dark:bg-gray-800 py-8 px-4 shadow sm:rounded-lg sm:px-10">
./src/app/auth/page.tsx:          <Auth />
./src/app/auth/page.tsx:        </div>
./src/app/auth/page.tsx:      </div>
./src/app/auth/page.tsx:    </div>
./src/app/auth/page.tsx:  );
./src/app/auth/page.tsx:} 
./src/app/auth/reset-password/page.tsx:'use client'
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:import { useState } from 'react';
./src/app/auth/reset-password/page.tsx:import { useRouter } from 'next/navigation';
./src/app/auth/reset-password/page.tsx:import { createClient } from '@/lib/supabaseClient';
./src/app/auth/reset-password/page.tsx:import { Button } from '@/components/ui/button';
./src/app/auth/reset-password/page.tsx:import { Input } from '@/components/ui/input';
./src/app/auth/reset-password/page.tsx:import { Label } from '@/components/ui/label';
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:export default function ResetPasswordPage() {
./src/app/auth/reset-password/page.tsx:  const [password, setPassword] = useState('');
./src/app/auth/reset-password/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/auth/reset-password/page.tsx:  const [isLoading, setIsLoading] = useState(false);
./src/app/auth/reset-password/page.tsx:  const [isSuccess, setIsSuccess] = useState(false);
./src/app/auth/reset-password/page.tsx:  const router = useRouter();
./src/app/auth/reset-password/page.tsx:  const supabase = createClient();
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:  const validatePassword = (password: string) => {
./src/app/auth/reset-password/page.tsx:    if (password.length < 8) return 'Password must be at least 8 characters';
./src/app/auth/reset-password/page.tsx:    if (!/[A-Z]/.test(password)) return 'Password must contain an uppercase letter';
./src/app/auth/reset-password/page.tsx:    if (!/[a-z]/.test(password)) return 'Password must contain a lowercase letter';
./src/app/auth/reset-password/page.tsx:    if (!/[0-9]/.test(password)) return 'Password must contain a number';
./src/app/auth/reset-password/page.tsx:    return null;
./src/app/auth/reset-password/page.tsx:  };
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:  const handleSubmit = async (e: React.FormEvent) => {
./src/app/auth/reset-password/page.tsx:    e.preventDefault();
./src/app/auth/reset-password/page.tsx:    setError(null);
./src/app/auth/reset-password/page.tsx:    setIsLoading(true);
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:    const passwordError = validatePassword(password);
./src/app/auth/reset-password/page.tsx:    if (passwordError) {
./src/app/auth/reset-password/page.tsx:      setError(passwordError);
./src/app/auth/reset-password/page.tsx:      setIsLoading(false);
./src/app/auth/reset-password/page.tsx:      return;
./src/app/auth/reset-password/page.tsx:    }
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:    try {
./src/app/auth/reset-password/page.tsx:      const { error } = await supabase.auth.updateUser({
./src/app/auth/reset-password/page.tsx:        password: password
./src/app/auth/reset-password/page.tsx:      });
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:      if (error) throw error;
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:      setIsSuccess(true);
./src/app/auth/reset-password/page.tsx:      setTimeout(() => {
./src/app/auth/reset-password/page.tsx:        router.push('/');
./src/app/auth/reset-password/page.tsx:      }, 2000);
./src/app/auth/reset-password/page.tsx:    } catch (error) {
./src/app/auth/reset-password/page.tsx:      console.error('Reset password error:', error);
./src/app/auth/reset-password/page.tsx:      setError(error instanceof Error ? error.message : 'Failed to reset password. Please try again.');
./src/app/auth/reset-password/page.tsx:    } finally {
./src/app/auth/reset-password/page.tsx:      setIsLoading(false);
./src/app/auth/reset-password/page.tsx:    }
./src/app/auth/reset-password/page.tsx:  };
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:  if (isSuccess) {
./src/app/auth/reset-password/page.tsx:    return (
./src/app/auth/reset-password/page.tsx:      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 py-12 sm:px-6 lg:px-8">
./src/app/auth/reset-password/page.tsx:        <div className="sm:mx-auto sm:w-full sm:max-w-md">
./src/app/auth/reset-password/page.tsx:          <div className="bg-white dark:bg-gray-800 py-8 px-4 shadow sm:rounded-lg sm:px-10">
./src/app/auth/reset-password/page.tsx:            <h2 className="text-center text-3xl font-extrabold text-gray-900 dark:text-white mb-6">
./src/app/auth/reset-password/page.tsx:              Password Reset Successful
./src/app/auth/reset-password/page.tsx:            </h2>
./src/app/auth/reset-password/page.tsx:            <p className="text-center text-gray-600 dark:text-gray-400">
./src/app/auth/reset-password/page.tsx:              Redirecting you to the home page...
./src/app/auth/reset-password/page.tsx:            </p>
./src/app/auth/reset-password/page.tsx:          </div>
./src/app/auth/reset-password/page.tsx:        </div>
./src/app/auth/reset-password/page.tsx:      </div>
./src/app/auth/reset-password/page.tsx:    );
./src/app/auth/reset-password/page.tsx:  }
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:  return (
./src/app/auth/reset-password/page.tsx:    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 py-12 sm:px-6 lg:px-8">
./src/app/auth/reset-password/page.tsx:      <div className="sm:mx-auto sm:w-full sm:max-w-md">
./src/app/auth/reset-password/page.tsx:        <h2 className="text-center text-3xl font-extrabold text-gray-900 dark:text-white">
./src/app/auth/reset-password/page.tsx:          Reset Your Password
./src/app/auth/reset-password/page.tsx:        </h2>
./src/app/auth/reset-password/page.tsx:      </div>
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
./src/app/auth/reset-password/page.tsx:        <div className="bg-white dark:bg-gray-800 py-8 px-4 shadow sm:rounded-lg sm:px-10">
./src/app/auth/reset-password/page.tsx:          <form onSubmit={handleSubmit} className="space-y-6">
./src/app/auth/reset-password/page.tsx:            <div>
./src/app/auth/reset-password/page.tsx:              <Label htmlFor="password">New Password</Label>
./src/app/auth/reset-password/page.tsx:              <Input
./src/app/auth/reset-password/page.tsx:                id="password"
./src/app/auth/reset-password/page.tsx:                type="password"
./src/app/auth/reset-password/page.tsx:                value={password}
./src/app/auth/reset-password/page.tsx:                onChange={(e) => setPassword(e.target.value)}
./src/app/auth/reset-password/page.tsx:                required
./src/app/auth/reset-password/page.tsx:                className="mt-1"
./src/app/auth/reset-password/page.tsx:              />
./src/app/auth/reset-password/page.tsx:            </div>
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:            {error && (
./src/app/auth/reset-password/page.tsx:              <p className="text-sm text-red-600 dark:text-red-400">
./src/app/auth/reset-password/page.tsx:                {error}
./src/app/auth/reset-password/page.tsx:              </p>
./src/app/auth/reset-password/page.tsx:            )}
./src/app/auth/reset-password/page.tsx:
./src/app/auth/reset-password/page.tsx:            <Button
./src/app/auth/reset-password/page.tsx:              type="submit"
./src/app/auth/reset-password/page.tsx:              className="w-full"
./src/app/auth/reset-password/page.tsx:              disabled={isLoading}
./src/app/auth/reset-password/page.tsx:            >
./src/app/auth/reset-password/page.tsx:              {isLoading ? 'Resetting...' : 'Reset Password'}
./src/app/auth/reset-password/page.tsx:            </Button>
./src/app/auth/reset-password/page.tsx:          </form>
./src/app/auth/reset-password/page.tsx:        </div>
./src/app/auth/reset-password/page.tsx:      </div>
./src/app/auth/reset-password/page.tsx:    </div>
./src/app/auth/reset-password/page.tsx:  );
./src/app/auth/reset-password/page.tsx:} 
./src/app/auth/signin/page.tsx:import { SignIn } from '@/components/Auth/SignIn';
./src/app/auth/signin/page.tsx:
./src/app/auth/signin/page.tsx:export default function SignInPage() {
./src/app/auth/signin/page.tsx:  return <SignIn />;
./src/app/auth/signin/page.tsx:} 
./src/app/background-check/page.tsx:'use client'
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:import { useEffect, useState } from 'react';
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:import { motion } from 'framer-motion';
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:import { AssessmentList } from '@/components/AssessmentList';
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:export default function BackgroundCheck() {
./src/app/background-check/page.tsx:  const [dimensions, setDimensions] = useState({ width: 1200, height: 800 });
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:  useEffect(() => {
./src/app/background-check/page.tsx:    // Set initial dimensions
./src/app/background-check/page.tsx:    setDimensions({
./src/app/background-check/page.tsx:      width: window.innerWidth,
./src/app/background-check/page.tsx:      height: window.innerHeight
./src/app/background-check/page.tsx:    });
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:    // Debounced resize handler with touch device detection
./src/app/background-check/page.tsx:    let timeoutId: NodeJS.Timeout;
./src/app/background-check/page.tsx:    const handleResize = () => {
./src/app/background-check/page.tsx:      clearTimeout(timeoutId);
./src/app/background-check/page.tsx:      timeoutId = setTimeout(() => {
./src/app/background-check/page.tsx:        setDimensions({
./src/app/background-check/page.tsx:          width: window.innerWidth,
./src/app/background-check/page.tsx:          height: window.innerHeight
./src/app/background-check/page.tsx:        });
./src/app/background-check/page.tsx:      }, 100);
./src/app/background-check/page.tsx:    };
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:    window.addEventListener('resize', handleResize);
./src/app/background-check/page.tsx:    return () => {
./src/app/background-check/page.tsx:      window.removeEventListener('resize', handleResize);
./src/app/background-check/page.tsx:      clearTimeout(timeoutId);
./src/app/background-check/page.tsx:    };
./src/app/background-check/page.tsx:  }, []);
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:  // Reduce particle count on mobile
./src/app/background-check/page.tsx:  const particleCount = dimensions.width < 768 ? 4 : 8;
./src/app/background-check/page.tsx:  const particles = Array.from({ length: particleCount }).map(() => ({
./src/app/background-check/page.tsx:    initialX: Math.random() * dimensions.width,
./src/app/background-check/page.tsx:    initialY: Math.random() * dimensions.height,
./src/app/background-check/page.tsx:    scale: Math.random() * 0.3 + 0.2,
./src/app/background-check/page.tsx:    duration: Math.random() * 5 + 15
./src/app/background-check/page.tsx:  }));
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:  return (
./src/app/background-check/page.tsx:    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-800 relative overflow-hidden">
./src/app/background-check/page.tsx:      {/* Optimized background particles */}
./src/app/background-check/page.tsx:      <div className="absolute inset-0 overflow-hidden opacity-60">
./src/app/background-check/page.tsx:        {particles.map((particle, i) => (
./src/app/background-check/page.tsx:          <motion.div
./src/app/background-check/page.tsx:            key={i}
./src/app/background-check/page.tsx:            className="absolute w-[50px] md:w-[100px] h-[50px] md:h-[100px] rounded-full bg-white/5"
./src/app/background-check/page.tsx:            initial={{ x: particle.initialX, y: particle.initialY, scale: particle.scale }}
./src/app/background-check/page.tsx:            animate={{
./src/app/background-check/page.tsx:              x: [particle.initialX, particle.initialX + 50, particle.initialX],
./src/app/background-check/page.tsx:              y: [particle.initialY, particle.initialY + 50, particle.initialY],
./src/app/background-check/page.tsx:            }}
./src/app/background-check/page.tsx:            transition={{
./src/app/background-check/page.tsx:              duration: particle.duration,
./src/app/background-check/page.tsx:              repeat: Infinity,
./src/app/background-check/page.tsx:              ease: "linear",
./src/app/background-check/page.tsx:              times: [0, 0.5, 1]
./src/app/background-check/page.tsx:            }}
./src/app/background-check/page.tsx:            style={{ willChange: 'transform' }}
./src/app/background-check/page.tsx:          />
./src/app/background-check/page.tsx:        ))}
./src/app/background-check/page.tsx:      </div>
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:      {/* Main content */}
./src/app/background-check/page.tsx:      <div className="container mx-auto px-4 py-8 md:py-16 relative z-10">
./src/app/background-check/page.tsx:        <motion.div
./src/app/background-check/page.tsx:          initial={{ opacity: 0, y: 20 }}
./src/app/background-check/page.tsx:          animate={{ opacity: 1, y: 0 }}
./src/app/background-check/page.tsx:          transition={{ duration: 0.5 }}
./src/app/background-check/page.tsx:          className="max-w-7xl mx-auto"
./src/app/background-check/page.tsx:        >
./src/app/background-check/page.tsx:          {/* Glass panel */}
./src/app/background-check/page.tsx:          <div className="backdrop-blur-xl bg-white/10 rounded-2xl md:rounded-3xl p-6 md:p-12 shadow-2xl border border-white/20">
./src/app/background-check/page.tsx:            <motion.h1
./src/app/background-check/page.tsx:              initial={{ opacity: 0, y: 20 }}
./src/app/background-check/page.tsx:              animate={{ opacity: 1, y: 0 }}
./src/app/background-check/page.tsx:              transition={{ delay: 0.1, duration: 0.5 }}
./src/app/background-check/page.tsx:              className="text-3xl sm:text-4xl md:text-5xl font-bold text-white text-center mb-4 md:mb-6 bg-clip-text text-transparent bg-gradient-to-r from-blue-200 to-pink-200"
./src/app/background-check/page.tsx:            >
./src/app/background-check/page.tsx:              Background Check
./src/app/background-check/page.tsx:            </motion.h1>
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:            <motion.p
./src/app/background-check/page.tsx:              initial={{ opacity: 0, y: 20 }}
./src/app/background-check/page.tsx:              animate={{ opacity: 1, y: 0 }}
./src/app/background-check/page.tsx:              transition={{ delay: 0.2, duration: 0.5 }}
./src/app/background-check/page.tsx:              className="text-base sm:text-lg md:text-xl text-gray-300 text-center mb-8 md:mb-12 max-w-2xl mx-auto px-2"
./src/app/background-check/page.tsx:            >
./src/app/background-check/page.tsx:              Discover the truth about companies before making your next career move. 
./src/app/background-check/page.tsx:              Our comprehensive assessment framework helps you evaluate potential employers 
./src/app/background-check/page.tsx:              across multiple critical factors.
./src/app/background-check/page.tsx:            </motion.p>
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:            {/* Search box */}
./src/app/background-check/page.tsx:            <motion.div
./src/app/background-check/page.tsx:              initial={{ opacity: 0, y: 20 }}
./src/app/background-check/page.tsx:              animate={{ opacity: 1, y: 0 }}
./src/app/background-check/page.tsx:              transition={{ delay: 0.3, duration: 0.5 }}
./src/app/background-check/page.tsx:              className="max-w-2xl mx-auto mb-12"
./src/app/background-check/page.tsx:            >
./src/app/background-check/page.tsx:              <div className="relative group">
./src/app/background-check/page.tsx:                <input
./src/app/background-check/page.tsx:                  type="text"
./src/app/background-check/page.tsx:                  placeholder="Enter company name..."
./src/app/background-check/page.tsx:                  className="w-full px-4 sm:px-6 py-3 sm:py-4 rounded-xl sm:rounded-2xl bg-white/10 border border-white/20 
./src/app/background-check/page.tsx:                           backdrop-blur-lg text-white placeholder-gray-400 outline-none focus:ring-2 
./src/app/background-check/page.tsx:                           focus:ring-blue-400/50 transition-all duration-300 shadow-lg text-base sm:text-lg"
./src/app/background-check/page.tsx:                />
./src/app/background-check/page.tsx:                <button 
./src/app/background-check/page.tsx:                  className="absolute right-2 sm:right-3 top-1/2 -translate-y-1/2 px-4 sm:px-6 py-1.5 sm:py-2 
./src/app/background-check/page.tsx:                           rounded-lg sm:rounded-xl bg-gradient-to-r from-blue-500/80 to-purple-500/80 
./src/app/background-check/page.tsx:                           text-white font-medium text-sm sm:text-base hover:from-blue-500 hover:to-purple-500 
./src/app/background-check/page.tsx:                           transition-all duration-300 backdrop-blur-lg shadow-lg hover:shadow-xl 
./src/app/background-check/page.tsx:                           hover:scale-105 active:scale-95 touch-manipulation"
./src/app/background-check/page.tsx:                >
./src/app/background-check/page.tsx:                  Search
./src/app/background-check/page.tsx:                </button>
./src/app/background-check/page.tsx:              </div>
./src/app/background-check/page.tsx:            </motion.div>
./src/app/background-check/page.tsx:
./src/app/background-check/page.tsx:            {/* Assessment List */}
./src/app/background-check/page.tsx:            <AssessmentList />
./src/app/background-check/page.tsx:          </div>
./src/app/background-check/page.tsx:        </motion.div>
./src/app/background-check/page.tsx:      </div>
./src/app/background-check/page.tsx:    </div>
./src/app/background-check/page.tsx:  );
./src/app/background-check/page.tsx:}
./src/app/companies/page.tsx:'use client'
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:import { Suspense, useState } from 'react';
./src/app/companies/page.tsx:import dynamic from 'next/dynamic';
./src/app/companies/page.tsx:import { X } from 'lucide-react';
./src/app/companies/page.tsx:import { CompanyList } from '@/components/CompanyList';
./src/app/companies/page.tsx:import { CompanyForm } from '@/components/CompanyForm';
./src/app/companies/page.tsx:import { Button } from '@/components/ui/button';
./src/app/companies/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/companies/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/companies/page.tsx:import { useCompanies } from '@/hooks/useCompany';
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:// Lazy load SearchAndFilter with no SSR
./src/app/companies/page.tsx:const SearchAndFilter = dynamic(() => import('@/components/SearchAndFilter'), {
./src/app/companies/page.tsx:  ssr: false,
./src/app/companies/page.tsx:  loading: () => <SearchSkeleton />
./src/app/companies/page.tsx:});
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:// Loading fallbacks
./src/app/companies/page.tsx:function SearchSkeleton() {
./src/app/companies/page.tsx:  return (
./src/app/companies/page.tsx:    <div className="max-w-3xl mx-auto mb-8">
./src/app/companies/page.tsx:      <div className="animate-pulse">
./src/app/companies/page.tsx:        <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded-lg mb-4"></div>
./src/app/companies/page.tsx:        <div className="h-10 bg-gray-200 dark:bg-gray-700 rounded-lg w-3/4"></div>
./src/app/companies/page.tsx:      </div>
./src/app/companies/page.tsx:    </div>
./src/app/companies/page.tsx:  );
./src/app/companies/page.tsx:}
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:function CompanyListSkeleton() {
./src/app/companies/page.tsx:  return (
./src/app/companies/page.tsx:    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
./src/app/companies/page.tsx:      {[...Array(6)].map((_, i) => (
./src/app/companies/page.tsx:        <div key={i} className="animate-pulse">
./src/app/companies/page.tsx:          <div className="bg-gray-200 dark:bg-gray-700 h-48 rounded-lg mb-4"></div>
./src/app/companies/page.tsx:          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
./src/app/companies/page.tsx:          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
./src/app/companies/page.tsx:        </div>
./src/app/companies/page.tsx:      ))}
./src/app/companies/page.tsx:    </div>
./src/app/companies/page.tsx:  );
./src/app/companies/page.tsx:}
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:export default function CompaniesPage() {
./src/app/companies/page.tsx:  const [selectedLocation, setSelectedLocation] = useState('all');
./src/app/companies/page.tsx:  const [selectedIndustry, setSelectedIndustry] = useState('all');
./src/app/companies/page.tsx:  const [searchQuery, setSearchQuery] = useState('');
./src/app/companies/page.tsx:  const [showAddCompany, setShowAddCompany] = useState(false);
./src/app/companies/page.tsx:  
./src/app/companies/page.tsx:  const { companies, loading, error } = useCompanies({
./src/app/companies/page.tsx:    industry: selectedIndustry !== 'all' ? selectedIndustry : undefined,
./src/app/companies/page.tsx:    location: selectedLocation !== 'all' ? selectedLocation : undefined,
./src/app/companies/page.tsx:    search: searchQuery || undefined
./src/app/companies/page.tsx:  });
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:  return (
./src/app/companies/page.tsx:    <main className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-950 dark:via-gray-900 dark:to-gray-950 page-transition">
./src/app/companies/page.tsx:      <div className="container mx-auto px-6 lg:px-8 py-12">
./src/app/companies/page.tsx:        <div className="flex justify-between items-center mb-12">
./src/app/companies/page.tsx:          <h1 className="text-4xl font-bold text-gray-900 dark:text-gray-100">Companies</h1>
./src/app/companies/page.tsx:          <Button
./src/app/companies/page.tsx:            onClick={() => setShowAddCompany(true)}
./src/app/companies/page.tsx:            className="inline-flex items-center px-6 py-3 text-base font-medium text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 rounded-xl shadow-sm transition-colors"
./src/app/companies/page.tsx:          >
./src/app/companies/page.tsx:            Add Company
./src/app/companies/page.tsx:          </Button>
./src/app/companies/page.tsx:        </div>
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:        <SearchAndFilter
./src/app/companies/page.tsx:          onLocationChange={setSelectedLocation}
./src/app/companies/page.tsx:          onIndustryChange={setSelectedIndustry}
./src/app/companies/page.tsx:          onSearch={setSearchQuery}
./src/app/companies/page.tsx:          selectedLocation={selectedLocation}
./src/app/companies/page.tsx:          selectedIndustry={selectedIndustry}
./src/app/companies/page.tsx:        />
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:        <div className="mt-12">
./src/app/companies/page.tsx:          <Suspense fallback={<CompanyListSkeleton />}>
./src/app/companies/page.tsx:            {loading ? (
./src/app/companies/page.tsx:              <LoadingSpinner />
./src/app/companies/page.tsx:            ) : error ? (
./src/app/companies/page.tsx:              <div className="text-red-500">Error loading companies: {error}</div>
./src/app/companies/page.tsx:            ) : (
./src/app/companies/page.tsx:              <CompanyList
./src/app/companies/page.tsx:                companies={companies || []}
./src/app/companies/page.tsx:                selectedLocation={selectedLocation}
./src/app/companies/page.tsx:                selectedIndustry={selectedIndustry}
./src/app/companies/page.tsx:                searchQuery={searchQuery}
./src/app/companies/page.tsx:              />
./src/app/companies/page.tsx:            )}
./src/app/companies/page.tsx:          </Suspense>
./src/app/companies/page.tsx:        </div>
./src/app/companies/page.tsx:      </div>
./src/app/companies/page.tsx:
./src/app/companies/page.tsx:      {/* Add Company Modal */}
./src/app/companies/page.tsx:      {showAddCompany && (
./src/app/companies/page.tsx:        <div className="fixed inset-0 overflow-hidden z-50">
./src/app/companies/page.tsx:          <div className="absolute inset-0 overflow-hidden">
./src/app/companies/page.tsx:            <div className="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity dialog-backdrop" />
./src/app/companies/page.tsx:            <div className="fixed inset-y-0 right-0 pl-10 max-w-full flex">
./src/app/companies/page.tsx:              <div className="relative w-screen max-w-md dialog-content">
./src/app/companies/page.tsx:                <div className="h-full flex flex-col bg-white dark:bg-gray-900 shadow-xl">
./src/app/companies/page.tsx:                  <div className="flex-1 h-0 overflow-y-auto">
./src/app/companies/page.tsx:                    <div className="py-6 px-4 sm:px-6">
./src/app/companies/page.tsx:                      <div className="flex items-start justify-between">
./src/app/companies/page.tsx:                        <h2 className="text-lg font-medium text-gray-900 dark:text-white">
./src/app/companies/page.tsx:                          Add New Company
./src/app/companies/page.tsx:                        </h2>
./src/app/companies/page.tsx:                        <Button
./src/app/companies/page.tsx:                          variant="ghost"
./src/app/companies/page.tsx:                          size="icon"
./src/app/companies/page.tsx:                          onClick={() => setShowAddCompany(false)}
./src/app/companies/page.tsx:                        >
./src/app/companies/page.tsx:                          <X className="h-6 w-6" />
./src/app/companies/page.tsx:                        </Button>
./src/app/companies/page.tsx:                      </div>
./src/app/companies/page.tsx:                      <CompanyForm onSuccess={() => setShowAddCompany(false)} />
./src/app/companies/page.tsx:                    </div>
./src/app/companies/page.tsx:                  </div>
./src/app/companies/page.tsx:                </div>
./src/app/companies/page.tsx:              </div>
./src/app/companies/page.tsx:            </div>
./src/app/companies/page.tsx:          </div>
./src/app/companies/page.tsx:        </div>
./src/app/companies/page.tsx:      )}
./src/app/companies/page.tsx:    </main>
./src/app/companies/page.tsx:  );
./src/app/companies/page.tsx:}
./src/app/companies/[id]/edit/page.tsx:'use client'
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:import { useState, useEffect } from 'react';
./src/app/companies/[id]/edit/page.tsx:import { useParams, useRouter } from 'next/navigation';
./src/app/companies/[id]/edit/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/companies/[id]/edit/page.tsx:import { ErrorDisplay } from "@/components/ErrorDisplay";
./src/app/companies/[id]/edit/page.tsx:import type { Database } from '@/types/supabase';
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:type Company = Database['public']['Tables']['companies']['Row'] & {
./src/app/companies/[id]/edit/page.tsx:  metadata?: {
./src/app/companies/[id]/edit/page.tsx:    ceo?: string;
./src/app/companies/[id]/edit/page.tsx:    // Add other metadata fields as needed
./src/app/companies/[id]/edit/page.tsx:  };
./src/app/companies/[id]/edit/page.tsx:};
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:export const dynamic = 'force-dynamic';
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:export default function EditCompany() {
./src/app/companies/[id]/edit/page.tsx:  const params = useParams();
./src/app/companies/[id]/edit/page.tsx:  const router = useRouter();
./src/app/companies/[id]/edit/page.tsx:  const [company, setCompany] = useState<Company | null>(null);
./src/app/companies/[id]/edit/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/companies/[id]/edit/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/companies/[id]/edit/page.tsx:  const [isSubmitting, setIsSubmitting] = useState(false);
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  const [formData, setFormData] = useState({
./src/app/companies/[id]/edit/page.tsx:    name: '',
./src/app/companies/[id]/edit/page.tsx:    industry: '',
./src/app/companies/[id]/edit/page.tsx:    description: '',
./src/app/companies/[id]/edit/page.tsx:    location: '',
./src/app/companies/[id]/edit/page.tsx:    website: '',
./src/app/companies/[id]/edit/page.tsx:    metadata: {
./src/app/companies/[id]/edit/page.tsx:      ceo: '',
./src/app/companies/[id]/edit/page.tsx:      // other metadata fields
./src/app/companies/[id]/edit/page.tsx:    }
./src/app/companies/[id]/edit/page.tsx:  });
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  useEffect(() => {
./src/app/companies/[id]/edit/page.tsx:    const id = params?.id;
./src/app/companies/[id]/edit/page.tsx:    if (id && typeof id === 'string') {
./src/app/companies/[id]/edit/page.tsx:      fetchCompany(id);
./src/app/companies/[id]/edit/page.tsx:    }
./src/app/companies/[id]/edit/page.tsx:  }, [params?.id]);
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  const fetchCompany = async (id: string) => {
./src/app/companies/[id]/edit/page.tsx:    try {
./src/app/companies/[id]/edit/page.tsx:      const { data, error } = await supabase.from('companies').select('*').eq('id', id).single();
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:      if (error) throw error;
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:      if (data) {
./src/app/companies/[id]/edit/page.tsx:        setCompany(data);
./src/app/companies/[id]/edit/page.tsx:        setFormData({
./src/app/companies/[id]/edit/page.tsx:          name: data.name || '',
./src/app/companies/[id]/edit/page.tsx:          industry: data.industry || '',
./src/app/companies/[id]/edit/page.tsx:          description: data.description || '',
./src/app/companies/[id]/edit/page.tsx:          location: data.location || '',
./src/app/companies/[id]/edit/page.tsx:          website: data.website || '',
./src/app/companies/[id]/edit/page.tsx:          metadata: data.metadata || { ceo: '' }
./src/app/companies/[id]/edit/page.tsx:        });
./src/app/companies/[id]/edit/page.tsx:      }
./src/app/companies/[id]/edit/page.tsx:    } catch (err) {
./src/app/companies/[id]/edit/page.tsx:      setError(err instanceof Error ? err.message : 'Failed to fetch company');
./src/app/companies/[id]/edit/page.tsx:    } finally {
./src/app/companies/[id]/edit/page.tsx:      setLoading(false);
./src/app/companies/[id]/edit/page.tsx:    }
./src/app/companies/[id]/edit/page.tsx:  };
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  const handleSubmit = async (e: React.FormEvent) => {
./src/app/companies/[id]/edit/page.tsx:    e.preventDefault();
./src/app/companies/[id]/edit/page.tsx:    const id = params?.id;
./src/app/companies/[id]/edit/page.tsx:    if (!id || typeof id !== 'string') return;
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:    setIsSubmitting(true);
./src/app/companies/[id]/edit/page.tsx:    setError(null);
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:    try {
./src/app/companies/[id]/edit/page.tsx:      const { error } = await supabase
./src/app/companies/[id]/edit/page.tsx:        .from('companies')
./src/app/companies/[id]/edit/page.tsx:        .update(formData)
./src/app/companies/[id]/edit/page.tsx:        .eq('id', id);
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:      if (error) throw error;
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:      router.push(`/companies/${id}`);
./src/app/companies/[id]/edit/page.tsx:    } catch (err) {
./src/app/companies/[id]/edit/page.tsx:      setError(err instanceof Error ? err.message : 'Failed to update company');
./src/app/companies/[id]/edit/page.tsx:      setIsSubmitting(false);
./src/app/companies/[id]/edit/page.tsx:    }
./src/app/companies/[id]/edit/page.tsx:  };
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
./src/app/companies/[id]/edit/page.tsx:    const { name, value } = e.target;
./src/app/companies/[id]/edit/page.tsx:    setFormData(prev => ({ ...prev, [name]: value }));
./src/app/companies/[id]/edit/page.tsx:  };
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  if (!params?.id) return <div>Invalid company ID</div>;
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  if (loading) {
./src/app/companies/[id]/edit/page.tsx:    return <div>Loading...</div>;
./src/app/companies/[id]/edit/page.tsx:  }
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  if (error) {
./src/app/companies/[id]/edit/page.tsx:    return <ErrorDisplay message={error} />;
./src/app/companies/[id]/edit/page.tsx:  }
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:  return (
./src/app/companies/[id]/edit/page.tsx:    <div className="max-w-4xl mx-auto p-6">
./src/app/companies/[id]/edit/page.tsx:      <h1 className="text-2xl font-bold mb-6">Edit Company</h1>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:      <form onSubmit={handleSubmit} className="space-y-6">
./src/app/companies/[id]/edit/page.tsx:        <div>
./src/app/companies/[id]/edit/page.tsx:          <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/app/companies/[id]/edit/page.tsx:            Company Name
./src/app/companies/[id]/edit/page.tsx:          </label>
./src/app/companies/[id]/edit/page.tsx:          <input
./src/app/companies/[id]/edit/page.tsx:            type="text"
./src/app/companies/[id]/edit/page.tsx:            id="name"
./src/app/companies/[id]/edit/page.tsx:            name="name"
./src/app/companies/[id]/edit/page.tsx:            value={formData.name}
./src/app/companies/[id]/edit/page.tsx:            onChange={handleInputChange}
./src/app/companies/[id]/edit/page.tsx:            required
./src/app/companies/[id]/edit/page.tsx:            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-600"
./src/app/companies/[id]/edit/page.tsx:          />
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:        <div>
./src/app/companies/[id]/edit/page.tsx:          <label htmlFor="industry" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/app/companies/[id]/edit/page.tsx:            Industry
./src/app/companies/[id]/edit/page.tsx:          </label>
./src/app/companies/[id]/edit/page.tsx:          <input
./src/app/companies/[id]/edit/page.tsx:            type="text"
./src/app/companies/[id]/edit/page.tsx:            id="industry"
./src/app/companies/[id]/edit/page.tsx:            name="industry"
./src/app/companies/[id]/edit/page.tsx:            value={formData.industry}
./src/app/companies/[id]/edit/page.tsx:            onChange={handleInputChange}
./src/app/companies/[id]/edit/page.tsx:            required
./src/app/companies/[id]/edit/page.tsx:            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-600"
./src/app/companies/[id]/edit/page.tsx:          />
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:        <div>
./src/app/companies/[id]/edit/page.tsx:          <label htmlFor="description" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/app/companies/[id]/edit/page.tsx:            Description
./src/app/companies/[id]/edit/page.tsx:          </label>
./src/app/companies/[id]/edit/page.tsx:          <textarea
./src/app/companies/[id]/edit/page.tsx:            id="description"
./src/app/companies/[id]/edit/page.tsx:            name="description"
./src/app/companies/[id]/edit/page.tsx:            value={formData.description}
./src/app/companies/[id]/edit/page.tsx:            onChange={handleInputChange}
./src/app/companies/[id]/edit/page.tsx:            rows={4}
./src/app/companies/[id]/edit/page.tsx:            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-600"
./src/app/companies/[id]/edit/page.tsx:          />
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:        <div>
./src/app/companies/[id]/edit/page.tsx:          <label htmlFor="location" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/app/companies/[id]/edit/page.tsx:            Location
./src/app/companies/[id]/edit/page.tsx:          </label>
./src/app/companies/[id]/edit/page.tsx:          <input
./src/app/companies/[id]/edit/page.tsx:            type="text"
./src/app/companies/[id]/edit/page.tsx:            id="location"
./src/app/companies/[id]/edit/page.tsx:            name="location"
./src/app/companies/[id]/edit/page.tsx:            value={formData.location}
./src/app/companies/[id]/edit/page.tsx:            onChange={handleInputChange}
./src/app/companies/[id]/edit/page.tsx:            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-600"
./src/app/companies/[id]/edit/page.tsx:          />
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:        <div>
./src/app/companies/[id]/edit/page.tsx:          <label htmlFor="website" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/app/companies/[id]/edit/page.tsx:            Website
./src/app/companies/[id]/edit/page.tsx:          </label>
./src/app/companies/[id]/edit/page.tsx:          <input
./src/app/companies/[id]/edit/page.tsx:            type="url"
./src/app/companies/[id]/edit/page.tsx:            id="website"
./src/app/companies/[id]/edit/page.tsx:            name="website"
./src/app/companies/[id]/edit/page.tsx:            value={formData.website}
./src/app/companies/[id]/edit/page.tsx:            onChange={handleInputChange}
./src/app/companies/[id]/edit/page.tsx:            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:bg-gray-800 dark:border-gray-600"
./src/app/companies/[id]/edit/page.tsx:          />
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:
./src/app/companies/[id]/edit/page.tsx:        <div className="flex justify-end space-x-4">
./src/app/companies/[id]/edit/page.tsx:          <button
./src/app/companies/[id]/edit/page.tsx:            type="button"
./src/app/companies/[id]/edit/page.tsx:            onClick={() => router.back()}
./src/app/companies/[id]/edit/page.tsx:            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700"
./src/app/companies/[id]/edit/page.tsx:          >
./src/app/companies/[id]/edit/page.tsx:            Cancel
./src/app/companies/[id]/edit/page.tsx:          </button>
./src/app/companies/[id]/edit/page.tsx:          <button
./src/app/companies/[id]/edit/page.tsx:            type="submit"
./src/app/companies/[id]/edit/page.tsx:            disabled={isSubmitting}
./src/app/companies/[id]/edit/page.tsx:            className="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
./src/app/companies/[id]/edit/page.tsx:          >
./src/app/companies/[id]/edit/page.tsx:            {isSubmitting ? 'Saving...' : 'Save Changes'}
./src/app/companies/[id]/edit/page.tsx:          </button>
./src/app/companies/[id]/edit/page.tsx:        </div>
./src/app/companies/[id]/edit/page.tsx:      </form>
./src/app/companies/[id]/edit/page.tsx:    </div>
./src/app/companies/[id]/edit/page.tsx:  );
./src/app/companies/[id]/edit/page.tsx:}
./src/app/companies/[id]/page.tsx:'use client'
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:import { useState } from 'react';
./src/app/companies/[id]/page.tsx:import { useParams } from 'next/navigation';
./src/app/companies/[id]/page.tsx:import { useCompany } from '@/hooks/useCompany';
./src/app/companies/[id]/page.tsx:import { CompanyNews } from '@/components/CompanyNews';
./src/app/companies/[id]/page.tsx:import { ReviewList } from '@/components/ReviewList';
./src/app/companies/[id]/page.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/app/companies/[id]/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/companies/[id]/page.tsx:import { ErrorDisplay } from '@/components/ErrorDisplay';
./src/app/companies/[id]/page.tsx:import { Button } from '@/components/ui/button';
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:// app/companies/[id]/page.tsx
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:export default function CompanyPage() {
./src/app/companies/[id]/page.tsx:  const { id } = useParams() as { id: string };
./src/app/companies/[id]/page.tsx:  const { company, loading, error } = useCompany(id);
./src/app/companies/[id]/page.tsx:  const [showReviewForm, setShowReviewForm] = useState(false);
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:  if (loading) {
./src/app/companies/[id]/page.tsx:    return (
./src/app/companies/[id]/page.tsx:      <div className="min-h-screen flex items-center justify-center">
./src/app/companies/[id]/page.tsx:        <LoadingSpinner size="lg" />
./src/app/companies/[id]/page.tsx:      </div>
./src/app/companies/[id]/page.tsx:    );
./src/app/companies/[id]/page.tsx:  }
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:  if (error) {
./src/app/companies/[id]/page.tsx:    return <ErrorDisplay message={error} />;
./src/app/companies/[id]/page.tsx:  }
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:  if (!company) {
./src/app/companies/[id]/page.tsx:    return <ErrorDisplay message="Company not found" />;
./src/app/companies/[id]/page.tsx:  }
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:  return (
./src/app/companies/[id]/page.tsx:    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 p-8">
./src/app/companies/[id]/page.tsx:      <div className="max-w-6xl mx-auto">
./src/app/companies/[id]/page.tsx:        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 mb-8">
./src/app/companies/[id]/page.tsx:          <div className="flex justify-between items-start mb-6">
./src/app/companies/[id]/page.tsx:            <div>
./src/app/companies/[id]/page.tsx:              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
./src/app/companies/[id]/page.tsx:                {company.name}
./src/app/companies/[id]/page.tsx:              </h1>
./src/app/companies/[id]/page.tsx:              <div className="flex items-center text-gray-600 dark:text-gray-400 space-x-4">
./src/app/companies/[id]/page.tsx:                <span>{company.industry}</span>
./src/app/companies/[id]/page.tsx:                {company.location && (
./src/app/companies/[id]/page.tsx:                  <>
./src/app/companies/[id]/page.tsx:                    <span>•</span>
./src/app/companies/[id]/page.tsx:                    <span>{company.location}</span>
./src/app/companies/[id]/page.tsx:                  </>
./src/app/companies/[id]/page.tsx:                )}
./src/app/companies/[id]/page.tsx:              </div>
./src/app/companies/[id]/page.tsx:            </div>
./src/app/companies/[id]/page.tsx:            <Button
./src/app/companies/[id]/page.tsx:              onClick={() => setShowReviewForm(!showReviewForm)}
./src/app/companies/[id]/page.tsx:              className="bg-blue-600 hover:bg-blue-700 text-white"
./src/app/companies/[id]/page.tsx:            >
./src/app/companies/[id]/page.tsx:              {showReviewForm ? 'Cancel Review' : 'Write a Review'}
./src/app/companies/[id]/page.tsx:            </Button>
./src/app/companies/[id]/page.tsx:          </div>
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:          {company.description && (
./src/app/companies/[id]/page.tsx:            <p className="text-gray-700 dark:text-gray-300 mb-6">
./src/app/companies/[id]/page.tsx:              {company.description}
./src/app/companies/[id]/page.tsx:            </p>
./src/app/companies/[id]/page.tsx:          )}
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
./src/app/companies/[id]/page.tsx:            <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
./src/app/companies/[id]/page.tsx:              <h3 className="text-lg font-semibold text-gray-700 dark:text-gray-300 mb-2">
./src/app/companies/[id]/page.tsx:                Overall Rating
./src/app/companies/[id]/page.tsx:              </h3>
./src/app/companies/[id]/page.tsx:              <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
./src/app/companies/[id]/page.tsx:                {company.average_rating?.toFixed(1) || 'N/A'}
./src/app/companies/[id]/page.tsx:              </div>
./src/app/companies/[id]/page.tsx:              <p className="text-gray-600 dark:text-gray-400">
./src/app/companies/[id]/page.tsx:                Based on {company.total_reviews || 0} reviews
./src/app/companies/[id]/page.tsx:              </p>
./src/app/companies/[id]/page.tsx:            </div>
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:            {company.website && (
./src/app/companies/[id]/page.tsx:              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
./src/app/companies/[id]/page.tsx:                <h3 className="text-lg font-semibold mb-2 text-gray-900 dark:text-white">
./src/app/companies/[id]/page.tsx:                  Website
./src/app/companies/[id]/page.tsx:                </h3>
./src/app/companies/[id]/page.tsx:                <a
./src/app/companies/[id]/page.tsx:                  href={company.website}
./src/app/companies/[id]/page.tsx:                  target="_blank"
./src/app/companies/[id]/page.tsx:                  rel="noopener noreferrer"
./src/app/companies/[id]/page.tsx:                  className="text-blue-600 dark:text-blue-400 hover:underline"
./src/app/companies/[id]/page.tsx:                >
./src/app/companies/[id]/page.tsx:                  {company.website}
./src/app/companies/[id]/page.tsx:                </a>
./src/app/companies/[id]/page.tsx:              </div>
./src/app/companies/[id]/page.tsx:            )}
./src/app/companies/[id]/page.tsx:          </div>
./src/app/companies/[id]/page.tsx:        </div>
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:        {showReviewForm && (
./src/app/companies/[id]/page.tsx:          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 mb-8">
./src/app/companies/[id]/page.tsx:            <h2 className="text-2xl font-bold mb-6">Write a Review</h2>
./src/app/companies/[id]/page.tsx:            <ReviewForm
./src/app/companies/[id]/page.tsx:              companyId={company.id}
./src/app/companies/[id]/page.tsx:              onSuccess={() => setShowReviewForm(false)}
./src/app/companies/[id]/page.tsx:            />
./src/app/companies/[id]/page.tsx:          </div>
./src/app/companies/[id]/page.tsx:        )}
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
./src/app/companies/[id]/page.tsx:          <div className="lg:col-span-2">
./src/app/companies/[id]/page.tsx:            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
./src/app/companies/[id]/page.tsx:              <h2 className="text-2xl font-bold mb-6">Reviews</h2>
./src/app/companies/[id]/page.tsx:              {company.id && <ReviewList companyId={company.id.toString()} />}
./src/app/companies/[id]/page.tsx:            </div>
./src/app/companies/[id]/page.tsx:          </div>
./src/app/companies/[id]/page.tsx:
./src/app/companies/[id]/page.tsx:          <div>
./src/app/companies/[id]/page.tsx:            <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
./src/app/companies/[id]/page.tsx:              <h2 className="text-2xl font-bold mb-6">Recent News</h2>
./src/app/companies/[id]/page.tsx:              <CompanyNews companyName={company.name} />
./src/app/companies/[id]/page.tsx:            </div>
./src/app/companies/[id]/page.tsx:          </div>
./src/app/companies/[id]/page.tsx:        </div>
./src/app/companies/[id]/page.tsx:      </div>
./src/app/companies/[id]/page.tsx:    </div>
./src/app/companies/[id]/page.tsx:  );
./src/app/companies/[id]/page.tsx:}
./src/app/fame/page.tsx:'use client'
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:import { useEffect, useState, useCallback } from 'react';
./src/app/fame/page.tsx:import { motion } from 'framer-motion';
./src/app/fame/page.tsx:import { fetchCompanyNews, type MarketauxArticle } from '@/lib/marketauxApi';
./src/app/fame/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/fame/page.tsx:import { Database } from '@/types/supabase';
./src/app/fame/page.tsx:import type { Company, Review } from '@/types/database';
./src/app/fame/page.tsx:import { ErrorBoundary } from 'react-error-boundary';
./src/app/fame/page.tsx:import { Suspense } from 'react';
./src/app/fame/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:interface CompanyWithStats {
./src/app/fame/page.tsx:  id: number;
./src/app/fame/page.tsx:  name: string;
./src/app/fame/page.tsx:  industry: string | null;
./src/app/fame/page.tsx:  location: string | null;
./src/app/fame/page.tsx:  website: string | null;
./src/app/fame/page.tsx:  description: string | null;
./src/app/fame/page.tsx:  logo_url: string | null;
./src/app/fame/page.tsx:  verification_status: string | null;
./src/app/fame/page.tsx:  verified: boolean | null;
./src/app/fame/page.tsx:  created_by: string | null;
./src/app/fame/page.tsx:  created_at: string | null;
./src/app/fame/page.tsx:  updated_at: string | null;
./src/app/fame/page.tsx:  average_rating: number;
./src/app/fame/page.tsx:  total_reviews: number;
./src/app/fame/page.tsx:  reviews: Array<{
./src/app/fame/page.tsx:    id: number;
./src/app/fame/page.tsx:    rating: number | null;
./src/app/fame/page.tsx:    status: string | null;
./src/app/fame/page.tsx:  }>;
./src/app/fame/page.tsx:}
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:function FameErrorFallback({ error }: { error: Error }) {
./src/app/fame/page.tsx:  return (
./src/app/fame/page.tsx:    <div className="p-8 bg-red-50 rounded-lg">
./src/app/fame/page.tsx:      <h2 className="text-red-600">Companies load error: {error.message}</h2>
./src/app/fame/page.tsx:    </div>
./src/app/fame/page.tsx:  );
./src/app/fame/page.tsx:}
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:export default function WallOfFame() {
./src/app/fame/page.tsx:  const [companies, setCompanies] = useState<CompanyWithStats[]>([]);
./src/app/fame/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/fame/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/fame/page.tsx:  const [companyNews, setCompanyNews] = useState<Record<string, MarketauxArticle[]>>({});
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  const fetchTopCompanies = useCallback(async () => {
./src/app/fame/page.tsx:    try {
./src/app/fame/page.tsx:      console.log('Starting companies fetch...');
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      // First, test a simple query
./src/app/fame/page.tsx:      const { data: testData, error: testError } = await supabase
./src/app/fame/page.tsx:        .from('companies')
./src/app/fame/page.tsx:        .select('id, name')
./src/app/fame/page.tsx:        .limit(1);
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      console.log('Test query result:', { testData, testError });
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      if (testError) {
./src/app/fame/page.tsx:        console.error('Test query error:', {
./src/app/fame/page.tsx:          code: testError.code,
./src/app/fame/page.tsx:          message: testError.message,
./src/app/fame/page.tsx:          details: testError.details
./src/app/fame/page.tsx:        });
./src/app/fame/page.tsx:        throw testError;
./src/app/fame/page.tsx:      }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      // If test succeeds, try the full query
./src/app/fame/page.tsx:      const { data: companiesData, error: companiesError } = await supabase
./src/app/fame/page.tsx:        .from('companies')
./src/app/fame/page.tsx:        .select(`
./src/app/fame/page.tsx:          id,
./src/app/fame/page.tsx:          name,
./src/app/fame/page.tsx:          created_at,
./src/app/fame/page.tsx:          updated_at,
./src/app/fame/page.tsx:          industry,
./src/app/fame/page.tsx:          location,
./src/app/fame/page.tsx:          website,
./src/app/fame/page.tsx:          description,
./src/app/fame/page.tsx:          logo_url,
./src/app/fame/page.tsx:          verification_status,
./src/app/fame/page.tsx:          verified,
./src/app/fame/page.tsx:          created_by,
./src/app/fame/page.tsx:          reviews (
./src/app/fame/page.tsx:            id,
./src/app/fame/page.tsx:            rating,
./src/app/fame/page.tsx:            status
./src/app/fame/page.tsx:          )
./src/app/fame/page.tsx:        `)
./src/app/fame/page.tsx:        .eq('reviews.status', 'approved');
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      console.log('Full query response:', { companiesData, companiesError });
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      if (companiesError) {
./src/app/fame/page.tsx:        console.error('Full query error:', {
./src/app/fame/page.tsx:          code: companiesError.code,
./src/app/fame/page.tsx:          message: companiesError.message,
./src/app/fame/page.tsx:          details: companiesError.details
./src/app/fame/page.tsx:        });
./src/app/fame/page.tsx:        throw companiesError;
./src/app/fame/page.tsx:      }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      if (!companiesData) {
./src/app/fame/page.tsx:        console.log('No companies found');
./src/app/fame/page.tsx:        setCompanies([]);
./src/app/fame/page.tsx:        return;
./src/app/fame/page.tsx:      }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      // Process companies...
./src/app/fame/page.tsx:      const processedCompanies: CompanyWithStats[] = companiesData.map(company => {
./src/app/fame/page.tsx:        const approvedReviews = (company.reviews || []).filter(r => r.status === 'approved');
./src/app/fame/page.tsx:        const totalReviews = approvedReviews.length;
./src/app/fame/page.tsx:        const averageRating = totalReviews > 0
./src/app/fame/page.tsx:          ? approvedReviews.reduce((sum, review) => sum + (Number(review.rating) || 0), 0) / totalReviews
./src/app/fame/page.tsx:          : 0;
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:        return {
./src/app/fame/page.tsx:          id: company.id,
./src/app/fame/page.tsx:          name: company.name,
./src/app/fame/page.tsx:          industry: company.industry,
./src/app/fame/page.tsx:          location: company.location,
./src/app/fame/page.tsx:          website: company.website,
./src/app/fame/page.tsx:          description: company.description,
./src/app/fame/page.tsx:          logo_url: company.logo_url,
./src/app/fame/page.tsx:          verification_status: company.verification_status,
./src/app/fame/page.tsx:          verified: company.verified,
./src/app/fame/page.tsx:          created_by: company.created_by,
./src/app/fame/page.tsx:          created_at: company.created_at,
./src/app/fame/page.tsx:          updated_at: company.updated_at,
./src/app/fame/page.tsx:          average_rating: averageRating,
./src/app/fame/page.tsx:          total_reviews: totalReviews,
./src/app/fame/page.tsx:          reviews: approvedReviews.map(review => ({
./src/app/fame/page.tsx:            id: review.id,
./src/app/fame/page.tsx:            rating: review.rating,
./src/app/fame/page.tsx:            status: review.status
./src/app/fame/page.tsx:          }))
./src/app/fame/page.tsx:        };
./src/app/fame/page.tsx:      })
./src/app/fame/page.tsx:      .filter(company => company.total_reviews > 0 && company.average_rating > 4.0)
./src/app/fame/page.tsx:      .sort((a, b) => b.average_rating - a.average_rating)
./src/app/fame/page.tsx:      .slice(0, 10);
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      console.log('Processed companies:', processedCompanies.map(c => ({
./src/app/fame/page.tsx:        name: c.name,
./src/app/fame/page.tsx:        avgRating: c.average_rating.toFixed(1),
./src/app/fame/page.tsx:        totalReviews: c.total_reviews
./src/app/fame/page.tsx:      })));
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:      setCompanies(processedCompanies);
./src/app/fame/page.tsx:      
./src/app/fame/page.tsx:      if (processedCompanies.length > 0) {
./src/app/fame/page.tsx:        fetchNewsForTopCompanies(processedCompanies);
./src/app/fame/page.tsx:      }
./src/app/fame/page.tsx:    } catch (err) {
./src/app/fame/page.tsx:      console.error('Error in fetchTopCompanies:', err);
./src/app/fame/page.tsx:      setError('Failed to fetch top companies');
./src/app/fame/page.tsx:    } finally {
./src/app/fame/page.tsx:      setLoading(false);
./src/app/fame/page.tsx:    }
./src/app/fame/page.tsx:  }, []);
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  useEffect(() => {
./src/app/fame/page.tsx:    fetchTopCompanies();
./src/app/fame/page.tsx:  }, [fetchTopCompanies]);
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  const fetchNewsForTopCompanies = async (companies: CompanyWithStats[]) => {
./src/app/fame/page.tsx:    const newsData: Record<string, MarketauxArticle[]> = {};
./src/app/fame/page.tsx:    for (const company of companies) {
./src/app/fame/page.tsx:      try {
./src/app/fame/page.tsx:        const articles = await fetchCompanyNews(company.name);
./src/app/fame/page.tsx:        if (articles.length > 0) {
./src/app/fame/page.tsx:          newsData[company.name] = articles;
./src/app/fame/page.tsx:        }
./src/app/fame/page.tsx:      } catch (err) {
./src/app/fame/page.tsx:        console.error(`Error fetching news for ${company.name}:`, err);
./src/app/fame/page.tsx:        newsData[company.name] = [];
./src/app/fame/page.tsx:      }
./src/app/fame/page.tsx:    }
./src/app/fame/page.tsx:    setCompanyNews(newsData);
./src/app/fame/page.tsx:  };
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  if (loading) {
./src/app/fame/page.tsx:    return (
./src/app/fame/page.tsx:      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-8">
./src/app/fame/page.tsx:        <div className="max-w-6xl mx-auto">
./src/app/fame/page.tsx:          <h1 className="text-4xl font-bold text-blue-800 mb-8">Wall of Fame</h1>
./src/app/fame/page.tsx:          <div className="space-y-8">
./src/app/fame/page.tsx:            <div className="h-32 bg-white/50 rounded-lg animate-pulse"></div>
./src/app/fame/page.tsx:            <div className="h-32 bg-white/50 rounded-lg animate-pulse"></div>
./src/app/fame/page.tsx:          </div>
./src/app/fame/page.tsx:        </div>
./src/app/fame/page.tsx:      </div>
./src/app/fame/page.tsx:    );
./src/app/fame/page.tsx:  }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  if (error) {
./src/app/fame/page.tsx:    return (
./src/app/fame/page.tsx:      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-8">
./src/app/fame/page.tsx:        <div className="max-w-6xl mx-auto">
./src/app/fame/page.tsx:          <h1 className="text-4xl font-bold text-blue-800 mb-8">Wall of Fame</h1>
./src/app/fame/page.tsx:          <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-red-700">
./src/app/fame/page.tsx:            {error}
./src/app/fame/page.tsx:          </div>
./src/app/fame/page.tsx:        </div>
./src/app/fame/page.tsx:      </div>
./src/app/fame/page.tsx:    );
./src/app/fame/page.tsx:  }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  if (companies.length === 0) {
./src/app/fame/page.tsx:    return (
./src/app/fame/page.tsx:      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-8">
./src/app/fame/page.tsx:        <div className="max-w-6xl mx-auto">
./src/app/fame/page.tsx:          <h1 className="text-4xl font-bold text-blue-800 mb-8">Wall of Fame</h1>
./src/app/fame/page.tsx:          <div className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg p-6">
./src/app/fame/page.tsx:            <div className="text-center py-8">
./src/app/fame/page.tsx:              <h2 className="text-xl font-semibold text-blue-900 mb-2">No Top-Rated Companies Yet</h2>
./src/app/fame/page.tsx:              <p className="text-blue-700">
./src/app/fame/page.tsx:                Companies with an average rating above 4.0 stars will be featured here.
./src/app/fame/page.tsx:              </p>
./src/app/fame/page.tsx:            </div>
./src/app/fame/page.tsx:          </div>
./src/app/fame/page.tsx:        </div>
./src/app/fame/page.tsx:      </div>
./src/app/fame/page.tsx:    );
./src/app/fame/page.tsx:  }
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:  return (
./src/app/fame/page.tsx:    <ErrorBoundary FallbackComponent={FameErrorFallback}>
./src/app/fame/page.tsx:      <Suspense fallback={<LoadingSpinner />}>
./src/app/fame/page.tsx:        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 p-8">
./src/app/fame/page.tsx:          <div className="max-w-6xl mx-auto">
./src/app/fame/page.tsx:            <h1 className="text-4xl font-bold text-blue-800 mb-8">Wall of Fame</h1>
./src/app/fame/page.tsx:            <p className="text-lg text-blue-700 mb-8">
./src/app/fame/page.tsx:              Celebrating companies that prioritize employee well-being, maintain excellent workplace practices, 
./src/app/fame/page.tsx:              and consistently receive high ratings from their workforce.
./src/app/fame/page.tsx:            </p>
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:            <div className="space-y-8">
./src/app/fame/page.tsx:              {companies.map((company, index) => (
./src/app/fame/page.tsx:                <motion.div
./src/app/fame/page.tsx:                  key={company.id}
./src/app/fame/page.tsx:                  initial={{ opacity: 0, y: 20 }}
./src/app/fame/page.tsx:                  animate={{ opacity: 1, y: 0 }}
./src/app/fame/page.tsx:                  transition={{ delay: index * 0.1 }}
./src/app/fame/page.tsx:                  className="bg-white/80 backdrop-blur-sm rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow"
./src/app/fame/page.tsx:                >
./src/app/fame/page.tsx:                  <div className="flex justify-between items-start mb-4">
./src/app/fame/page.tsx:                    <div>
./src/app/fame/page.tsx:                      <h2 className="text-2xl font-semibold text-blue-900">{company.name}</h2>
./src/app/fame/page.tsx:                      <div className="flex items-center mt-2">
./src/app/fame/page.tsx:                        <span className="text-lg font-medium text-blue-600">
./src/app/fame/page.tsx:                          Rating: {company.average_rating.toFixed(1)}
./src/app/fame/page.tsx:                        </span>
./src/app/fame/page.tsx:                        <span className="mx-2 text-blue-300">•</span>
./src/app/fame/page.tsx:                        <span className="text-blue-600">
./src/app/fame/page.tsx:                          {company.total_reviews} reviews
./src/app/fame/page.tsx:                        </span>
./src/app/fame/page.tsx:                      </div>
./src/app/fame/page.tsx:                      {company.industry && (
./src/app/fame/page.tsx:                        <div className="mt-1 text-blue-600">
./src/app/fame/page.tsx:                          Industry: {company.industry}
./src/app/fame/page.tsx:                        </div>
./src/app/fame/page.tsx:                      )}
./src/app/fame/page.tsx:                      {company.location && (
./src/app/fame/page.tsx:                        <div className="mt-1 text-blue-600">
./src/app/fame/page.tsx:                          Location: {company.location}
./src/app/fame/page.tsx:                        </div>
./src/app/fame/page.tsx:                      )}
./src/app/fame/page.tsx:                    </div>
./src/app/fame/page.tsx:                  </div>
./src/app/fame/page.tsx:
./src/app/fame/page.tsx:                  {companyNews[company.name]?.length > 0 && (
./src/app/fame/page.tsx:                    <div className="mt-4">
./src/app/fame/page.tsx:                      <h3 className="text-lg font-semibold">{company.name} News</h3>
./src/app/fame/page.tsx:                      {companyNews[company.name].map((article, i) => (
./src/app/fame/page.tsx:                        <div key={i} className="mt-2">
./src/app/fame/page.tsx:                          <a href={article.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
./src/app/fame/page.tsx:                            {article.title}
./src/app/fame/page.tsx:                          </a>
./src/app/fame/page.tsx:                          <span className="text-sm text-gray-500 ml-2">
./src/app/fame/page.tsx:                            {new Date(article.published_at).toLocaleDateString()}
./src/app/fame/page.tsx:                          </span>
./src/app/fame/page.tsx:                        </div>
./src/app/fame/page.tsx:                      ))}
./src/app/fame/page.tsx:                    </div>
./src/app/fame/page.tsx:                  )}
./src/app/fame/page.tsx:                </motion.div>
./src/app/fame/page.tsx:              ))}
./src/app/fame/page.tsx:            </div>
./src/app/fame/page.tsx:          </div>
./src/app/fame/page.tsx:        </div>
./src/app/fame/page.tsx:      </Suspense>
./src/app/fame/page.tsx:    </ErrorBoundary>
./src/app/fame/page.tsx:  );
./src/app/fame/page.tsx:}
./src/app/globals.css:@tailwind base;
./src/app/globals.css:@tailwind components;
./src/app/globals.css:@tailwind utilities;
./src/app/globals.css: 
./src/app/globals.css:@layer base {
./src/app/globals.css:  * {
./src/app/globals.css:    @apply border-border;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  html {
./src/app/globals.css:    @apply antialiased;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  body {
./src/app/globals.css:    @apply bg-white text-foreground min-h-screen;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  :root {
./src/app/globals.css:    --background: 0 0% 100%;
./src/app/globals.css:    --foreground: 222.2 84% 4.9%;
./src/app/globals.css:
./src/app/globals.css:    --card: 0 0% 100%;
./src/app/globals.css:    --card-foreground: 222.2 84% 4.9%;
./src/app/globals.css: 
./src/app/globals.css:    --popover: 0 0% 100%;
./src/app/globals.css:    --popover-foreground: 222.2 84% 4.9%;
./src/app/globals.css: 
./src/app/globals.css:    --primary: 221.2 83.2% 53.3%;
./src/app/globals.css:    --primary-foreground: 210 40% 98%;
./src/app/globals.css: 
./src/app/globals.css:    --secondary: 210 40% 96.1%;
./src/app/globals.css:    --secondary-foreground: 222.2 47.4% 11.2%;
./src/app/globals.css: 
./src/app/globals.css:    --muted: 210 40% 96.1%;
./src/app/globals.css:    --muted-foreground: 215.4 16.3% 46.9%;
./src/app/globals.css: 
./src/app/globals.css:    --accent: 210 40% 96.1%;
./src/app/globals.css:    --accent-foreground: 222.2 47.4% 11.2%;
./src/app/globals.css: 
./src/app/globals.css:    --destructive: 0 84.2% 60.2%;
./src/app/globals.css:    --destructive-foreground: 210 40% 98%;
./src/app/globals.css:
./src/app/globals.css:    --border: 214.3 31.8% 91.4%;
./src/app/globals.css:    --input: 214.3 31.8% 91.4%;
./src/app/globals.css:    --ring: 221.2 83.2% 53.3%;
./src/app/globals.css: 
./src/app/globals.css:    --radius: 0.5rem;
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/globals.css:
./src/app/globals.css:@keyframes fade-in {
./src/app/globals.css:  from {
./src/app/globals.css:    opacity: 0;
./src/app/globals.css:  }
./src/app/globals.css:  to {
./src/app/globals.css:    opacity: 1;
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/globals.css:
./src/app/globals.css:@keyframes fade-in-up {
./src/app/globals.css:  from {
./src/app/globals.css:    opacity: 0;
./src/app/globals.css:    transform: translateY(20px);
./src/app/globals.css:  }
./src/app/globals.css:  to {
./src/app/globals.css:    opacity: 1;
./src/app/globals.css:    transform: translateY(0);
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/globals.css:
./src/app/globals.css:@keyframes fade-in-scale {
./src/app/globals.css:  from {
./src/app/globals.css:    opacity: 0;
./src/app/globals.css:    transform: scale(0.95);
./src/app/globals.css:  }
./src/app/globals.css:  to {
./src/app/globals.css:    opacity: 1;
./src/app/globals.css:    transform: scale(1);
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/globals.css:
./src/app/globals.css:@keyframes fade-in-backdrop {
./src/app/globals.css:  from {
./src/app/globals.css:    opacity: 0;
./src/app/globals.css:  }
./src/app/globals.css:  to {
./src/app/globals.css:    opacity: 0.75;
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/globals.css:
./src/app/globals.css:@layer utilities {
./src/app/globals.css:  .animate-fade-in {
./src/app/globals.css:    animation: fade-in 0.3s ease-out forwards;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .animate-fade-in-up {
./src/app/globals.css:    animation: fade-in-up 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .animate-fade-in-scale {
./src/app/globals.css:    animation: fade-in-scale 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .animate-fade-in-backdrop {
./src/app/globals.css:    animation: fade-in-backdrop 0.2s ease-out forwards;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .page-transition {
./src/app/globals.css:    animation: fade-in 0.5s ease-out;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .dialog-content {
./src/app/globals.css:    animation: fade-in-scale 0.3s cubic-bezier(0.4, 0, 0.2, 1);
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  .dialog-backdrop {
./src/app/globals.css:    animation: fade-in-backdrop 0.2s ease-out;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  [animation-delay="200ms"] {
./src/app/globals.css:    animation-delay: 200ms;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  [animation-delay="400ms"] {
./src/app/globals.css:    animation-delay: 400ms;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  [animation-delay="600ms"] {
./src/app/globals.css:    animation-delay: 600ms;
./src/app/globals.css:  }
./src/app/globals.css:
./src/app/globals.css:  [animation-delay="800ms"] {
./src/app/globals.css:    animation-delay: 800ms;
./src/app/globals.css:  }
./src/app/globals.css:}
./src/app/layout.tsx:import './globals.css';
./src/app/layout.tsx:import { Inter } from 'next/font/google';
./src/app/layout.tsx:import type { Metadata } from 'next';
./src/app/layout.tsx:import { Providers } from './providers';
./src/app/layout.tsx:import { Navbar } from '@/components/Navbar';
./src/app/layout.tsx:
./src/app/layout.tsx:const inter = Inter({ subsets: ['latin'] });
./src/app/layout.tsx:
./src/app/layout.tsx:export const metadata: Metadata = {
./src/app/layout.tsx:  title: 'RateMyEmployer - Workplace Reviews & Transparency',
./src/app/layout.tsx:  description: 'Discover honest employee reviews, workplace insights, and company culture. Make informed career decisions with RateMyEmployer.',
./src/app/layout.tsx:  icons: {
./src/app/layout.tsx:    icon: '/favicon.ico',
./src/app/layout.tsx:  },
./src/app/layout.tsx:};
./src/app/layout.tsx:
./src/app/layout.tsx:export const dynamic = 'force-dynamic';
./src/app/layout.tsx:
./src/app/layout.tsx:export default function RootLayout({
./src/app/layout.tsx:  children,
./src/app/layout.tsx:}: {
./src/app/layout.tsx:  children: React.ReactNode;
./src/app/layout.tsx:}) {
./src/app/layout.tsx:  return (
./src/app/layout.tsx:    <html lang="en" suppressHydrationWarning>
./src/app/layout.tsx:      <body className={`${inter.className} bg-white`}>
./src/app/layout.tsx:        <Providers>
./src/app/layout.tsx:          <Navbar />
./src/app/layout.tsx:          {children}
./src/app/layout.tsx:        </Providers>
./src/app/layout.tsx:      </body>
./src/app/layout.tsx:    </html>
./src/app/layout.tsx:  );
./src/app/layout.tsx:}
./src/app/not-found.tsx:import Link from 'next/link';
./src/app/not-found.tsx:
./src/app/not-found.tsx:export default function NotFound() {
./src/app/not-found.tsx:  return (
./src/app/not-found.tsx:    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
./src/app/not-found.tsx:      <div className="text-center">
./src/app/not-found.tsx:        <h1 className="text-6xl font-bold text-gray-900 dark:text-white">404</h1>
./src/app/not-found.tsx:        <p className="mt-4 text-xl text-gray-600 dark:text-gray-300">Page not found</p>
./src/app/not-found.tsx:        <Link
./src/app/not-found.tsx:          href="/"
./src/app/not-found.tsx:          className="mt-8 inline-block px-6 py-3 text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
./src/app/not-found.tsx:        >
./src/app/not-found.tsx:          Go back home
./src/app/not-found.tsx:        </Link>
./src/app/not-found.tsx:      </div>
./src/app/not-found.tsx:    </div>
./src/app/not-found.tsx:  );
./src/app/not-found.tsx:} 
./src/app/page.tsx:'use client';
./src/app/page.tsx:
./src/app/page.tsx:// React and Next.js imports
./src/app/page.tsx:import * as React from 'react';
./src/app/page.tsx:import { ErrorBoundary } from 'react-error-boundary';
./src/app/page.tsx:
./src/app/page.tsx:// Components and utilities
./src/app/page.tsx:import { HomeClient } from '@/components/HomeClient';
./src/app/page.tsx:
./src/app/page.tsx:function ErrorFallback({ error }: { error: Error }) {
./src/app/page.tsx:  return (
./src/app/page.tsx:    <div className="min-h-screen bg-gray-50 p-8 flex items-center justify-center">
./src/app/page.tsx:      <div className="max-w-2xl text-center">
./src/app/page.tsx:        <h2 className="text-2xl font-bold text-red-600 mb-4">
./src/app/page.tsx:          Oops! Something went wrong with the homepage
./src/app/page.tsx:        </h2>
./src/app/page.tsx:        <p className="text-gray-600 mb-4">{error.message}</p>
./src/app/page.tsx:        <button
./src/app/page.tsx:          onClick={() => window.location.reload()}
./src/app/page.tsx:          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
./src/app/page.tsx:        >
./src/app/page.tsx:          Refresh Page
./src/app/page.tsx:        </button>
./src/app/page.tsx:      </div>
./src/app/page.tsx:    </div>
./src/app/page.tsx:  );
./src/app/page.tsx:}
./src/app/page.tsx:
./src/app/page.tsx:export default function Home() {
./src/app/page.tsx:  return (
./src/app/page.tsx:    <ErrorBoundary FallbackComponent={ErrorFallback}>
./src/app/page.tsx:      <main className="min-h-screen bg-gradient-to-b from-blue-50 to-white transform scale-80 origin-top">
./src/app/page.tsx:        <HomeClient />
./src/app/page.tsx:      </main>
./src/app/page.tsx:    </ErrorBoundary>
./src/app/page.tsx:  );
./src/app/page.tsx:}
./src/app/privacy/page.tsx:'use client'
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:import { motion } from 'framer-motion';
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:export default function PrivacyPage() {
./src/app/privacy/page.tsx:  return (
./src/app/privacy/page.tsx:    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
./src/app/privacy/page.tsx:      <div className="container mx-auto px-4 py-12">
./src/app/privacy/page.tsx:        <motion.div
./src/app/privacy/page.tsx:          initial={{ opacity: 0, y: 20 }}
./src/app/privacy/page.tsx:          animate={{ opacity: 1, y: 0 }}
./src/app/privacy/page.tsx:          transition={{ duration: 0.5 }}
./src/app/privacy/page.tsx:          className="max-w-4xl mx-auto"
./src/app/privacy/page.tsx:        >
./src/app/privacy/page.tsx:          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-8">Privacy Policy</h1>
./src/app/privacy/page.tsx:          <div className="prose prose-lg dark:prose-invert max-w-none">
./src/app/privacy/page.tsx:            <p className="text-gray-600 dark:text-gray-300 mb-8">
./src/app/privacy/page.tsx:              Last updated: {new Date().toLocaleDateString()}
./src/app/privacy/page.tsx:            </p>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                1. Information We Collect
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                We collect information that you provide directly to us, including:
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                <li className="mb-2">Account information (name, email, password)</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Profile information</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Review content and ratings</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Communications with us</li>
./src/app/privacy/page.tsx:                <li>Usage data and analytics</li>
./src/app/privacy/page.tsx:              </ul>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                2. How We Use Your Information
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                We use the information we collect to:
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                <li className="mb-2">Provide and maintain our services</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Process and display reviews</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Communicate with you about our services</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Improve and optimize our platform</li>
./src/app/privacy/page.tsx:                <li>Protect against fraud and abuse</li>
./src/app/privacy/page.tsx:              </ul>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                3. Information Sharing
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                We do not sell your personal information. We may share your information with:
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                <li className="mb-2">Service providers who assist in our operations</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Law enforcement when required by law</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Other users (only your public profile and reviews)</li>
./src/app/privacy/page.tsx:                <li>Third parties with your consent</li>
./src/app/privacy/page.tsx:              </ul>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                4. Data Security
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                We implement appropriate technical and organizational measures to protect your personal information. However, no security system is impenetrable and we cannot guarantee the security of our systems 100%.
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                5. Your Rights
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                You have the right to:
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                <li className="mb-2">Access your personal information</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Correct inaccurate information</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Request deletion of your information</li>
./src/app/privacy/page.tsx:                <li className="mb-2">Object to processing of your information</li>
./src/app/privacy/page.tsx:                <li>Withdraw consent</li>
./src/app/privacy/page.tsx:              </ul>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                6. Cookies and Tracking
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                We use cookies and similar tracking technologies to collect information about your browsing activities. You can control cookies through your browser settings.
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section className="mb-12">
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                7. Children's Privacy
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                Our services are not directed to children under 13. We do not knowingly collect personal information from children under 13. If you become aware that a child has provided us with personal information, please contact us.
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <section>
./src/app/privacy/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/privacy/page.tsx:                8. Contact Us
./src/app/privacy/page.tsx:              </h2>
./src/app/privacy/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/privacy/page.tsx:                If you have any questions about this Privacy Policy, please contact us at:
./src/app/privacy/page.tsx:              </p>
./src/app/privacy/page.tsx:              <ul className="list-none text-gray-600 dark:text-gray-300">
./src/app/privacy/page.tsx:                <li>Email: privacy@ratemyemployer.com</li>
./src/app/privacy/page.tsx:                <li>Address: [Your Address]</li>
./src/app/privacy/page.tsx:              </ul>
./src/app/privacy/page.tsx:            </section>
./src/app/privacy/page.tsx:
./src/app/privacy/page.tsx:            <p>
./src/app/privacy/page.tsx:              We&apos;re committed to protecting your privacy.
./src/app/privacy/page.tsx:            </p>
./src/app/privacy/page.tsx:          </div>
./src/app/privacy/page.tsx:        </motion.div>
./src/app/privacy/page.tsx:      </div>
./src/app/privacy/page.tsx:    </div>
./src/app/privacy/page.tsx:  );
./src/app/privacy/page.tsx:}
./src/app/providers.tsx:'use client'
./src/app/providers.tsx:
./src/app/providers.tsx:import { ThemeProvider } from 'next-themes';
./src/app/providers.tsx:import { AuthProvider } from '@/contexts/AuthContext';
./src/app/providers.tsx:import { Toaster } from '@/components/ui/toaster';
./src/app/providers.tsx:
./src/app/providers.tsx:export function Providers({ children }: { children: React.ReactNode }) {
./src/app/providers.tsx:  return (
./src/app/providers.tsx:    <ThemeProvider attribute="class" defaultTheme="light" enableSystem={false}>
./src/app/providers.tsx:      <AuthProvider>
./src/app/providers.tsx:        <div className="min-h-screen bg-white">
./src/app/providers.tsx:          {children}
./src/app/providers.tsx:          <Toaster />
./src/app/providers.tsx:        </div>
./src/app/providers.tsx:      </AuthProvider>
./src/app/providers.tsx:    </ThemeProvider>
./src/app/providers.tsx:  );
./src/app/providers.tsx:}
./src/app/reviews/page.tsx:'use client'
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:import { useState, useEffect } from 'react';
./src/app/reviews/page.tsx:import Link from 'next/link';
./src/app/reviews/page.tsx:import { useRouter } from 'next/navigation';
./src/app/reviews/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/reviews/page.tsx:import { ErrorBoundary } from '@/components/ErrorBoundary';
./src/app/reviews/page.tsx:import { ErrorDisplay } from "@/components/ErrorDisplay";
./src/app/reviews/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/reviews/page.tsx:import { Database } from '@/types/supabase';
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:interface ReviewWithCompany {
./src/app/reviews/page.tsx:  id: number;
./src/app/reviews/page.tsx:  rating: number;
./src/app/reviews/page.tsx:  title: string;
./src/app/reviews/page.tsx:  content: string;
./src/app/reviews/page.tsx:  pros: string | null;
./src/app/reviews/page.tsx:  cons: string | null;
./src/app/reviews/page.tsx:  position: string;
./src/app/reviews/page.tsx:  employment_status: string;
./src/app/reviews/page.tsx:  created_at: string;
./src/app/reviews/page.tsx:  user_id: string;
./src/app/reviews/page.tsx:  company: Pick<Company, 'id' | 'name'>;
./src/app/reviews/page.tsx:}
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:function ReviewsList() {
./src/app/reviews/page.tsx:  const [reviews, setReviews] = useState<ReviewWithCompany[]>([]);
./src/app/reviews/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/reviews/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:  useEffect(() => {
./src/app/reviews/page.tsx:    async function fetchReviews() {
./src/app/reviews/page.tsx:      try {
./src/app/reviews/page.tsx:        console.log('Fetching reviews...');
./src/app/reviews/page.tsx:        
./src/app/reviews/page.tsx:        const { data, error } = await supabase
./src/app/reviews/page.tsx:          .from('reviews')
./src/app/reviews/page.tsx:          .select(`
./src/app/reviews/page.tsx:            *,
./src/app/reviews/page.tsx:            company:company_id (
./src/app/reviews/page.tsx:              id,
./src/app/reviews/page.tsx:              name
./src/app/reviews/page.tsx:            )
./src/app/reviews/page.tsx:          `)
./src/app/reviews/page.tsx:          .order('created_at', { ascending: false });
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:        console.log('Full query response:', { data, error });
./src/app/reviews/page.tsx:        
./src/app/reviews/page.tsx:        if (error) {
./src/app/reviews/page.tsx:          console.error('Supabase error:', error);
./src/app/reviews/page.tsx:          throw error;
./src/app/reviews/page.tsx:        }
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:        if (!data) {
./src/app/reviews/page.tsx:          console.log('No data returned from Supabase');
./src/app/reviews/page.tsx:          setError('No reviews found');
./src/app/reviews/page.tsx:          return;
./src/app/reviews/page.tsx:        }
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:        console.log('Number of reviews:', data.length);
./src/app/reviews/page.tsx:        setReviews(data);
./src/app/reviews/page.tsx:      } catch (err) {
./src/app/reviews/page.tsx:        console.error('Error fetching reviews:', err);
./src/app/reviews/page.tsx:        setError('Failed to load reviews');
./src/app/reviews/page.tsx:      } finally {
./src/app/reviews/page.tsx:        setLoading(false);
./src/app/reviews/page.tsx:      }
./src/app/reviews/page.tsx:    }
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:    fetchReviews();
./src/app/reviews/page.tsx:  }, []);
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:  if (loading) {
./src/app/reviews/page.tsx:    return (
./src/app/reviews/page.tsx:      <div className="min-h-screen flex items-center justify-center">
./src/app/reviews/page.tsx:        <LoadingSpinner size="lg" />
./src/app/reviews/page.tsx:      </div>
./src/app/reviews/page.tsx:    );
./src/app/reviews/page.tsx:  }
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:  if (error) {
./src/app/reviews/page.tsx:    return <ErrorDisplay message={error} />;
./src/app/reviews/page.tsx:  }
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:  return (
./src/app/reviews/page.tsx:    <div className="max-w-4xl mx-auto p-6">
./src/app/reviews/page.tsx:      <div className="flex justify-between items-center mb-6">
./src/app/reviews/page.tsx:        <h1 className="text-3xl font-bold">Company Reviews</h1>
./src/app/reviews/page.tsx:      </div>
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:      <div className="space-y-6">
./src/app/reviews/page.tsx:        {reviews.length === 0 ? (
./src/app/reviews/page.tsx:          <div className="text-center py-8">
./src/app/reviews/page.tsx:            <p className="text-gray-600 dark:text-gray-400 text-lg">No reviews available yet.</p>
./src/app/reviews/page.tsx:          </div>
./src/app/reviews/page.tsx:        ) : (
./src/app/reviews/page.tsx:          reviews.map(review => (
./src/app/reviews/page.tsx:            <div key={review.id} className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
./src/app/reviews/page.tsx:              <div className="flex justify-between items-start mb-4">
./src/app/reviews/page.tsx:                <div>
./src/app/reviews/page.tsx:                  <Link
./src/app/reviews/page.tsx:                    href={`/companies/${review.company?.id}`}
./src/app/reviews/page.tsx:                    className="text-xl font-semibold hover:text-blue-500"
./src/app/reviews/page.tsx:                  >
./src/app/reviews/page.tsx:                    {review.company?.name}
./src/app/reviews/page.tsx:                  </Link>
./src/app/reviews/page.tsx:                  <p className="text-gray-600 dark:text-gray-400 text-sm">
./src/app/reviews/page.tsx:                    {review.position} • {review.employment_status}
./src/app/reviews/page.tsx:                  </p>
./src/app/reviews/page.tsx:                </div>
./src/app/reviews/page.tsx:                <div className="flex items-center">
./src/app/reviews/page.tsx:                  <span className="text-2xl font-bold">{review.rating}/5</span>
./src/app/reviews/page.tsx:                </div>
./src/app/reviews/page.tsx:              </div>
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:              <h3 className="text-lg font-semibold mb-2">{review.title}</h3>
./src/app/reviews/page.tsx:              <p className="text-gray-700 dark:text-gray-300 mb-4">{review.content}</p>
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:              <div className="grid grid-cols-2 gap-4 mb-4">
./src/app/reviews/page.tsx:                <div>
./src/app/reviews/page.tsx:                  <h4 className="font-medium text-green-600 dark:text-green-400 mb-1">Pros</h4>
./src/app/reviews/page.tsx:                  <p className="text-gray-600 dark:text-gray-400">{review.pros || 'None provided'}</p>
./src/app/reviews/page.tsx:                </div>
./src/app/reviews/page.tsx:                <div>
./src/app/reviews/page.tsx:                  <h4 className="font-medium text-red-600 dark:text-red-400 mb-1">Cons</h4>
./src/app/reviews/page.tsx:                  <p className="text-gray-600 dark:text-gray-400">{review.cons || 'None provided'}</p>
./src/app/reviews/page.tsx:                </div>
./src/app/reviews/page.tsx:              </div>
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:              <div className="text-sm text-gray-500 dark:text-gray-400">
./src/app/reviews/page.tsx:                Posted on {new Date(review.created_at).toLocaleDateString()}
./src/app/reviews/page.tsx:              </div>
./src/app/reviews/page.tsx:            </div>
./src/app/reviews/page.tsx:          ))
./src/app/reviews/page.tsx:        )}
./src/app/reviews/page.tsx:      </div>
./src/app/reviews/page.tsx:    </div>
./src/app/reviews/page.tsx:  );
./src/app/reviews/page.tsx:}
./src/app/reviews/page.tsx:
./src/app/reviews/page.tsx:export default function ReviewsPage() {
./src/app/reviews/page.tsx:  return (
./src/app/reviews/page.tsx:    <ErrorBoundary>
./src/app/reviews/page.tsx:      <ReviewsList />
./src/app/reviews/page.tsx:    </ErrorBoundary>
./src/app/reviews/page.tsx:  );
./src/app/reviews/page.tsx:}
./src/app/reviews/[id]/edit/page.tsx:'use client'
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:import { useState, useEffect, useCallback } from 'react';
./src/app/reviews/[id]/edit/page.tsx:import { useParams, useRouter } from 'next/navigation';
./src/app/reviews/[id]/edit/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/reviews/[id]/edit/page.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/app/reviews/[id]/edit/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/reviews/[id]/edit/page.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/app/reviews/[id]/edit/page.tsx:import type { Database } from '@/types/supabase';
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:type Review = Database['public']['Tables']['reviews']['Row'];
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:export default function EditReview() {
./src/app/reviews/[id]/edit/page.tsx:  const params = useParams() as { id: string };
./src/app/reviews/[id]/edit/page.tsx:  const router = useRouter();
./src/app/reviews/[id]/edit/page.tsx:  const [review, setReview] = useState<Review | null>(null);
./src/app/reviews/[id]/edit/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/reviews/[id]/edit/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/reviews/[id]/edit/page.tsx:  
./src/app/reviews/[id]/edit/page.tsx:  const id = parseInt(params.id);
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  const fetchReview = useCallback(async () => {
./src/app/reviews/[id]/edit/page.tsx:    if (!params?.id) {
./src/app/reviews/[id]/edit/page.tsx:      setError('Invalid review ID');
./src/app/reviews/[id]/edit/page.tsx:      setLoading(false);
./src/app/reviews/[id]/edit/page.tsx:      return;
./src/app/reviews/[id]/edit/page.tsx:    }
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:    try {
./src/app/reviews/[id]/edit/page.tsx:      const { data, error } = await supabase
./src/app/reviews/[id]/edit/page.tsx:        .from('reviews')
./src/app/reviews/[id]/edit/page.tsx:        .select('*')
./src/app/reviews/[id]/edit/page.tsx:        .eq('id', params.id)
./src/app/reviews/[id]/edit/page.tsx:        .single();
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:      if (error) throw error;
./src/app/reviews/[id]/edit/page.tsx:      setReview(data);
./src/app/reviews/[id]/edit/page.tsx:    } catch (err) {
./src/app/reviews/[id]/edit/page.tsx:      console.error('Error fetching review:', err);
./src/app/reviews/[id]/edit/page.tsx:      setError('Failed to load review');
./src/app/reviews/[id]/edit/page.tsx:    } finally {
./src/app/reviews/[id]/edit/page.tsx:      setLoading(false);
./src/app/reviews/[id]/edit/page.tsx:    }
./src/app/reviews/[id]/edit/page.tsx:  }, [params?.id]);
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  useEffect(() => {
./src/app/reviews/[id]/edit/page.tsx:    fetchReview();
./src/app/reviews/[id]/edit/page.tsx:  }, [fetchReview]);
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  if (isNaN(id)) {
./src/app/reviews/[id]/edit/page.tsx:    return <div>Invalid review ID</div>;
./src/app/reviews/[id]/edit/page.tsx:  }
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  if (loading) {
./src/app/reviews/[id]/edit/page.tsx:    return (
./src/app/reviews/[id]/edit/page.tsx:      <div className="max-w-4xl mx-auto p-6">
./src/app/reviews/[id]/edit/page.tsx:        <div className="animate-pulse">
./src/app/reviews/[id]/edit/page.tsx:          <div className="h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-6"></div>
./src/app/reviews/[id]/edit/page.tsx:          <div className="space-y-4">
./src/app/reviews/[id]/edit/page.tsx:            <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
./src/app/reviews/[id]/edit/page.tsx:            <div className="h-32 bg-gray-200 dark:bg-gray-700 rounded"></div>
./src/app/reviews/[id]/edit/page.tsx:          </div>
./src/app/reviews/[id]/edit/page.tsx:        </div>
./src/app/reviews/[id]/edit/page.tsx:      </div>
./src/app/reviews/[id]/edit/page.tsx:    );
./src/app/reviews/[id]/edit/page.tsx:  }
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  if (error || !review) {
./src/app/reviews/[id]/edit/page.tsx:    return (
./src/app/reviews/[id]/edit/page.tsx:      <div className="max-w-4xl mx-auto p-6">
./src/app/reviews/[id]/edit/page.tsx:        <div className="bg-red-50 dark:bg-red-900 border-l-4 border-red-500 p-4 rounded">
./src/app/reviews/[id]/edit/page.tsx:          <p className="text-red-700 dark:text-red-200">{error || 'Review not found'}</p>
./src/app/reviews/[id]/edit/page.tsx:        </div>
./src/app/reviews/[id]/edit/page.tsx:      </div>
./src/app/reviews/[id]/edit/page.tsx:    );
./src/app/reviews/[id]/edit/page.tsx:  }
./src/app/reviews/[id]/edit/page.tsx:
./src/app/reviews/[id]/edit/page.tsx:  return (
./src/app/reviews/[id]/edit/page.tsx:    <div className="max-w-4xl mx-auto p-6">
./src/app/reviews/[id]/edit/page.tsx:      <h1 className="text-2xl font-bold mb-6">Edit Review</h1>
./src/app/reviews/[id]/edit/page.tsx:      <ReviewForm
./src/app/reviews/[id]/edit/page.tsx:        companyId={review.company_id}
./src/app/reviews/[id]/edit/page.tsx:        initialData={review}
./src/app/reviews/[id]/edit/page.tsx:        onSuccess={() => {
./src/app/reviews/[id]/edit/page.tsx:          router.push('/account');
./src/app/reviews/[id]/edit/page.tsx:        }}
./src/app/reviews/[id]/edit/page.tsx:      />
./src/app/reviews/[id]/edit/page.tsx:    </div>
./src/app/reviews/[id]/edit/page.tsx:  );
./src/app/reviews/[id]/edit/page.tsx:}
./src/app/reviews/[id]/page.tsx:'use client'
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:import { useParams } from 'next/navigation';
./src/app/reviews/[id]/page.tsx:import Link from 'next/link';
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:import { StarIcon } from '@heroicons/react/20/solid';
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:import { useCompany } from '@/hooks/useCompany';
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:export const dynamic = 'force-dynamic';
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:export default function ReviewPage() {
./src/app/reviews/[id]/page.tsx:  const params = useParams();
./src/app/reviews/[id]/page.tsx:  const id = params?.id;
./src/app/reviews/[id]/page.tsx:  const { company, isLoading, error } = useCompany(id as string, { withReviews: true });
./src/app/reviews/[id]/page.tsx:  const review = company?.reviews?.find(r => r.id?.toString() === id);
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:  if (isLoading) {
./src/app/reviews/[id]/page.tsx:    return (
./src/app/reviews/[id]/page.tsx:      <div className="container mx-auto px-4 py-8">
./src/app/reviews/[id]/page.tsx:        <div className="flex justify-center">
./src/app/reviews/[id]/page.tsx:          <LoadingSpinner size="lg" />
./src/app/reviews/[id]/page.tsx:        </div>
./src/app/reviews/[id]/page.tsx:      </div>
./src/app/reviews/[id]/page.tsx:    );
./src/app/reviews/[id]/page.tsx:  }
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:  if (error) {
./src/app/reviews/[id]/page.tsx:    return (
./src/app/reviews/[id]/page.tsx:      <div className="container mx-auto px-4 py-8">
./src/app/reviews/[id]/page.tsx:        <div className="text-red-500">{error.message}</div>
./src/app/reviews/[id]/page.tsx:      </div>
./src/app/reviews/[id]/page.tsx:    );
./src/app/reviews/[id]/page.tsx:  }
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:  if (!review) {
./src/app/reviews/[id]/page.tsx:    return (
./src/app/reviews/[id]/page.tsx:      <div className="container mx-auto px-4 py-8">
./src/app/reviews/[id]/page.tsx:        <div className="text-red-500">Review not found</div>
./src/app/reviews/[id]/page.tsx:      </div>
./src/app/reviews/[id]/page.tsx:    );
./src/app/reviews/[id]/page.tsx:  }
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:  return (
./src/app/reviews/[id]/page.tsx:    <div className="container mx-auto px-4 py-8">
./src/app/reviews/[id]/page.tsx:      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
./src/app/reviews/[id]/page.tsx:        <div className="mb-6">
./src/app/reviews/[id]/page.tsx:          <Link
./src/app/reviews/[id]/page.tsx:            href={`/companies/${review.company_id}`}
./src/app/reviews/[id]/page.tsx:            className="text-blue-600 dark:text-blue-400 hover:underline"
./src/app/reviews/[id]/page.tsx:          >
./src/app/reviews/[id]/page.tsx:            {company?.name}
./src/app/reviews/[id]/page.tsx:          </Link>
./src/app/reviews/[id]/page.tsx:          {review.created_at && (
./src/app/reviews/[id]/page.tsx:            <span className="text-gray-600 dark:text-gray-400 ml-2">{new Date(review.created_at).toLocaleDateString()}</span>
./src/app/reviews/[id]/page.tsx:          )}
./src/app/reviews/[id]/page.tsx:        </div>
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:        <div className="flex items-center mb-6">
./src/app/reviews/[id]/page.tsx:          <div className="flex items-center">
./src/app/reviews/[id]/page.tsx:            {[...Array(5)].map((_, i) => (
./src/app/reviews/[id]/page.tsx:              <StarIcon
./src/app/reviews/[id]/page.tsx:                key={i}
./src/app/reviews/[id]/page.tsx:                className={`h-6 w-6 ${
./src/app/reviews/[id]/page.tsx:                  i < review.rating ? 'text-yellow-400' : 'text-gray-300'
./src/app/reviews/[id]/page.tsx:                }`}
./src/app/reviews/[id]/page.tsx:              />
./src/app/reviews/[id]/page.tsx:            ))}
./src/app/reviews/[id]/page.tsx:          </div>
./src/app/reviews/[id]/page.tsx:          <span className="ml-2 text-gray-600 dark:text-gray-400">
./src/app/reviews/[id]/page.tsx:            {review.rating} out of 5
./src/app/reviews/[id]/page.tsx:          </span>
./src/app/reviews/[id]/page.tsx:        </div>
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:        <div className="prose dark:prose-invert max-w-none">
./src/app/reviews/[id]/page.tsx:          <div className="mt-4">
./src/app/reviews/[id]/page.tsx:            <h2 className="text-xl font-semibold mb-2">{review.title}</h2>
./src/app/reviews/[id]/page.tsx:            <p className="text-gray-700 dark:text-gray-300">{review.content}</p>
./src/app/reviews/[id]/page.tsx:          </div>
./src/app/reviews/[id]/page.tsx:
./src/app/reviews/[id]/page.tsx:          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
./src/app/reviews/[id]/page.tsx:            {review.pros && (
./src/app/reviews/[id]/page.tsx:              <div>
./src/app/reviews/[id]/page.tsx:                <h3 className="text-lg font-medium text-green-600 dark:text-green-400 mb-2">
./src/app/reviews/[id]/page.tsx:                  Pros
./src/app/reviews/[id]/page.tsx:                </h3>
./src/app/reviews/[id]/page.tsx:                <p className="text-gray-700 dark:text-gray-300">{review.pros}</p>
./src/app/reviews/[id]/page.tsx:              </div>
./src/app/reviews/[id]/page.tsx:            )}
./src/app/reviews/[id]/page.tsx:            {review.cons && (
./src/app/reviews/[id]/page.tsx:              <div>
./src/app/reviews/[id]/page.tsx:                <h3 className="text-lg font-medium text-red-600 dark:text-red-400 mb-2">
./src/app/reviews/[id]/page.tsx:                  Cons
./src/app/reviews/[id]/page.tsx:                </h3>
./src/app/reviews/[id]/page.tsx:                <p className="text-gray-700 dark:text-gray-300">{review.cons}</p>
./src/app/reviews/[id]/page.tsx:              </div>
./src/app/reviews/[id]/page.tsx:            )}
./src/app/reviews/[id]/page.tsx:          </div>
./src/app/reviews/[id]/page.tsx:        </div>
./src/app/reviews/[id]/page.tsx:      </div>
./src/app/reviews/[id]/page.tsx:    </div>
./src/app/reviews/[id]/page.tsx:  );
./src/app/reviews/[id]/page.tsx:}
./src/app/shame/config.ts:
./src/app/shame/config.ts:
./src/app/shame/config.ts:// Route segment config
./src/app/shame/config.ts:export const dynamic = 'force-dynamic';
./src/app/shame/config.ts:export const revalidate = 3600; // revalidate every hour
./src/app/shame/page.tsx:'use client'
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:import { useEffect, useState } from 'react';
./src/app/shame/page.tsx:import { supabase } from '@/lib/supabaseClient';
./src/app/shame/page.tsx:import { Card, CardContent } from '@/components/ui/card';
./src/app/shame/page.tsx:import { Skeleton } from '@/components/ui/skeleton';
./src/app/shame/page.tsx:import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
./src/app/shame/page.tsx:import { ExclamationTriangleIcon, ChevronDownIcon, ChevronUpIcon, ExternalLinkIcon } from '@radix-ui/react-icons';
./src/app/shame/page.tsx:import { fetchCompanyNews, type MarketauxArticle } from '@/lib/marketauxApi';
./src/app/shame/page.tsx:import type { Company, Review } from '@/types/database';
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:interface CompanyWithShameData extends Company {
./src/app/shame/page.tsx:  reviews?: Review[];
./src/app/shame/page.tsx:  shame_score?: number;
./src/app/shame/page.tsx:  score_breakdown?: {
./src/app/shame/page.tsx:    base_score: number;
./src/app/shame/page.tsx:    weight: number;
./src/app/shame/page.tsx:    recent_negative_count: number;
./src/app/shame/page.tsx:    recent_bonus: number;
./src/app/shame/page.tsx:  };
./src/app/shame/page.tsx:}
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:export default function WallOfShame() {
./src/app/shame/page.tsx:  const [companies, setCompanies] = useState<CompanyWithShameData[]>([]);
./src/app/shame/page.tsx:  const [loading, setLoading] = useState(true);
./src/app/shame/page.tsx:  const [error, setError] = useState<string | null>(null);
./src/app/shame/page.tsx:  const [companyNews, setCompanyNews] = useState<{ [key: string]: MarketauxArticle[] }>({});
./src/app/shame/page.tsx:  const [loadingNews, setLoadingNews] = useState<{ [key: string]: boolean }>({});
./src/app/shame/page.tsx:  const [isExplanationOpen, setIsExplanationOpen] = useState(false);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  const formatEmploymentStatus = (status: string): string => {
./src/app/shame/page.tsx:    const statusMap: Record<string, string> = {
./src/app/shame/page.tsx:      'FULL_TIME': 'Full-time',
./src/app/shame/page.tsx:      'PART_TIME': 'Part-time',
./src/app/shame/page.tsx:      'CONTRACT': 'Contract',
./src/app/shame/page.tsx:      'INTERN': 'Intern'
./src/app/shame/page.tsx:    };
./src/app/shame/page.tsx:    return statusMap[status] || status;
./src/app/shame/page.tsx:  };
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  useEffect(() => {
./src/app/shame/page.tsx:    async function fetchCompanies() {
./src/app/shame/page.tsx:      try {
./src/app/shame/page.tsx:        console.log('Fetching companies...');
./src/app/shame/page.tsx:        
./src/app/shame/page.tsx:        // First, let's check what reviews we have
./src/app/shame/page.tsx:        const { data: reviewsData, error: reviewsError } = await supabase
./src/app/shame/page.tsx:          .from('reviews')
./src/app/shame/page.tsx:          .select('*');
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        if (reviewsError) {
./src/app/shame/page.tsx:          console.error('Error fetching reviews:', reviewsError);
./src/app/shame/page.tsx:          throw new Error(reviewsError.message);
./src/app/shame/page.tsx:        }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        console.log('All reviews:', reviewsData?.map(r => ({
./src/app/shame/page.tsx:          id: r.id,
./src/app/shame/page.tsx:          company_id: r.company_id,
./src/app/shame/page.tsx:          rating: r.rating,
./src/app/shame/page.tsx:          created_at: r.created_at
./src/app/shame/page.tsx:        })));
./src/app/shame/page.tsx:        
./src/app/shame/page.tsx:        // Fetch companies with their reviews
./src/app/shame/page.tsx:        const { data: companiesData, error: companiesError } = await supabase
./src/app/shame/page.tsx:          .from('companies')
./src/app/shame/page.tsx:          .select(`
./src/app/shame/page.tsx:            id,
./src/app/shame/page.tsx:            name,
./src/app/shame/page.tsx:            industry,
./src/app/shame/page.tsx:            location,
./src/app/shame/page.tsx:            description,
./src/app/shame/page.tsx:            logo_url,
./src/app/shame/page.tsx:            reviews (
./src/app/shame/page.tsx:              id,
./src/app/shame/page.tsx:              rating,
./src/app/shame/page.tsx:              pros,
./src/app/shame/page.tsx:              cons,
./src/app/shame/page.tsx:              position,
./src/app/shame/page.tsx:              employment_status,
./src/app/shame/page.tsx:              is_current_employee,
./src/app/shame/page.tsx:              created_at
./src/app/shame/page.tsx:            )
./src/app/shame/page.tsx:          `);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        if (companiesError) {
./src/app/shame/page.tsx:          console.error('Error fetching companies:', companiesError);
./src/app/shame/page.tsx:          throw new Error(companiesError.message);
./src/app/shame/page.tsx:        }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        if (!companiesData || companiesData.length === 0) {
./src/app/shame/page.tsx:          console.log('No companies found');
./src/app/shame/page.tsx:          setCompanies([]);
./src/app/shame/page.tsx:          return;
./src/app/shame/page.tsx:        }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        console.log('Raw companies data:', companiesData.map(c => ({
./src/app/shame/page.tsx:          id: c.id,
./src/app/shame/page.tsx:          name: c.name,
./src/app/shame/page.tsx:          reviewCount: c.reviews?.length || 0
./src/app/shame/page.tsx:        })));
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        // Process companies and calculate ratings
./src/app/shame/page.tsx:        const processedCompanies = companiesData
./src/app/shame/page.tsx:          .map(company => {
./src/app/shame/page.tsx:            // Calculate average rating and total reviews
./src/app/shame/page.tsx:            const reviews = company.reviews || [];
./src/app/shame/page.tsx:            const totalReviews = reviews.length;
./src/app/shame/page.tsx:            
./src/app/shame/page.tsx:            // Log individual review ratings for this company
./src/app/shame/page.tsx:            console.log(`Reviews for ${company.name}:`, reviews.map(r => ({
./src/app/shame/page.tsx:              id: r.id,
./src/app/shame/page.tsx:              rating: r.rating,
./src/app/shame/page.tsx:              created_at: r.created_at
./src/app/shame/page.tsx:            })));
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:            const averageRating = totalReviews > 0
./src/app/shame/page.tsx:              ? reviews.reduce((sum, review) => {
./src/app/shame/page.tsx:                  const rating = Number(review.rating);
./src/app/shame/page.tsx:                  if (isNaN(rating)) {
./src/app/shame/page.tsx:                    console.warn(`Invalid rating for review ${review.id} in company ${company.name}`);
./src/app/shame/page.tsx:                    return sum;
./src/app/shame/page.tsx:                  }
./src/app/shame/page.tsx:                  return sum + rating;
./src/app/shame/page.tsx:                }, 0) / totalReviews
./src/app/shame/page.tsx:              : 0;
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:            console.log(`Company ${company.name}: ${totalReviews} reviews, avg rating ${averageRating.toFixed(1)}`);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:            return {
./src/app/shame/page.tsx:              ...company,
./src/app/shame/page.tsx:              average_rating: averageRating,
./src/app/shame/page.tsx:              total_reviews: totalReviews
./src/app/shame/page.tsx:            };
./src/app/shame/page.tsx:          })
./src/app/shame/page.tsx:          .filter(company => company.total_reviews > 0); // Only include companies with reviews
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        console.log('Processed companies:', processedCompanies.map(c => ({
./src/app/shame/page.tsx:          name: c.name,
./src/app/shame/page.tsx:          totalReviews: c.total_reviews,
./src/app/shame/page.tsx:          avgRating: c.average_rating.toFixed(1)
./src/app/shame/page.tsx:        })));
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        // Calculate shame score for companies with reviews
./src/app/shame/page.tsx:        const companiesWithScore = processedCompanies.map(company => {
./src/app/shame/page.tsx:          const shameScore = calculateShameScore(company);
./src/app/shame/page.tsx:          console.log(`Calculated shame score for ${company.name}: ${shameScore}`);
./src/app/shame/page.tsx:          
./src/app/shame/page.tsx:          return {
./src/app/shame/page.tsx:            ...company,
./src/app/shame/page.tsx:            shame_score: shameScore,
./src/app/shame/page.tsx:            recent_reviews: company.reviews
./src/app/shame/page.tsx:              ?.filter(review => review.rating <= 2)
./src/app/shame/page.tsx:              ?.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())
./src/app/shame/page.tsx:              ?.slice(0, 3)
./src/app/shame/page.tsx:          };
./src/app/shame/page.tsx:        });
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        // Sort by shame score and take top 5
./src/app/shame/page.tsx:        const sortedCompanies = companiesWithScore
./src/app/shame/page.tsx:          .sort((a, b) => (b.shame_score || 0) - (a.shame_score || 0))
./src/app/shame/page.tsx:          .slice(0, 5);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        console.log('Final top 5 companies:', sortedCompanies.map(c => ({ 
./src/app/shame/page.tsx:          name: c.name, 
./src/app/shame/page.tsx:          score: c.shame_score,
./src/app/shame/page.tsx:          avgRating: c.average_rating.toFixed(1),
./src/app/shame/page.tsx:          totalReviews: c.total_reviews,
./src/app/shame/page.tsx:          recentBadReviews: c.recent_reviews?.length || 0
./src/app/shame/page.tsx:        })));
./src/app/shame/page.tsx:        
./src/app/shame/page.tsx:        setCompanies(sortedCompanies);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        // Fetch news for each company
./src/app/shame/page.tsx:        sortedCompanies.forEach(async (company) => {
./src/app/shame/page.tsx:          try {
./src/app/shame/page.tsx:            setLoadingNews(prev => ({ ...prev, [company.name]: true }));
./src/app/shame/page.tsx:            const news = await fetchCompanyNews(company.name);
./src/app/shame/page.tsx:            setCompanyNews(prev => ({ ...prev, [company.name]: news }));
./src/app/shame/page.tsx:          } catch (newsError) {
./src/app/shame/page.tsx:            console.error(`Error fetching news for ${company.name}:`, newsError);
./src/app/shame/page.tsx:          } finally {
./src/app/shame/page.tsx:            setLoadingNews(prev => ({ ...prev, [company.name]: false }));
./src/app/shame/page.tsx:          }
./src/app/shame/page.tsx:        });
./src/app/shame/page.tsx:      } catch (err) {
./src/app/shame/page.tsx:        console.error('Error in fetchCompanies:', err);
./src/app/shame/page.tsx:        setError(err instanceof Error ? err.message : 'Failed to load the Wall of Shame. Please try again later.');
./src/app/shame/page.tsx:      } finally {
./src/app/shame/page.tsx:        setLoading(false);
./src/app/shame/page.tsx:      }
./src/app/shame/page.tsx:    }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    fetchCompanies();
./src/app/shame/page.tsx:  }, []);
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  function calculateShameScore(company: CompanyWithShameData): number {
./src/app/shame/page.tsx:    if (!company.average_rating || !company.total_reviews) {
./src/app/shame/page.tsx:      console.log(`Skipping shame score calculation for ${company.name} - missing rating or reviews`);
./src/app/shame/page.tsx:      return 0;
./src/app/shame/page.tsx:    }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    // Base score from poor ratings (0-100 scale)
./src/app/shame/page.tsx:    const ratingScore = (5 - company.average_rating) * 20;
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    // Weight by number of reviews (more reviews = more reliable score)
./src/app/shame/page.tsx:    const reviewWeight = Math.min(company.total_reviews / 10, 1); // Cap at 10 reviews
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    // Count recent negative reviews (last 3 months)
./src/app/shame/page.tsx:    const recentNegativeReviews = company.reviews?.filter(review => {
./src/app/shame/page.tsx:      const isRecent = new Date(review.created_at) > new Date(Date.now() - 90 * 24 * 60 * 60 * 1000);
./src/app/shame/page.tsx:      return isRecent && review.rating <= 2;
./src/app/shame/page.tsx:    })?.length || 0;
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    // Add bonus points for recent negative reviews
./src/app/shame/page.tsx:    const recentReviewBonus = recentNegativeReviews * 5;
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    const finalScore = (ratingScore * reviewWeight) + recentReviewBonus;
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    console.log(`Shame score breakdown for ${company.name}:`, {
./src/app/shame/page.tsx:      ratingScore,
./src/app/shame/page.tsx:      reviewWeight,
./src/app/shame/page.tsx:      recentNegativeReviews,
./src/app/shame/page.tsx:      recentReviewBonus,
./src/app/shame/page.tsx:      finalScore
./src/app/shame/page.tsx:    });
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    // Store the breakdown for display
./src/app/shame/page.tsx:    company.score_breakdown = {
./src/app/shame/page.tsx:      base_score: ratingScore,
./src/app/shame/page.tsx:      weight: reviewWeight,
./src/app/shame/page.tsx:      recent_negative_count: recentNegativeReviews,
./src/app/shame/page.tsx:      recent_bonus: recentReviewBonus
./src/app/shame/page.tsx:    };
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:    return finalScore;
./src/app/shame/page.tsx:  }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  if (loading) {
./src/app/shame/page.tsx:    return (
./src/app/shame/page.tsx:      <div className="container mx-auto p-4">
./src/app/shame/page.tsx:        <h1 className="text-2xl font-bold mb-4">Wall of Shame</h1>
./src/app/shame/page.tsx:        <div className="space-y-4">
./src/app/shame/page.tsx:          {[...Array(5)].map((_, i) => (
./src/app/shame/page.tsx:            <Skeleton key={i} className="h-48 w-full" />
./src/app/shame/page.tsx:          ))}
./src/app/shame/page.tsx:        </div>
./src/app/shame/page.tsx:      </div>
./src/app/shame/page.tsx:    );
./src/app/shame/page.tsx:  }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  if (error) {
./src/app/shame/page.tsx:    return (
./src/app/shame/page.tsx:      <div className="container mx-auto p-4">
./src/app/shame/page.tsx:        <Alert variant="destructive">
./src/app/shame/page.tsx:          <ExclamationTriangleIcon className="h-4 w-4" />
./src/app/shame/page.tsx:          <AlertTitle>Error</AlertTitle>
./src/app/shame/page.tsx:          <AlertDescription>{error}</AlertDescription>
./src/app/shame/page.tsx:        </Alert>
./src/app/shame/page.tsx:      </div>
./src/app/shame/page.tsx:    );
./src/app/shame/page.tsx:  }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  if (companies.length === 0) {
./src/app/shame/page.tsx:    return (
./src/app/shame/page.tsx:      <div className="container mx-auto p-4 max-w-4xl">
./src/app/shame/page.tsx:        <h1 className="text-3xl font-bold mb-4">Wall of Shame</h1>
./src/app/shame/page.tsx:        
./src/app/shame/page.tsx:        <Card className="w-full">
./src/app/shame/page.tsx:          <CardContent className="p-6">
./src/app/shame/page.tsx:            <div className="text-center py-8">
./src/app/shame/page.tsx:              <div className="mb-4">
./src/app/shame/page.tsx:                <span role="img" aria-label="celebration" className="text-4xl">🎉</span>
./src/app/shame/page.tsx:              </div>
./src/app/shame/page.tsx:              <h2 className="text-xl font-semibold mb-2">Good News!</h2>
./src/app/shame/page.tsx:              <p className="text-gray-600">
./src/app/shame/page.tsx:                Currently, all companies have positive ratings. There are no companies that qualify for the Wall of Shame.
./src/app/shame/page.tsx:              </p>
./src/app/shame/page.tsx:              <p className="text-sm text-gray-500 mt-4">
./src/app/shame/page.tsx:                Companies appear here only when they have consistently poor ratings (2 stars or below) or recent negative reviews.
./src/app/shame/page.tsx:              </p>
./src/app/shame/page.tsx:            </div>
./src/app/shame/page.tsx:          </CardContent>
./src/app/shame/page.tsx:        </Card>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:        <div className="mt-8">
./src/app/shame/page.tsx:          <div className="bg-gray-50 rounded-lg">
./src/app/shame/page.tsx:            <button 
./src/app/shame/page.tsx:              onClick={() => setIsExplanationOpen(!isExplanationOpen)}
./src/app/shame/page.tsx:              className="w-full p-4 flex justify-between items-center text-left hover:bg-gray-100 transition-colors"
./src/app/shame/page.tsx:            >
./src/app/shame/page.tsx:              <h2 className="text-lg font-semibold">How Shame Scores Are Calculated</h2>
./src/app/shame/page.tsx:              {isExplanationOpen ? (
./src/app/shame/page.tsx:                <ChevronUpIcon className="h-5 w-5" />
./src/app/shame/page.tsx:              ) : (
./src/app/shame/page.tsx:                <ChevronDownIcon className="h-5 w-5" />
./src/app/shame/page.tsx:              )}
./src/app/shame/page.tsx:            </button>
./src/app/shame/page.tsx:            
./src/app/shame/page.tsx:            {isExplanationOpen && (
./src/app/shame/page.tsx:              <div className="p-4 pt-0 space-y-4 text-sm">
./src/app/shame/page.tsx:                <div className="grid grid-cols-2 gap-4">
./src/app/shame/page.tsx:                  <div>
./src/app/shame/page.tsx:                    <h3 className="font-medium mb-1">1. Base Score (0-100)</h3>
./src/app/shame/page.tsx:                    <p className="text-gray-600">
./src/app/shame/page.tsx:                      <code className="bg-gray-100 px-1 rounded text-xs">
./src/app/shame/page.tsx:                        (5 - Rating) × 20
./src/app/shame/page.tsx:                      </code>
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • 1★ = 80pts
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • 2★ = 60pts
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • 3★ = 40pts
./src/app/shame/page.tsx:                    </p>
./src/app/shame/page.tsx:                  </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:                  <div>
./src/app/shame/page.tsx:                    <h3 className="font-medium mb-1">2. Review Weight</h3>
./src/app/shame/page.tsx:                    <p className="text-gray-600">
./src/app/shame/page.tsx:                      <code className="bg-gray-100 px-1 rounded text-xs">
./src/app/shame/page.tsx:                        min(Reviews ÷ 10, 1)
./src/app/shame/page.tsx:                      </code>
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • 10+ reviews = 100%
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • 5 reviews = 50%
./src/app/shame/page.tsx:                    </p>
./src/app/shame/page.tsx:                  </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:                  <div>
./src/app/shame/page.tsx:                    <h3 className="font-medium mb-1">3. Recent Bad Reviews</h3>
./src/app/shame/page.tsx:                    <p className="text-gray-600">
./src/app/shame/page.tsx:                      <code className="bg-gray-100 px-1 rounded text-xs">
./src/app/shame/page.tsx:                        Bad Reviews × 5
./src/app/shame/page.tsx:                      </code>
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • Last 90 days
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      • Rating ≤ 2 stars
./src/app/shame/page.tsx:                    </p>
./src/app/shame/page.tsx:                  </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:                  <div>
./src/app/shame/page.tsx:                    <h3 className="font-medium mb-1">4. Final Score</h3>
./src/app/shame/page.tsx:                    <p className="text-gray-600">
./src/app/shame/page.tsx:                      <code className="bg-gray-100 px-1 rounded text-xs">
./src/app/shame/page.tsx:                        (Base × Weight) + Bonus
./src/app/shame/page.tsx:                      </code>
./src/app/shame/page.tsx:                      <br />
./src/app/shame/page.tsx:                      Higher score = worse rating
./src/app/shame/page.tsx:                    </p>
./src/app/shame/page.tsx:                  </div>
./src/app/shame/page.tsx:                </div>
./src/app/shame/page.tsx:              </div>
./src/app/shame/page.tsx:            )}
./src/app/shame/page.tsx:          </div>
./src/app/shame/page.tsx:        </div>
./src/app/shame/page.tsx:      </div>
./src/app/shame/page.tsx:    );
./src/app/shame/page.tsx:  }
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:  return (
./src/app/shame/page.tsx:    <div className="space-y-8">
./src/app/shame/page.tsx:      <div className="flex justify-between items-center">
./src/app/shame/page.tsx:        <h1 className="text-4xl font-bold text-red-600 dark:text-red-500">Wall of Shame</h1>
./src/app/shame/page.tsx:        <button
./src/app/shame/page.tsx:          onClick={() => setIsExplanationOpen(!isExplanationOpen)}
./src/app/shame/page.tsx:          className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200"
./src/app/shame/page.tsx:        >
./src/app/shame/page.tsx:          How are scores calculated?
./src/app/shame/page.tsx:          {isExplanationOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}
./src/app/shame/page.tsx:        </button>
./src/app/shame/page.tsx:      </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:      {isExplanationOpen && (
./src/app/shame/page.tsx:        <Alert>
./src/app/shame/page.tsx:          <AlertDescription className="text-sm">
./src/app/shame/page.tsx:            The shame score is calculated based on several factors:
./src/app/shame/page.tsx:            <ul className="list-disc list-inside mt-2 space-y-1">
./src/app/shame/page.tsx:              <li>Average rating (lower ratings increase the score)</li>
./src/app/shame/page.tsx:              <li>Number of reviews (more reviews give the score more weight)</li>
./src/app/shame/page.tsx:              <li>Recent negative reviews (reviews in the last 6 months have extra impact)</li>
./src/app/shame/page.tsx:            </ul>
./src/app/shame/page.tsx:          </AlertDescription>
./src/app/shame/page.tsx:        </Alert>
./src/app/shame/page.tsx:      )}
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:      <div className="space-y-6">
./src/app/shame/page.tsx:        {companies.map((company, index) => (
./src/app/shame/page.tsx:          <Card key={company.id} className="relative overflow-hidden">
./src/app/shame/page.tsx:            <div className="absolute top-0 left-0 w-16 h-16 bg-red-600 dark:bg-red-500 transform -rotate-45 -translate-x-8 -translate-y-8" />
./src/app/shame/page.tsx:            <div className="absolute top-1 left-1 text-white font-bold">#{index + 1}</div>
./src/app/shame/page.tsx:            <CardContent className="p-6">
./src/app/shame/page.tsx:              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
./src/app/shame/page.tsx:                <div>
./src/app/shame/page.tsx:                  <h2 className="text-2xl font-bold mb-2">{company.name}</h2>
./src/app/shame/page.tsx:                  <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">{company.industry}</p>
./src/app/shame/page.tsx:                  
./src/app/shame/page.tsx:                  <div className="space-y-2 mb-4">
./src/app/shame/page.tsx:                    <div className="flex justify-between">
./src/app/shame/page.tsx:                      <span>Shame Score:</span>
./src/app/shame/page.tsx:                      <span className="font-bold text-red-600 dark:text-red-500">
./src/app/shame/page.tsx:                        {company.shame_score?.toFixed(1)}
./src/app/shame/page.tsx:                      </span>
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                    <div className="flex justify-between">
./src/app/shame/page.tsx:                      <span>Average Rating:</span>
./src/app/shame/page.tsx:                      <span className="font-bold">
./src/app/shame/page.tsx:                        {company.average_rating?.toFixed(1)} / 5.0
./src/app/shame/page.tsx:                      </span>
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                    <div className="flex justify-between">
./src/app/shame/page.tsx:                      <span>Total Reviews:</span>
./src/app/shame/page.tsx:                      <span>{company.total_reviews}</span>
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                  </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:                  {company.recent_reviews && company.recent_reviews.length > 0 && (
./src/app/shame/page.tsx:                    <div>
./src/app/shame/page.tsx:                      <h3 className="font-semibold mb-2">Recent Poor Reviews:</h3>
./src/app/shame/page.tsx:                      <div className="space-y-3">
./src/app/shame/page.tsx:                        {company.recent_reviews.map((review) => (
./src/app/shame/page.tsx:                          <div key={review.id} className="text-sm bg-gray-50 dark:bg-gray-800 p-3 rounded">
./src/app/shame/page.tsx:                            <div className="flex justify-between mb-1">
./src/app/shame/page.tsx:                              <span className="font-medium">{review.position}</span>
./src/app/shame/page.tsx:                              <span className="text-red-600 dark:text-red-500">{review.rating}/5</span>
./src/app/shame/page.tsx:                            </div>
./src/app/shame/page.tsx:                            <p className="text-gray-600 dark:text-gray-400">{review.cons}</p>
./src/app/shame/page.tsx:                            <div className="mt-1 text-xs text-gray-500">
./src/app/shame/page.tsx:                              {formatEmploymentStatus(review.employment_status)}
./src/app/shame/page.tsx:                              {review.is_current_employee !== null && (
./src/app/shame/page.tsx:                                <span> • {review.is_current_employee ? 'Current Employee' : 'Former Employee'}</span>
./src/app/shame/page.tsx:                              )}
./src/app/shame/page.tsx:                            </div>
./src/app/shame/page.tsx:                          </div>
./src/app/shame/page.tsx:                        ))}
./src/app/shame/page.tsx:                      </div>
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                  )}
./src/app/shame/page.tsx:                </div>
./src/app/shame/page.tsx:
./src/app/shame/page.tsx:                <div>
./src/app/shame/page.tsx:                  <h3 className="font-semibold mb-2">Recent News:</h3>
./src/app/shame/page.tsx:                  {loadingNews[company.name] ? (
./src/app/shame/page.tsx:                    <div className="space-y-2">
./src/app/shame/page.tsx:                      {[...Array(3)].map((_, i) => (
./src/app/shame/page.tsx:                        <Skeleton key={i} className="h-24 w-full" />
./src/app/shame/page.tsx:                      ))}
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                  ) : companyNews[company.name]?.length > 0 ? (
./src/app/shame/page.tsx:                    <div className="space-y-3">
./src/app/shame/page.tsx:                      {companyNews[company.name].map((article, i) => (
./src/app/shame/page.tsx:                        <a
./src/app/shame/page.tsx:                          key={i}
./src/app/shame/page.tsx:                          href={article.url}
./src/app/shame/page.tsx:                          target="_blank"
./src/app/shame/page.tsx:                          rel="noopener noreferrer"
./src/app/shame/page.tsx:                          className="block bg-gray-50 dark:bg-gray-800 p-3 rounded hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
./src/app/shame/page.tsx:                        >
./src/app/shame/page.tsx:                          <div className="flex justify-between items-start gap-2">
./src/app/shame/page.tsx:                            <h4 className="font-medium text-sm">{article.title}</h4>
./src/app/shame/page.tsx:                            <ExternalLinkIcon className="h-4 w-4 flex-shrink-0 mt-1" />
./src/app/shame/page.tsx:                          </div>
./src/app/shame/page.tsx:                          {article.description && (
./src/app/shame/page.tsx:                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
./src/app/shame/page.tsx:                              {article.description}
./src/app/shame/page.tsx:                            </p>
./src/app/shame/page.tsx:                          )}
./src/app/shame/page.tsx:                          <div className="flex justify-between items-center mt-2 text-xs text-gray-500">
./src/app/shame/page.tsx:                            <span>{article.source.name}</span>
./src/app/shame/page.tsx:                            <span>{new Date(article.publishedAt).toLocaleDateString()}</span>
./src/app/shame/page.tsx:                          </div>
./src/app/shame/page.tsx:                        </a>
./src/app/shame/page.tsx:                      ))}
./src/app/shame/page.tsx:                    </div>
./src/app/shame/page.tsx:                  ) : (
./src/app/shame/page.tsx:                    <p className="text-sm text-gray-500">No recent news articles found.</p>
./src/app/shame/page.tsx:                  )}
./src/app/shame/page.tsx:                </div>
./src/app/shame/page.tsx:              </div>
./src/app/shame/page.tsx:            </CardContent>
./src/app/shame/page.tsx:          </Card>
./src/app/shame/page.tsx:        ))}
./src/app/shame/page.tsx:      </div>
./src/app/shame/page.tsx:    </div>
./src/app/shame/page.tsx:  );
./src/app/shame/page.tsx:}
./src/app/terms/page.tsx:'use client'
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:import { motion } from 'framer-motion';
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:export default function TermsPage(): JSX.Element {
./src/app/terms/page.tsx:  return (
./src/app/terms/page.tsx:    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
./src/app/terms/page.tsx:      <div className="container mx-auto px-4 py-12">
./src/app/terms/page.tsx:        <motion.div
./src/app/terms/page.tsx:          initial={{ opacity: 0, y: 20 }}
./src/app/terms/page.tsx:          animate={{ opacity: 1, y: 0 }}
./src/app/terms/page.tsx:          transition={{ duration: 0.5 }}
./src/app/terms/page.tsx:          className="max-w-4xl mx-auto"
./src/app/terms/page.tsx:        >
./src/app/terms/page.tsx:          <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-8">Terms of Service</h1>
./src/app/terms/page.tsx:          <div className="prose prose-lg dark:prose-invert max-w-none">
./src/app/terms/page.tsx:            <p className="text-gray-600 dark:text-gray-300 mb-8">
./src/app/terms/page.tsx:              Last updated: {new Date().toLocaleDateString()}
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                1. Agreement to Terms
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                By accessing or using RateMyEmployer, you agree to be bound by these Terms of Service and all applicable laws and regulations. If you do not agree with any of these terms, you are prohibited from using or accessing this site.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                2. Use License
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                Permission is granted to temporarily access the materials (information or software) on RateMyEmployer's website for personal, non-commercial viewing only. This is the grant of a license, not a transfer of title, and under this license you may not:
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                <li className="mb-2">Modify or copy the materials</li>
./src/app/terms/page.tsx:                <li className="mb-2">Use the materials for any commercial purpose</li>
./src/app/terms/page.tsx:                <li className="mb-2">Attempt to decompile or reverse engineer any software contained on the website</li>
./src/app/terms/page.tsx:                <li className="mb-2">Remove any copyright or other proprietary notations from the materials</li>
./src/app/terms/page.tsx:                <li>Transfer the materials to another person or "mirror" the materials on any other server</li>
./src/app/terms/page.tsx:              </ul>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                3. User Content
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                Users may post reviews, comments, and other content as long as the content is not illegal, obscene, threatening, defamatory, invasive of privacy, infringing of intellectual property rights, or otherwise injurious to third parties.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                RateMyEmployer reserves the right to remove or modify user content that violates these terms or that could harm the platform or its users.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                4. Review Guidelines
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                When posting reviews, users must:
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:              <ul className="list-disc pl-6 text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                <li className="mb-2">Provide truthful and accurate information</li>
./src/app/terms/page.tsx:                <li className="mb-2">Base reviews on personal experience</li>
./src/app/terms/page.tsx:                <li className="mb-2">Avoid disclosing confidential company information</li>
./src/app/terms/page.tsx:                <li className="mb-2">Respect others' privacy and rights</li>
./src/app/terms/page.tsx:                <li>Follow professional conduct standards</li>
./src/app/terms/page.tsx:              </ul>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                5. Disclaimer
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                The materials on RateMyEmployer's website are provided on an 'as is' basis. RateMyEmployer makes no warranties, expressed or implied, and hereby disclaims and negates all other warranties including, without limitation, implied warranties or conditions of merchantability, fitness for a particular purpose, or non-infringement of intellectual property or other violation of rights.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                6. Limitations
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                In no event shall RateMyEmployer or its suppliers be liable for any damages (including, without limitation, damages for loss of data or profit, or due to business interruption) arising out of the use or inability to use the materials on the website.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section className="mb-12">
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                7. Governing Law
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                These terms and conditions are governed by and construed in accordance with the laws of [Your Jurisdiction] and you irrevocably submit to the exclusive jurisdiction of the courts in that location.
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <section>
./src/app/terms/page.tsx:              <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-100 mb-4">
./src/app/terms/page.tsx:                8. Contact Information
./src/app/terms/page.tsx:              </h2>
./src/app/terms/page.tsx:              <p className="text-gray-600 dark:text-gray-300 mb-4">
./src/app/terms/page.tsx:                If you have any questions about these Terms of Service, please contact us at:
./src/app/terms/page.tsx:              </p>
./src/app/terms/page.tsx:              <ul className="list-none text-gray-600 dark:text-gray-300">
./src/app/terms/page.tsx:                <li>Email: legal@ratemyemployer.com</li>
./src/app/terms/page.tsx:                <li>Address: [Your Address]</li>
./src/app/terms/page.tsx:              </ul>
./src/app/terms/page.tsx:            </section>
./src/app/terms/page.tsx:
./src/app/terms/page.tsx:            <p>
./src/app/terms/page.tsx:              We&apos;re committed to maintaining a fair and balanced platform.
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:            <p>
./src/app/terms/page.tsx:              By using &quot;RateMyEmployer&quot;, you agree to these terms.
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:            <p>
./src/app/terms/page.tsx:              We don&apos;t tolerate harassment or discrimination.
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:            <p>
./src/app/terms/page.tsx:              It&apos;s important to maintain professionalism.
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:            <p>
./src/app/terms/page.tsx:              Don&apos;t share confidential information.
./src/app/terms/page.tsx:            </p>
./src/app/terms/page.tsx:          </div>
./src/app/terms/page.tsx:        </motion.div>
./src/app/terms/page.tsx:      </div>
./src/app/terms/page.tsx:    </div>
./src/app/terms/page.tsx:  );
./src/app/terms/page.tsx:}
./src/components/AssessmentList.tsx:'use client'
./src/components/AssessmentList.tsx:
./src/components/AssessmentList.tsx:
./src/components/AssessmentList.tsx:import { motion } from 'framer-motion';
./src/components/AssessmentList.tsx:
./src/components/AssessmentList.tsx:interface AssessmentCategory {
./src/components/AssessmentList.tsx:  category: string;
./src/components/AssessmentList.tsx:  factors: string[];
./src/components/AssessmentList.tsx:}
./src/components/AssessmentList.tsx:
./src/components/AssessmentList.tsx:const assessmentData: AssessmentCategory[] = [
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Skills and Competencies",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Support for training and development",
./src/components/AssessmentList.tsx:      "Leadership's communication and adaptability",
./src/components/AssessmentList.tsx:      "Up-to-date tools and systems",
./src/components/AssessmentList.tsx:      "Emphasis on learning opportunities"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Experience and Qualifications",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Industry expertise and track record",
./src/components/AssessmentList.tsx:      "Qualified management",
./src/components/AssessmentList.tsx:      "Celebration of milestones and contributions"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Work Ethic and Reliability",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Meeting commitments to employees (e.g., pay, benefits)",
./src/components/AssessmentList.tsx:      "Accountability for decisions",
./src/components/AssessmentList.tsx:      "Respectful and professional practices"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Cultural Fit",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Alignment with personal values",
./src/components/AssessmentList.tsx:      "Encouragement of collaboration",
./src/components/AssessmentList.tsx:      "Commitment to diversity and inclusion"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Motivation and Passion",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Employer's passion for their mission",
./src/components/AssessmentList.tsx:      "Engagement with employees",
./src/components/AssessmentList.tsx:      "Empowerment to take initiative"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Problem-Solving Abilities",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Effective crisis management",
./src/components/AssessmentList.tsx:      "Fostering innovation",
./src/components/AssessmentList.tsx:      "Transparent decision-making"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Communication Skills",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Clarity in expectations and feedback",
./src/components/AssessmentList.tsx:      "Leadership's active listening",
./src/components/AssessmentList.tsx:      "Trust-building relationships"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Adaptability",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Flexibility to industry and employee needs",
./src/components/AssessmentList.tsx:      "Opportunities for growth",
./src/components/AssessmentList.tsx:      "Value for diverse perspectives"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Leadership Potential",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Inspirational and supportive leadership",
./src/components/AssessmentList.tsx:      "Clear long-term vision",
./src/components/AssessmentList.tsx:      "Fair conflict management"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Results-Driven Mindset",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Clear and achievable goals",
./src/components/AssessmentList.tsx:      "Acknowledgment and rewards for achievements",
./src/components/AssessmentList.tsx:      "Efficient resource utilization"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Reputation",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Positive feedback from employees",
./src/components/AssessmentList.tsx:      "Good public image",
./src/components/AssessmentList.tsx:      "Satisfied clients/customers"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Transparency",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Clear and consistent policies",
./src/components/AssessmentList.tsx:      "Honest communication about challenges and changes"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Professional Growth Opportunities",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Sponsorship of certifications and training",
./src/components/AssessmentList.tsx:      "Defined career advancement pathways"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Work-Life Balance",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Flexible work hours and policies",
./src/components/AssessmentList.tsx:      "Support for mental health and well-being"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Compensation and Benefits",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Fair and competitive salary",
./src/components/AssessmentList.tsx:      "Comprehensive benefits package (e.g., health, retirement, perks)"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Trial Periods or Onboarding",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Strong onboarding support",
./src/components/AssessmentList.tsx:      "Fair and constructive probationary reviews"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  },
./src/components/AssessmentList.tsx:  {
./src/components/AssessmentList.tsx:    category: "Other Considerations",
./src/components/AssessmentList.tsx:    factors: [
./src/components/AssessmentList.tsx:      "Welcoming workplace culture",
./src/components/AssessmentList.tsx:      "Flexibility for relocation",
./src/components/AssessmentList.tsx:      "Understanding of career transitions"
./src/components/AssessmentList.tsx:    ]
./src/components/AssessmentList.tsx:  }
./src/components/AssessmentList.tsx:];
./src/components/AssessmentList.tsx:
./src/components/AssessmentList.tsx:export function AssessmentList() {
./src/components/AssessmentList.tsx:  return (
./src/components/AssessmentList.tsx:    <div className="space-y-8">
./src/components/AssessmentList.tsx:      <motion.div 
./src/components/AssessmentList.tsx:        initial={{ opacity: 0, y: 20 }}
./src/components/AssessmentList.tsx:        animate={{ opacity: 1, y: 0 }}
./src/components/AssessmentList.tsx:        transition={{ delay: 0.3, duration: 0.5 }}
./src/components/AssessmentList.tsx:        className="grid grid-cols-1 md:grid-cols-2 gap-6"
./src/components/AssessmentList.tsx:      >
./src/components/AssessmentList.tsx:        {assessmentData.map((item, index) => (
./src/components/AssessmentList.tsx:          <motion.div
./src/components/AssessmentList.tsx:            key={item.category}
./src/components/AssessmentList.tsx:            initial={{ opacity: 0, y: 20 }}
./src/components/AssessmentList.tsx:            animate={{ opacity: 1, y: 0 }}
./src/components/AssessmentList.tsx:            transition={{ delay: 0.1 * index, duration: 0.5 }}
./src/components/AssessmentList.tsx:            className="backdrop-blur-sm bg-white/5 rounded-xl p-6 border border-white/10 hover:bg-white/10 transition-colors"
./src/components/AssessmentList.tsx:          >
./src/components/AssessmentList.tsx:            <h3 className="text-xl font-semibold text-blue-200 mb-4">
./src/components/AssessmentList.tsx:              {item.category}
./src/components/AssessmentList.tsx:            </h3>
./src/components/AssessmentList.tsx:            <ul className="space-y-2">
./src/components/AssessmentList.tsx:              {item.factors.map((factor, factorIndex) => (
./src/components/AssessmentList.tsx:                <motion.li
./src/components/AssessmentList.tsx:                  key={factorIndex}
./src/components/AssessmentList.tsx:                  initial={{ opacity: 0, x: -20 }}
./src/components/AssessmentList.tsx:                  animate={{ opacity: 1, x: 0 }}
./src/components/AssessmentList.tsx:                  transition={{ delay: 0.1 * factorIndex + 0.1 * index, duration: 0.3 }}
./src/components/AssessmentList.tsx:                  className="text-gray-300 flex items-start"
./src/components/AssessmentList.tsx:                >
./src/components/AssessmentList.tsx:                  <span className="text-blue-300 mr-2">•</span>
./src/components/AssessmentList.tsx:                  {factor}
./src/components/AssessmentList.tsx:                </motion.li>
./src/components/AssessmentList.tsx:              ))}
./src/components/AssessmentList.tsx:            </ul>
./src/components/AssessmentList.tsx:          </motion.div>
./src/components/AssessmentList.tsx:        ))}
./src/components/AssessmentList.tsx:      </motion.div>
./src/components/AssessmentList.tsx:    </div>
./src/components/AssessmentList.tsx:  );
./src/components/AssessmentList.tsx:}
./src/components/Auth/SignIn.tsx:'use client';
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:import { useState } from 'react';
./src/components/Auth/SignIn.tsx:import { useRouter } from 'next/navigation';
./src/components/Auth/SignIn.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:export function SignIn() {
./src/components/Auth/SignIn.tsx:  const [email, setEmail] = useState('');
./src/components/Auth/SignIn.tsx:  const [password, setPassword] = useState('');
./src/components/Auth/SignIn.tsx:  const [error, setError] = useState<string | null>(null);
./src/components/Auth/SignIn.tsx:  const [isLoading, setIsLoading] = useState(false);
./src/components/Auth/SignIn.tsx:  const router = useRouter();
./src/components/Auth/SignIn.tsx:  const { signIn, signInWithGoogle } = useAuth();
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:  const handleSubmit = async (e: React.FormEvent) => {
./src/components/Auth/SignIn.tsx:    e.preventDefault();
./src/components/Auth/SignIn.tsx:    setIsLoading(true);
./src/components/Auth/SignIn.tsx:    setError(null);
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:    try {
./src/components/Auth/SignIn.tsx:      await signIn(email, password);
./src/components/Auth/SignIn.tsx:      router.push('/');
./src/components/Auth/SignIn.tsx:    } catch (error) {
./src/components/Auth/SignIn.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during sign in');
./src/components/Auth/SignIn.tsx:    } finally {
./src/components/Auth/SignIn.tsx:      setIsLoading(false);
./src/components/Auth/SignIn.tsx:    }
./src/components/Auth/SignIn.tsx:  };
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:  const handleGoogleSignIn = async () => {
./src/components/Auth/SignIn.tsx:    setIsLoading(true);
./src/components/Auth/SignIn.tsx:    setError(null);
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:    try {
./src/components/Auth/SignIn.tsx:      await signInWithGoogle();
./src/components/Auth/SignIn.tsx:      // The redirect will be handled by the callback page
./src/components/Auth/SignIn.tsx:    } catch (error) {
./src/components/Auth/SignIn.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during Google sign in');
./src/components/Auth/SignIn.tsx:      setIsLoading(false);
./src/components/Auth/SignIn.tsx:    }
./src/components/Auth/SignIn.tsx:  };
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:  return (
./src/components/Auth/SignIn.tsx:    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
./src/components/Auth/SignIn.tsx:      <div className="max-w-md w-full space-y-8">
./src/components/Auth/SignIn.tsx:        <div>
./src/components/Auth/SignIn.tsx:          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
./src/components/Auth/SignIn.tsx:            Sign in to your account
./src/components/Auth/SignIn.tsx:          </h2>
./src/components/Auth/SignIn.tsx:        </div>
./src/components/Auth/SignIn.tsx:        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
./src/components/Auth/SignIn.tsx:          <div className="rounded-md shadow-sm -space-y-px">
./src/components/Auth/SignIn.tsx:            <div>
./src/components/Auth/SignIn.tsx:              <label htmlFor="email-address" className="sr-only">
./src/components/Auth/SignIn.tsx:                Email address
./src/components/Auth/SignIn.tsx:              </label>
./src/components/Auth/SignIn.tsx:              <input
./src/components/Auth/SignIn.tsx:                id="email-address"
./src/components/Auth/SignIn.tsx:                name="email"
./src/components/Auth/SignIn.tsx:                type="email"
./src/components/Auth/SignIn.tsx:                autoComplete="email"
./src/components/Auth/SignIn.tsx:                required
./src/components/Auth/SignIn.tsx:                value={email}
./src/components/Auth/SignIn.tsx:                onChange={(e) => setEmail(e.target.value)}
./src/components/Auth/SignIn.tsx:                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm dark:bg-gray-800 dark:border-gray-700 dark:text-white"
./src/components/Auth/SignIn.tsx:                placeholder="Email address"
./src/components/Auth/SignIn.tsx:              />
./src/components/Auth/SignIn.tsx:            </div>
./src/components/Auth/SignIn.tsx:            <div>
./src/components/Auth/SignIn.tsx:              <label htmlFor="password" className="sr-only">
./src/components/Auth/SignIn.tsx:                Password
./src/components/Auth/SignIn.tsx:              </label>
./src/components/Auth/SignIn.tsx:              <input
./src/components/Auth/SignIn.tsx:                id="password"
./src/components/Auth/SignIn.tsx:                name="password"
./src/components/Auth/SignIn.tsx:                type="password"
./src/components/Auth/SignIn.tsx:                autoComplete="current-password"
./src/components/Auth/SignIn.tsx:                required
./src/components/Auth/SignIn.tsx:                value={password}
./src/components/Auth/SignIn.tsx:                onChange={(e) => setPassword(e.target.value)}
./src/components/Auth/SignIn.tsx:                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm dark:bg-gray-800 dark:border-gray-700 dark:text-white"
./src/components/Auth/SignIn.tsx:                placeholder="Password"
./src/components/Auth/SignIn.tsx:              />
./src/components/Auth/SignIn.tsx:            </div>
./src/components/Auth/SignIn.tsx:          </div>
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:          {error && (
./src/components/Auth/SignIn.tsx:            <div className="text-red-500 text-sm text-center">{error}</div>
./src/components/Auth/SignIn.tsx:          )}
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:          <div>
./src/components/Auth/SignIn.tsx:            <button
./src/components/Auth/SignIn.tsx:              type="submit"
./src/components/Auth/SignIn.tsx:              disabled={isLoading}
./src/components/Auth/SignIn.tsx:              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
./src/components/Auth/SignIn.tsx:            >
./src/components/Auth/SignIn.tsx:              {isLoading ? 'Signing in...' : 'Sign in'}
./src/components/Auth/SignIn.tsx:            </button>
./src/components/Auth/SignIn.tsx:          </div>
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:          <div className="mt-6">
./src/components/Auth/SignIn.tsx:            <div className="relative">
./src/components/Auth/SignIn.tsx:              <div className="absolute inset-0 flex items-center">
./src/components/Auth/SignIn.tsx:                <div className="w-full border-t border-gray-300 dark:border-gray-700"></div>
./src/components/Auth/SignIn.tsx:              </div>
./src/components/Auth/SignIn.tsx:              <div className="relative flex justify-center text-sm">
./src/components/Auth/SignIn.tsx:                <span className="px-2 bg-gray-50 dark:bg-gray-900 text-gray-500 dark:text-gray-400">
./src/components/Auth/SignIn.tsx:                  Or continue with
./src/components/Auth/SignIn.tsx:                </span>
./src/components/Auth/SignIn.tsx:              </div>
./src/components/Auth/SignIn.tsx:            </div>
./src/components/Auth/SignIn.tsx:
./src/components/Auth/SignIn.tsx:            <div className="mt-6">
./src/components/Auth/SignIn.tsx:              <button
./src/components/Auth/SignIn.tsx:                type="button"
./src/components/Auth/SignIn.tsx:                onClick={handleGoogleSignIn}
./src/components/Auth/SignIn.tsx:                disabled={isLoading}
./src/components/Auth/SignIn.tsx:                className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-700 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
./src/components/Auth/SignIn.tsx:              >
./src/components/Auth/SignIn.tsx:                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
./src/components/Auth/SignIn.tsx:                  <path
./src/components/Auth/SignIn.tsx:                    fill="currentColor"
./src/components/Auth/SignIn.tsx:                    d="M12.545,10.239v3.821h5.445c-0.712,2.315-2.647,3.972-5.445,3.972c-3.332,0-6.033-2.701-6.033-6.032s2.701-6.032,6.033-6.032c1.498,0,2.866,0.549,3.921,1.453l2.814-2.814C17.503,2.988,15.139,2,12.545,2C7.021,2,2.543,6.477,2.543,12s4.478,10,10.002,10c8.396,0,10.249-7.85,9.426-11.748L12.545,10.239z"
./src/components/Auth/SignIn.tsx:                  />
./src/components/Auth/SignIn.tsx:                </svg>
./src/components/Auth/SignIn.tsx:                Sign in with Google
./src/components/Auth/SignIn.tsx:              </button>
./src/components/Auth/SignIn.tsx:            </div>
./src/components/Auth/SignIn.tsx:          </div>
./src/components/Auth/SignIn.tsx:        </form>
./src/components/Auth/SignIn.tsx:      </div>
./src/components/Auth/SignIn.tsx:    </div>
./src/components/Auth/SignIn.tsx:  );
./src/components/Auth/SignIn.tsx:} 
./src/components/Auth.tsx:'use client'
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { useState } from 'react';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { useRouter } from 'next/navigation';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { AuthError } from '@supabase/supabase-js';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { Eye, EyeOff } from 'lucide-react';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { createClient } from '@/lib/supabaseClient';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { Button } from '@/components/ui/button';
./src/components/Auth.tsx:import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
./src/components/Auth.tsx:import { Input } from '@/components/ui/input';
./src/components/Auth.tsx:import { Label } from '@/components/ui/label';
./src/components/Auth.tsx:
./src/components/Auth.tsx:import { AuthError as CustomAuthError } from '@/types/auth';
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:
./src/components/Auth.tsx:export default function Auth() {
./src/components/Auth.tsx:  const [email, setEmail] = useState('');
./src/components/Auth.tsx:  const [password, setPassword] = useState('');
./src/components/Auth.tsx:  const [isSignUp, setIsSignUp] = useState(false);
./src/components/Auth.tsx:  const [error, setError] = useState<string | null>(null);
./src/components/Auth.tsx:  const [showPassword, setShowPassword] = useState(false);
./src/components/Auth.tsx:  const [emailSent, setEmailSent] = useState(false);
./src/components/Auth.tsx:  const [isForgotPassword, setIsForgotPassword] = useState(false);
./src/components/Auth.tsx:  const [resetEmailSent, setResetEmailSent] = useState(false);
./src/components/Auth.tsx:  const { signIn, signUp, isLoading } = useAuth();
./src/components/Auth.tsx:  const router = useRouter();
./src/components/Auth.tsx:  const supabase = createClient();
./src/components/Auth.tsx:
./src/components/Auth.tsx:  // Password validation function
./src/components/Auth.tsx:  const validatePassword = (password: string) => {
./src/components/Auth.tsx:    if (password.length < 8) return 'Password must be at least 8 characters';
./src/components/Auth.tsx:    if (!/[A-Z]/.test(password)) return 'Password must contain an uppercase letter';
./src/components/Auth.tsx:    if (!/[a-z]/.test(password)) return 'Password must contain a lowercase letter';
./src/components/Auth.tsx:    if (!/[0-9]/.test(password)) return 'Password must contain a number';
./src/components/Auth.tsx:    return null;
./src/components/Auth.tsx:  };
./src/components/Auth.tsx:
./src/components/Auth.tsx:  const handleForgotPassword = async (e: React.FormEvent) => {
./src/components/Auth.tsx:    e.preventDefault();
./src/components/Auth.tsx:    setError(null);
./src/components/Auth.tsx:
./src/components/Auth.tsx:    if (!email) {
./src/components/Auth.tsx:      setError('Please enter your email address');
./src/components/Auth.tsx:      return;
./src/components/Auth.tsx:    }
./src/components/Auth.tsx:
./src/components/Auth.tsx:    try {
./src/components/Auth.tsx:      const { error } = await supabase.auth.resetPasswordForEmail(email, {
./src/components/Auth.tsx:        redirectTo: `${window.location.origin}/auth/reset-password`,
./src/components/Auth.tsx:      });
./src/components/Auth.tsx:
./src/components/Auth.tsx:      if (error) throw error;
./src/components/Auth.tsx:      setResetEmailSent(true);
./src/components/Auth.tsx:    } catch (error) {
./src/components/Auth.tsx:      console.error('Reset password error:', error);
./src/components/Auth.tsx:      setError(error instanceof Error ? error.message : 'Failed to send reset email. Please try again.');
./src/components/Auth.tsx:    }
./src/components/Auth.tsx:  };
./src/components/Auth.tsx:
./src/components/Auth.tsx:  const handleAuth = async (e: React.FormEvent) => {
./src/components/Auth.tsx:    e.preventDefault();
./src/components/Auth.tsx:    setError(null);
./src/components/Auth.tsx:
./src/components/Auth.tsx:    try {
./src/components/Auth.tsx:      if (isSignUp) {
./src/components/Auth.tsx:        const passwordError = validatePassword(password);
./src/components/Auth.tsx:        if (passwordError) {
./src/components/Auth.tsx:          setError(passwordError);
./src/components/Auth.tsx:          return;
./src/components/Auth.tsx:        }
./src/components/Auth.tsx:
./src/components/Auth.tsx:        const { data, error } = await signUp(email, password);
./src/components/Auth.tsx:        
./src/components/Auth.tsx:        console.log('Signup response:', { data, error });
./src/components/Auth.tsx:        
./src/components/Auth.tsx:        if (error) {
./src/components/Auth.tsx:          if (error.message === 'Email address already taken') {
./src/components/Auth.tsx:            setError('An account with this email already exists. Please sign in instead.');
./src/components/Auth.tsx:            setIsSignUp(false);
./src/components/Auth.tsx:            return;
./src/components/Auth.tsx:          }
./src/components/Auth.tsx:          setError(error.message);
./src/components/Auth.tsx:          return;
./src/components/Auth.tsx:        }
./src/components/Auth.tsx:
./src/components/Auth.tsx:        if (data?.user && !data.user.email_confirmed_at) {
./src/components/Auth.tsx:          setEmailSent(true);
./src/components/Auth.tsx:        } else {
./src/components/Auth.tsx:          router.push('/');
./src/components/Auth.tsx:        }
./src/components/Auth.tsx:      } else {
./src/components/Auth.tsx:        try {
./src/components/Auth.tsx:          await signIn(email, password);
./src/components/Auth.tsx:          router.push('/');
./src/components/Auth.tsx:        } catch (error) {
./src/components/Auth.tsx:          console.error('Sign in error:', error);
./src/components/Auth.tsx:          if (error instanceof AuthError || (error as CustomAuthError).message) {
./src/components/Auth.tsx:            const authError = error as AuthError | CustomAuthError;
./src/components/Auth.tsx:            if (authError.message?.toLowerCase().includes('invalid login credentials')) {
./src/components/Auth.tsx:              setError('Invalid email or password. Please try again.');
./src/components/Auth.tsx:            } else if (authError.message?.toLowerCase().includes('email not confirmed')) {
./src/components/Auth.tsx:              setError('Please confirm your email address before signing in.');
./src/components/Auth.tsx:            } else {
./src/components/Auth.tsx:              setError(authError.message);
./src/components/Auth.tsx:            }
./src/components/Auth.tsx:          } else {
./src/components/Auth.tsx:            setError('Sign in failed. Please try again.');
./src/components/Auth.tsx:          }
./src/components/Auth.tsx:        }
./src/components/Auth.tsx:      }
./src/components/Auth.tsx:    } catch (error) {
./src/components/Auth.tsx:      console.error('Auth error:', error);
./src/components/Auth.tsx:      if (error instanceof Error || (error as CustomAuthError).message) {
./src/components/Auth.tsx:        setError((error as Error | CustomAuthError).message);
./src/components/Auth.tsx:      } else {
./src/components/Auth.tsx:        setError('Authentication failed. Please try again.');
./src/components/Auth.tsx:      }
./src/components/Auth.tsx:    }
./src/components/Auth.tsx:  };
./src/components/Auth.tsx:
./src/components/Auth.tsx:  // Add handler for mode switch - only clear password on manual mode switch
./src/components/Auth.tsx:  const handleModeSwitch = () => {
./src/components/Auth.tsx:    setIsSignUp(!isSignUp);
./src/components/Auth.tsx:    setError(null);
./src/components/Auth.tsx:    setPassword(''); // Only clear password on manual mode switch
./src/components/Auth.tsx:  };
./src/components/Auth.tsx:
./src/components/Auth.tsx:  if (resetEmailSent) {
./src/components/Auth.tsx:    return (
./src/components/Auth.tsx:      <Card className="w-full max-w-md mx-auto">
./src/components/Auth.tsx:        <CardHeader>
./src/components/Auth.tsx:          <CardTitle>Check Your Email</CardTitle>
./src/components/Auth.tsx:        </CardHeader>
./src/components/Auth.tsx:        <CardContent className="space-y-4">
./src/components/Auth.tsx:          <p>We&apos;ve sent a password reset link to <strong>{email}</strong></p>
./src/components/Auth.tsx:          <p>Please check your email and click the link to reset your password.</p>
./src/components/Auth.tsx:          <p className="text-sm text-muted-foreground">
./src/components/Auth.tsx:            Can&apos;t find the email? Check your spam folder or{' '}
./src/components/Auth.tsx:            <Button
./src/components/Auth.tsx:              variant="link"
./src/components/Auth.tsx:              className="p-0 h-auto"
./src/components/Auth.tsx:              onClick={() => {
./src/components/Auth.tsx:                setResetEmailSent(false);
./src/components/Auth.tsx:                setIsForgotPassword(false);
./src/components/Auth.tsx:              }}
./src/components/Auth.tsx:            >
./src/components/Auth.tsx:              try again
./src/components/Auth.tsx:            </Button>
./src/components/Auth.tsx:          </p>
./src/components/Auth.tsx:        </CardContent>
./src/components/Auth.tsx:      </Card>
./src/components/Auth.tsx:    );
./src/components/Auth.tsx:  }
./src/components/Auth.tsx:
./src/components/Auth.tsx:  if (isForgotPassword) {
./src/components/Auth.tsx:    return (
./src/components/Auth.tsx:      <Card className="w-full max-w-md mx-auto">
./src/components/Auth.tsx:        <CardHeader>
./src/components/Auth.tsx:          <CardTitle>Reset Password</CardTitle>
./src/components/Auth.tsx:        </CardHeader>
./src/components/Auth.tsx:        <CardContent>
./src/components/Auth.tsx:          <form onSubmit={handleForgotPassword} className="space-y-4">
./src/components/Auth.tsx:            <div className="space-y-2">
./src/components/Auth.tsx:              <Label htmlFor="email">Email</Label>
./src/components/Auth.tsx:              <Input
./src/components/Auth.tsx:                id="email"
./src/components/Auth.tsx:                type="email"
./src/components/Auth.tsx:                value={email}
./src/components/Auth.tsx:                onChange={(e) => setEmail(e.target.value)}
./src/components/Auth.tsx:                required
./src/components/Auth.tsx:                autoComplete="email"
./src/components/Auth.tsx:              />
./src/components/Auth.tsx:            </div>
./src/components/Auth.tsx:            {error && <p className="text-sm text-red-500">{error}</p>}
./src/components/Auth.tsx:            <Button type="submit" className="w-full" disabled={isLoading}>
./src/components/Auth.tsx:              {isLoading ? 'Sending...' : 'Send Reset Link'}
./src/components/Auth.tsx:            </Button>
./src/components/Auth.tsx:            <Button
./src/components/Auth.tsx:              type="button"
./src/components/Auth.tsx:              variant="link"
./src/components/Auth.tsx:              className="w-full"
./src/components/Auth.tsx:              onClick={() => setIsForgotPassword(false)}
./src/components/Auth.tsx:            >
./src/components/Auth.tsx:              Back to Sign In
./src/components/Auth.tsx:            </Button>
./src/components/Auth.tsx:          </form>
./src/components/Auth.tsx:        </CardContent>
./src/components/Auth.tsx:      </Card>
./src/components/Auth.tsx:    );
./src/components/Auth.tsx:  }
./src/components/Auth.tsx:
./src/components/Auth.tsx:  if (emailSent) {
./src/components/Auth.tsx:    return (
./src/components/Auth.tsx:      <Card className="w-full max-w-md mx-auto">
./src/components/Auth.tsx:        <CardHeader>
./src/components/Auth.tsx:          <CardTitle>Check Your Email</CardTitle>
./src/components/Auth.tsx:        </CardHeader>
./src/components/Auth.tsx:        <CardContent className="space-y-4">
./src/components/Auth.tsx:          <p>We&apos;ve sent a confirmation link to <strong>{email}</strong></p>
./src/components/Auth.tsx:          <p>Please check your email and click the link to complete your registration.</p>
./src/components/Auth.tsx:          <p className="text-sm text-muted-foreground">
./src/components/Auth.tsx:            Can&apos;t find the email? Check your spam folder or{' '}
./src/components/Auth.tsx:            <Button
./src/components/Auth.tsx:              variant="link"
./src/components/Auth.tsx:              className="p-0 h-auto"
./src/components/Auth.tsx:              onClick={() => setEmailSent(false)}
./src/components/Auth.tsx:            >
./src/components/Auth.tsx:              try signing up again
./src/components/Auth.tsx:            </Button>
./src/components/Auth.tsx:          </p>
./src/components/Auth.tsx:        </CardContent>
./src/components/Auth.tsx:      </Card>
./src/components/Auth.tsx:    );
./src/components/Auth.tsx:  }
./src/components/Auth.tsx:
./src/components/Auth.tsx:  return (
./src/components/Auth.tsx:    <Card className="max-w-md mx-auto mt-8">
./src/components/Auth.tsx:      <CardHeader>
./src/components/Auth.tsx:        <CardTitle className="text-center">{isSignUp ? 'Sign Up' : 'Sign In'}</CardTitle>
./src/components/Auth.tsx:      </CardHeader>
./src/components/Auth.tsx:      <CardContent>
./src/components/Auth.tsx:        <form onSubmit={handleAuth} className="space-y-4">
./src/components/Auth.tsx:          <div className="space-y-2">
./src/components/Auth.tsx:            <Label htmlFor="email">Email</Label>
./src/components/Auth.tsx:            <Input
./src/components/Auth.tsx:              id="email"
./src/components/Auth.tsx:              type="email"
./src/components/Auth.tsx:              value={email}
./src/components/Auth.tsx:              onChange={(e) => setEmail(e.target.value)}
./src/components/Auth.tsx:              required
./src/components/Auth.tsx:              autoComplete="email"
./src/components/Auth.tsx:            />
./src/components/Auth.tsx:          </div>
./src/components/Auth.tsx:          <div className="space-y-2">
./src/components/Auth.tsx:            <div className="flex justify-between items-center">
./src/components/Auth.tsx:              <Label htmlFor="password">Password</Label>
./src/components/Auth.tsx:              {!isSignUp && (
./src/components/Auth.tsx:                <Button
./src/components/Auth.tsx:                  type="button"
./src/components/Auth.tsx:                  variant="link"
./src/components/Auth.tsx:                  className="px-0 h-auto text-sm"
./src/components/Auth.tsx:                  onClick={() => setIsForgotPassword(true)}
./src/components/Auth.tsx:                >
./src/components/Auth.tsx:                  Forgot password?
./src/components/Auth.tsx:                </Button>
./src/components/Auth.tsx:              )}
./src/components/Auth.tsx:            </div>
./src/components/Auth.tsx:            <div className="relative">
./src/components/Auth.tsx:              <Input
./src/components/Auth.tsx:                id="password"
./src/components/Auth.tsx:                type={showPassword ? 'text' : 'password'}
./src/components/Auth.tsx:                value={password}
./src/components/Auth.tsx:                onChange={(e) => {
./src/components/Auth.tsx:                  setPassword(e.target.value);
./src/components/Auth.tsx:                  if (isSignUp) {
./src/components/Auth.tsx:                    const validationError = validatePassword(e.target.value);
./src/components/Auth.tsx:                    setError(validationError || null);
./src/components/Auth.tsx:                  }
./src/components/Auth.tsx:                }}
./src/components/Auth.tsx:                required
./src/components/Auth.tsx:                autoComplete={isSignUp ? 'new-password' : 'current-password'}
./src/components/Auth.tsx:                autoFocus={!isSignUp && email !== ''}
./src/components/Auth.tsx:              />
./src/components/Auth.tsx:              <Button
./src/components/Auth.tsx:                type="button"
./src/components/Auth.tsx:                variant="ghost"
./src/components/Auth.tsx:                size="sm"
./src/components/Auth.tsx:                className="absolute right-0 top-0 h-full px-3"
./src/components/Auth.tsx:                onClick={() => setShowPassword(!showPassword)}
./src/components/Auth.tsx:              >
./src/components/Auth.tsx:                {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
./src/components/Auth.tsx:              </Button>
./src/components/Auth.tsx:            </div>
./src/components/Auth.tsx:            {error && <p className="text-sm text-red-500">{error}</p>}
./src/components/Auth.tsx:          </div>
./src/components/Auth.tsx:          <Button type="submit" className="w-full" disabled={isLoading}>
./src/components/Auth.tsx:            {isLoading ? 'Loading...' : isSignUp ? 'Sign Up' : 'Sign In'}
./src/components/Auth.tsx:          </Button>
./src/components/Auth.tsx:          <Button
./src/components/Auth.tsx:            type="button"
./src/components/Auth.tsx:            variant="link"
./src/components/Auth.tsx:            className="w-full"
./src/components/Auth.tsx:            onClick={handleModeSwitch}
./src/components/Auth.tsx:          >
./src/components/Auth.tsx:            {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
./src/components/Auth.tsx:          </Button>
./src/components/Auth.tsx:        </form>
./src/components/Auth.tsx:      </CardContent>
./src/components/Auth.tsx:    </Card>
./src/components/Auth.tsx:  );
./src/components/Auth.tsx:}
./src/components/companies/CompanyActions.tsx:'use client'
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:import { useState } from 'react';
./src/components/companies/CompanyActions.tsx:import { useRouter } from 'next/navigation';
./src/components/companies/CompanyActions.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/companies/CompanyActions.tsx:import { Button } from '@/components/ui/button';
./src/components/companies/CompanyActions.tsx:import { X } from 'lucide-react';
./src/components/companies/CompanyActions.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/components/companies/CompanyActions.tsx:import { supabase } from '@/lib/supabaseClient';
./src/components/companies/CompanyActions.tsx:import type { Company } from '@/types/database';
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:interface CompanyActionsProps {
./src/components/companies/CompanyActions.tsx:  company: Company;
./src/components/companies/CompanyActions.tsx:}
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:export function CompanyActions({ company }: CompanyActionsProps) {
./src/components/companies/CompanyActions.tsx:  const [showAddReview, setShowAddReview] = useState(false);
./src/components/companies/CompanyActions.tsx:  const { user } = useAuth();
./src/components/companies/CompanyActions.tsx:  const router = useRouter();
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:  const handleWriteReview = () => {
./src/components/companies/CompanyActions.tsx:    if (!user) {
./src/components/companies/CompanyActions.tsx:      router.push('/auth/signin');
./src/components/companies/CompanyActions.tsx:      return;
./src/components/companies/CompanyActions.tsx:    }
./src/components/companies/CompanyActions.tsx:    setShowAddReview(true);
./src/components/companies/CompanyActions.tsx:  };
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:  return (
./src/components/companies/CompanyActions.tsx:    <>
./src/components/companies/CompanyActions.tsx:      <div className="flex gap-4">
./src/components/companies/CompanyActions.tsx:        <Button
./src/components/companies/CompanyActions.tsx:          onClick={handleWriteReview}
./src/components/companies/CompanyActions.tsx:          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors"
./src/components/companies/CompanyActions.tsx:        >
./src/components/companies/CompanyActions.tsx:          Write a Review
./src/components/companies/CompanyActions.tsx:        </Button>
./src/components/companies/CompanyActions.tsx:      </div>
./src/components/companies/CompanyActions.tsx:
./src/components/companies/CompanyActions.tsx:      {showAddReview && (
./src/components/companies/CompanyActions.tsx:        <div className="fixed inset-0 overflow-hidden z-50">
./src/components/companies/CompanyActions.tsx:          <div className="absolute inset-0 overflow-hidden">
./src/components/companies/CompanyActions.tsx:            <div className="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
./src/components/companies/CompanyActions.tsx:              onClick={() => setShowAddReview(false)}
./src/components/companies/CompanyActions.tsx:            />
./src/components/companies/CompanyActions.tsx:            <div className="fixed inset-y-0 right-0 pl-10 max-w-full flex animate-slide-in-right">
./src/components/companies/CompanyActions.tsx:              <div className="relative w-screen max-w-2xl">
./src/components/companies/CompanyActions.tsx:                <div className="h-full flex flex-col bg-white dark:bg-gray-900 shadow-xl">
./src/components/companies/CompanyActions.tsx:                  <div className="flex-1 h-0 overflow-y-auto">
./src/components/companies/CompanyActions.tsx:                    <div className="py-6 px-4 sm:px-6">
./src/components/companies/CompanyActions.tsx:                      <div className="flex items-start justify-between">
./src/components/companies/CompanyActions.tsx:                        <div>
./src/components/companies/CompanyActions.tsx:                          <h2 className="text-lg font-medium text-gray-900 dark:text-white">
./src/components/companies/CompanyActions.tsx:                            Write a Review
./src/components/companies/CompanyActions.tsx:                          </h2>
./src/components/companies/CompanyActions.tsx:                          <p className="mt-1 text-sm text-gray-500">
./src/components/companies/CompanyActions.tsx:                            for {company.name}
./src/components/companies/CompanyActions.tsx:                          </p>
./src/components/companies/CompanyActions.tsx:                        </div>
./src/components/companies/CompanyActions.tsx:                        <Button
./src/components/companies/CompanyActions.tsx:                          variant="ghost"
./src/components/companies/CompanyActions.tsx:                          size="icon"
./src/components/companies/CompanyActions.tsx:                          onClick={() => setShowAddReview(false)}
./src/components/companies/CompanyActions.tsx:                        >
./src/components/companies/CompanyActions.tsx:                          <X className="h-6 w-6" />
./src/components/companies/CompanyActions.tsx:                        </Button>
./src/components/companies/CompanyActions.tsx:                      </div>
./src/components/companies/CompanyActions.tsx:                      <div className="mt-6">
./src/components/companies/CompanyActions.tsx:                        <ReviewForm
./src/components/companies/CompanyActions.tsx:                          companyId={company.id}
./src/components/companies/CompanyActions.tsx:                          onSuccess={() => {
./src/components/companies/CompanyActions.tsx:                            setShowAddReview(false);
./src/components/companies/CompanyActions.tsx:                            router.refresh();
./src/components/companies/CompanyActions.tsx:                          }}
./src/components/companies/CompanyActions.tsx:                          onSubmit={async (data) => {
./src/components/companies/CompanyActions.tsx:                            try {
./src/components/companies/CompanyActions.tsx:                              const { error } = await supabase
./src/components/companies/CompanyActions.tsx:                                .from('reviews')
./src/components/companies/CompanyActions.tsx:                                .insert({ ...data, company_id: company.id });
./src/components/companies/CompanyActions.tsx:                              
./src/components/companies/CompanyActions.tsx:                              if (error) throw error;
./src/components/companies/CompanyActions.tsx:                              return Promise.resolve();
./src/components/companies/CompanyActions.tsx:                            } catch (error) {
./src/components/companies/CompanyActions.tsx:                              return Promise.reject(error);
./src/components/companies/CompanyActions.tsx:                            }
./src/components/companies/CompanyActions.tsx:                          }}
./src/components/companies/CompanyActions.tsx:                        />
./src/components/companies/CompanyActions.tsx:                      </div>
./src/components/companies/CompanyActions.tsx:                    </div>
./src/components/companies/CompanyActions.tsx:                  </div>
./src/components/companies/CompanyActions.tsx:                </div>
./src/components/companies/CompanyActions.tsx:              </div>
./src/components/companies/CompanyActions.tsx:            </div>
./src/components/companies/CompanyActions.tsx:          </div>
./src/components/companies/CompanyActions.tsx:        </div>
./src/components/companies/CompanyActions.tsx:      )}
./src/components/companies/CompanyActions.tsx:    </>
./src/components/companies/CompanyActions.tsx:  );
./src/components/companies/CompanyActions.tsx:}
./src/components/companies/CompanyHeader.tsx:'use client'
./src/components/companies/CompanyHeader.tsx:
./src/components/companies/CompanyHeader.tsx:import type { Database } from '@/types/supabase';
./src/components/companies/CompanyHeader.tsx:
./src/components/companies/CompanyHeader.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/components/companies/CompanyHeader.tsx:
./src/components/companies/CompanyHeader.tsx:export default function CompanyHeader({ company }: { company: Company }) {
./src/components/companies/CompanyHeader.tsx:  return (
./src/components/companies/CompanyHeader.tsx:    <div className="p-4">
./src/components/companies/CompanyHeader.tsx:      <h2 className="text-xl font-bold">{company.name}</h2>
./src/components/companies/CompanyHeader.tsx:      <p className="text-gray-600">{company.industry}</p>
./src/components/companies/CompanyHeader.tsx:      {company.location && <p className="text-sm text-gray-500">{company.location}</p>}
./src/components/companies/CompanyHeader.tsx:    </div>
./src/components/companies/CompanyHeader.tsx:  );
./src/components/companies/CompanyHeader.tsx:}
./src/components/companies/CompanyList.tsx:'use client'
./src/components/companies/CompanyList.tsx:
./src/components/companies/CompanyList.tsx:import type { Database } from '@/types/supabase';
./src/components/companies/CompanyList.tsx:
./src/components/companies/CompanyList.tsx:import { CompanyCard } from '../CompanyCard';
./src/components/companies/CompanyList.tsx:
./src/components/companies/CompanyList.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/components/companies/CompanyList.tsx:
./src/components/companies/CompanyList.tsx:export function CompanyList({ companies }: { companies: Company[] }) {
./src/components/companies/CompanyList.tsx:  return (
./src/components/companies/CompanyList.tsx:    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
./src/components/companies/CompanyList.tsx:      {companies.map(company => (
./src/components/companies/CompanyList.tsx:        <CompanyCard key={company.id} company={company} />
./src/components/companies/CompanyList.tsx:      ))}
./src/components/companies/CompanyList.tsx:    </div>
./src/components/companies/CompanyList.tsx:  );
./src/components/companies/CompanyList.tsx:}
./src/components/companies/CompanyStats.tsx:import type { Company } from '@/types/database';
./src/components/companies/CompanyStats.tsx:import { StatCard } from '@/components/ui/StatCard';
./src/components/companies/CompanyStats.tsx:
./src/components/companies/CompanyStats.tsx:interface CompanyStatsProps {
./src/components/companies/CompanyStats.tsx:  company: Company;
./src/components/companies/CompanyStats.tsx:}
./src/components/companies/CompanyStats.tsx:
./src/components/companies/CompanyStats.tsx:export function CompanyStats({ company }: CompanyStatsProps) {
./src/components/companies/CompanyStats.tsx:  const rating = company.average_rating || 0;
./src/components/companies/CompanyStats.tsx:  const totalReviews = company.total_reviews || 0;
./src/components/companies/CompanyStats.tsx:  const recommendationRate = company.recommendation_rate || 0;
./src/components/companies/CompanyStats.tsx:
./src/components/companies/CompanyStats.tsx:  return (
./src/components/companies/CompanyStats.tsx:    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
./src/components/companies/CompanyStats.tsx:      <StatCard
./src/components/companies/CompanyStats.tsx:        label="Overall Rating"
./src/components/companies/CompanyStats.tsx:        value={rating}
./src/components/companies/CompanyStats.tsx:        type="rating"
./src/components/companies/CompanyStats.tsx:        description={`Based on ${totalReviews} reviews`}
./src/components/companies/CompanyStats.tsx:      />
./src/components/companies/CompanyStats.tsx:      <StatCard
./src/components/companies/CompanyStats.tsx:        label="Reviews"
./src/components/companies/CompanyStats.tsx:        value={totalReviews}
./src/components/companies/CompanyStats.tsx:        type="number"
./src/components/companies/CompanyStats.tsx:        description="Total reviews submitted"
./src/components/companies/CompanyStats.tsx:      />
./src/components/companies/CompanyStats.tsx:      <StatCard
./src/components/companies/CompanyStats.tsx:        label="Recommendation Rate"
./src/components/companies/CompanyStats.tsx:        value={recommendationRate}
./src/components/companies/CompanyStats.tsx:        type="percentage"
./src/components/companies/CompanyStats.tsx:        description="Would recommend to others"
./src/components/companies/CompanyStats.tsx:      />
./src/components/companies/CompanyStats.tsx:    </div>
./src/components/companies/CompanyStats.tsx:  );
./src/components/companies/CompanyStats.tsx:}
./src/components/CompanyCard.tsx:'use client'
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:import { useState, useEffect } from 'react';
./src/components/CompanyCard.tsx:import Link from 'next/link';
./src/components/CompanyCard.tsx:import { StarIcon, MapPinIcon, UsersIcon } from '@heroicons/react/24/solid';
./src/components/CompanyCard.tsx:import { BriefcaseIcon } from '@heroicons/react/24/outline';
./src/components/CompanyCard.tsx:import type { Database } from '@/types/supabase';
./src/components/CompanyCard.tsx:import { Button } from './ui/button';
./src/components/CompanyCard.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/CompanyCard.tsx:import { useRouter } from 'next/navigation';
./src/components/CompanyCard.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/components/CompanyCard.tsx:import { X } from 'lucide-react';
./src/components/CompanyCard.tsx:import { motion } from 'framer-motion';
./src/components/CompanyCard.tsx:import { toast } from 'sonner';
./src/components/CompanyCard.tsx:import { supabase } from '@/lib/supabaseClient';
./src/components/CompanyCard.tsx:import { CompanyActions } from './companies/CompanyActions';
./src/components/CompanyCard.tsx:import Image from 'next/image';
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:type CompanyRow = Database['public']['Tables']['companies']['Row'];
./src/components/CompanyCard.tsx:type ReviewRow = Database['public']['Tables']['reviews']['Row'];
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:interface CompanyWithReviews extends CompanyRow {
./src/components/CompanyCard.tsx:  reviews: ReviewRow[];
./src/components/CompanyCard.tsx:  average_rating?: number;
./src/components/CompanyCard.tsx:  total_reviews?: number;
./src/components/CompanyCard.tsx:  recommendation_rate?: number;
./src/components/CompanyCard.tsx:}
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:interface CompanyCardProps {
./src/components/CompanyCard.tsx:  company: CompanyWithReviews;
./src/components/CompanyCard.tsx:  showActions?: boolean;
./src/components/CompanyCard.tsx:  isAdmin?: boolean;
./src/components/CompanyCard.tsx:}
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:export function CompanyCard({ company, showActions = true, isAdmin = false }: CompanyCardProps) {
./src/components/CompanyCard.tsx:  const { user } = useAuth();
./src/components/CompanyCard.tsx:  const router = useRouter();
./src/components/CompanyCard.tsx:  const [imageError, setImageError] = useState(false);
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:  const rating = company.average_rating || 0;
./src/components/CompanyCard.tsx:  const totalReviews = company.total_reviews || 0;
./src/components/CompanyCard.tsx:  const fallbackLogo = `/images/company-placeholder.png`;
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:  useEffect(() => {
./src/components/CompanyCard.tsx:    if (!company.logo_url) {
./src/components/CompanyCard.tsx:      setImageError(true);
./src/components/CompanyCard.tsx:    }
./src/components/CompanyCard.tsx:  }, [company.logo_url]);
./src/components/CompanyCard.tsx:
./src/components/CompanyCard.tsx:  return (
./src/components/CompanyCard.tsx:    <>
./src/components/CompanyCard.tsx:      <motion.div
./src/components/CompanyCard.tsx:        initial={{ opacity: 0, y: 20 }}
./src/components/CompanyCard.tsx:        animate={{ opacity: 1, y: 0 }}
./src/components/CompanyCard.tsx:        exit={{ opacity: 0, y: -20 }}
./src/components/CompanyCard.tsx:        className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300"
./src/components/CompanyCard.tsx:      >
./src/components/CompanyCard.tsx:        <div className="p-6">
./src/components/CompanyCard.tsx:          {/* Company Header */}
./src/components/CompanyCard.tsx:          <div className="flex items-start justify-between">
./src/components/CompanyCard.tsx:            <div className="flex items-center space-x-4">
./src/components/CompanyCard.tsx:              <Image 
./src/components/CompanyCard.tsx:                src={company.logo_url || '/placeholder.png'}
./src/components/CompanyCard.tsx:                alt={`${company.name} logo`}
./src/components/CompanyCard.tsx:                width={80}
./src/components/CompanyCard.tsx:                height={80}
./src/components/CompanyCard.tsx:                className="h-20 w-20 object-contain"
./src/components/CompanyCard.tsx:              />
./src/components/CompanyCard.tsx:              <div>
./src/components/CompanyCard.tsx:                <Link href={`/companies/${company.id}`} className="text-xl font-semibold hover:text-blue-600 transition-colors">
./src/components/CompanyCard.tsx:                  {company.name}
./src/components/CompanyCard.tsx:                </Link>
./src/components/CompanyCard.tsx:              </div>
./src/components/CompanyCard.tsx:            </div>
./src/components/CompanyCard.tsx:          </div>
./src/components/CompanyCard.tsx:        </div>
./src/components/CompanyCard.tsx:      </motion.div>
./src/components/CompanyCard.tsx:    </>
./src/components/CompanyCard.tsx:  );
./src/components/CompanyCard.tsx:}
./src/components/CompanyForm.tsx:'use client'
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:import { useState, useEffect } from 'react';
./src/components/CompanyForm.tsx:import { useRouter } from 'next/navigation';
./src/components/CompanyForm.tsx:import { zodResolver } from '@hookform/resolvers/zod';
./src/components/CompanyForm.tsx:import { useForm } from 'react-hook-form';
./src/components/CompanyForm.tsx:import { companySchema, type CompanyFormData } from '@/lib/schemas';
./src/components/CompanyForm.tsx:import { createClient } from '@/lib/supabaseClient';
./src/components/CompanyForm.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/CompanyForm.tsx:import { ErrorDisplay } from "@/components/ErrorDisplay";
./src/components/CompanyForm.tsx:import { LoadingSpinner } from '@/components/ui/loading-spinner';
./src/components/CompanyForm.tsx:import { LocationAutocomplete } from '@/components/LocationAutocomplete';
./src/components/CompanyForm.tsx:import { Button } from './ui/button';
./src/components/CompanyForm.tsx:import { Input } from './ui/input';
./src/components/CompanyForm.tsx:import type { Database } from '@/types/supabase';
./src/components/CompanyForm.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/CompanyForm.tsx:import { Textarea } from '@/components/ui/textarea';
./src/components/CompanyForm.tsx:import { CompanyInsert } from '@/types/database';
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:// Define CompanyIndustry as the enum from Supabase
./src/components/CompanyForm.tsx:type CompanyIndustry = Database['public']['Enums']['company_industry'];
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:const INDUSTRY_OPTIONS: CompanyIndustry[] = [
./src/components/CompanyForm.tsx:  'Technology',
./src/components/CompanyForm.tsx:  'Healthcare',
./src/components/CompanyForm.tsx:  'Education',
./src/components/CompanyForm.tsx:  'Finance',
./src/components/CompanyForm.tsx:  'Manufacturing',
./src/components/CompanyForm.tsx:  'Retail',
./src/components/CompanyForm.tsx:  'Other'
./src/components/CompanyForm.tsx:];
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:interface CompanyFormProps {
./src/components/CompanyForm.tsx:  initialData?: Company;
./src/components/CompanyForm.tsx:  onSuccess?: () => void;
./src/components/CompanyForm.tsx:}
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:export function CompanyForm({ initialData, onSuccess }: CompanyFormProps) {
./src/components/CompanyForm.tsx:  const router = useRouter();
./src/components/CompanyForm.tsx:  const { user } = useAuth();
./src/components/CompanyForm.tsx:  const [isSubmitting, setIsSubmitting] = useState(false);
./src/components/CompanyForm.tsx:  const [error, setError] = useState<string | null>(null);
./src/components/CompanyForm.tsx:  const [locationError, setLocationError] = useState<string | null>(null);
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:  const {
./src/components/CompanyForm.tsx:    register,
./src/components/CompanyForm.tsx:    handleSubmit,
./src/components/CompanyForm.tsx:    reset,
./src/components/CompanyForm.tsx:    setValue,
./src/components/CompanyForm.tsx:    watch,
./src/components/CompanyForm.tsx:    formState: { errors },
./src/components/CompanyForm.tsx:  } = useForm<CompanyFormData>({
./src/components/CompanyForm.tsx:    resolver: zodResolver(companySchema),
./src/components/CompanyForm.tsx:    defaultValues: {
./src/components/CompanyForm.tsx:      name: initialData?.name || '',
./src/components/CompanyForm.tsx:      industry: initialData?.industry || 'Technology',
./src/components/CompanyForm.tsx:      location: initialData?.location || '',
./src/components/CompanyForm.tsx:      website: initialData?.website || '',
./src/components/CompanyForm.tsx:      description: initialData?.description || '',
./src/components/CompanyForm.tsx:    },
./src/components/CompanyForm.tsx:  });
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:  const location = watch('location');
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:  useEffect(() => {
./src/components/CompanyForm.tsx:    if (location && location.length > 0) {
./src/components/CompanyForm.tsx:      setLocationError(null);
./src/components/CompanyForm.tsx:    }
./src/components/CompanyForm.tsx:  }, [location]);
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:  const onSubmit = async (data: CompanyFormData) => {
./src/components/CompanyForm.tsx:    if (!user) {
./src/components/CompanyForm.tsx:      setError('You must be logged in to add a company');
./src/components/CompanyForm.tsx:      return;
./src/components/CompanyForm.tsx:    }
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:    if (!data.location) {
./src/components/CompanyForm.tsx:      setLocationError('Please select a location');
./src/components/CompanyForm.tsx:      return;
./src/components/CompanyForm.tsx:    }
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:    try {
./src/components/CompanyForm.tsx:      setIsSubmitting(true);
./src/components/CompanyForm.tsx:      setError(null);
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      const supabase = createClient();
./src/components/CompanyForm.tsx:      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      if (!session?.user) {
./src/components/CompanyForm.tsx:        setError('No active session found. Please log in again.');
./src/components/CompanyForm.tsx:        return;
./src/components/CompanyForm.tsx:      }
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      // Create the company using the database helper
./src/components/CompanyForm.tsx:      const { error: createError } = await supabase
./src/components/CompanyForm.tsx:        .from('companies')
./src/components/CompanyForm.tsx:        .insert([{
./src/components/CompanyForm.tsx:          ...data,
./src/components/CompanyForm.tsx:          created_by: session.user.id,
./src/components/CompanyForm.tsx:          created_at: new Date().toISOString(),
./src/components/CompanyForm.tsx:          updated_at: new Date().toISOString()
./src/components/CompanyForm.tsx:        }]);
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      if (createError) {
./src/components/CompanyForm.tsx:        console.error('Error creating company:', {
./src/components/CompanyForm.tsx:          message: createError.message,
./src/components/CompanyForm.tsx:          details: createError.details,
./src/components/CompanyForm.tsx:          hint: createError.hint,
./src/components/CompanyForm.tsx:          code: createError.code
./src/components/CompanyForm.tsx:        });
./src/components/CompanyForm.tsx:        setError(createError.message);
./src/components/CompanyForm.tsx:        return;
./src/components/CompanyForm.tsx:      }
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      reset();
./src/components/CompanyForm.tsx:      router.refresh();
./src/components/CompanyForm.tsx:      onSuccess?.();
./src/components/CompanyForm.tsx:    } catch (err) {
./src/components/CompanyForm.tsx:      console.error('Error:', err);
./src/components/CompanyForm.tsx:      setError('An unexpected error occurred');
./src/components/CompanyForm.tsx:    } finally {
./src/components/CompanyForm.tsx:      setIsSubmitting(false);
./src/components/CompanyForm.tsx:    }
./src/components/CompanyForm.tsx:  };
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:  return (
./src/components/CompanyForm.tsx:    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
./src/components/CompanyForm.tsx:      {error && <ErrorDisplay message={error} />}
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <div>
./src/components/CompanyForm.tsx:        <label className="block text-sm font-medium mb-2">Company Name</label>
./src/components/CompanyForm.tsx:        <Input {...register('name')} />
./src/components/CompanyForm.tsx:        {errors.name && <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>}
./src/components/CompanyForm.tsx:      </div>
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <div>
./src/components/CompanyForm.tsx:        <label className="block text-sm font-medium mb-2">Industry</label>
./src/components/CompanyForm.tsx:        <Select
./src/components/CompanyForm.tsx:          value={watch('industry')}
./src/components/CompanyForm.tsx:          onValueChange={(value) => setValue('industry', value as Industry)}
./src/components/CompanyForm.tsx:        >
./src/components/CompanyForm.tsx:          <SelectTrigger>
./src/components/CompanyForm.tsx:            <SelectValue placeholder="Select an industry" />
./src/components/CompanyForm.tsx:          </SelectTrigger>
./src/components/CompanyForm.tsx:          <SelectContent>
./src/components/CompanyForm.tsx:            {INDUSTRIES.map((industry) => (
./src/components/CompanyForm.tsx:              <SelectItem key={industry} value={industry}>
./src/components/CompanyForm.tsx:                {industry}
./src/components/CompanyForm.tsx:              </SelectItem>
./src/components/CompanyForm.tsx:            ))}
./src/components/CompanyForm.tsx:          </SelectContent>
./src/components/CompanyForm.tsx:        </Select>
./src/components/CompanyForm.tsx:        {errors.industry && <p className="mt-1 text-sm text-red-600">{errors.industry.message}</p>}
./src/components/CompanyForm.tsx:      </div>
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <div>
./src/components/CompanyForm.tsx:        <label className="block text-sm font-medium mb-2">
./src/components/CompanyForm.tsx:          Location <span className="text-red-500">*</span>
./src/components/CompanyForm.tsx:        </label>
./src/components/CompanyForm.tsx:        <LocationAutocomplete
./src/components/CompanyForm.tsx:          value={watch('location')}
./src/components/CompanyForm.tsx:          onChange={(value) => setValue('location', value)}
./src/components/CompanyForm.tsx:        />
./src/components/CompanyForm.tsx:        {locationError && <p className="mt-1 text-sm text-red-600">{locationError}</p>}
./src/components/CompanyForm.tsx:        {errors.location && <p className="mt-1 text-sm text-red-600">{errors.location.message}</p>}
./src/components/CompanyForm.tsx:      </div>
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <div>
./src/components/CompanyForm.tsx:        <label className="block text-sm font-medium mb-2">Website</label>
./src/components/CompanyForm.tsx:        <Input {...register('website')} type="url" />
./src/components/CompanyForm.tsx:        {errors.website && <p className="mt-1 text-sm text-red-600">{errors.website.message}</p>}
./src/components/CompanyForm.tsx:      </div>
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <div>
./src/components/CompanyForm.tsx:        <label className="block text-sm font-medium mb-2">Description</label>
./src/components/CompanyForm.tsx:        <Textarea
./src/components/CompanyForm.tsx:          {...register('description')}
./src/components/CompanyForm.tsx:          rows={3}
./src/components/CompanyForm.tsx:        />
./src/components/CompanyForm.tsx:        {errors.description && <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>}
./src/components/CompanyForm.tsx:      </div>
./src/components/CompanyForm.tsx:
./src/components/CompanyForm.tsx:      <Button type="submit" className="w-full" disabled={isSubmitting}>
./src/components/CompanyForm.tsx:        {isSubmitting ? <LoadingSpinner size="sm" /> : initialData ? 'Update Company' : 'Add Company'}
./src/components/CompanyForm.tsx:      </Button>
./src/components/CompanyForm.tsx:    </form>
./src/components/CompanyForm.tsx:  );
./src/components/CompanyForm.tsx:}
./src/components/CompanyList.tsx:'use client'
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:import { useState, useEffect, useCallback } from 'react';
./src/components/CompanyList.tsx:import { useRouter } from 'next/navigation';
./src/components/CompanyList.tsx:import { supabase } from '@/lib/supabaseClient';
./src/components/CompanyList.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/components/CompanyList.tsx:import { CompanyCard } from '@/components/CompanyCard';
./src/components/CompanyList.tsx:import type { Database } from '@/types/supabase';
./src/components/CompanyList.tsx:import { List } from '@/components/ui/List';
./src/components/CompanyList.tsx:import {
./src/components/CompanyList.tsx:  Select,
./src/components/CompanyList.tsx:  SelectTrigger,
./src/components/CompanyList.tsx:  SelectValue,
./src/components/CompanyList.tsx:  SelectContent,
./src/components/CompanyList.tsx:  SelectItem
./src/components/CompanyList.tsx:} from '@/components/ui/select';
./src/components/CompanyList.tsx:import { Button } from '@/components/ui/button';
./src/components/CompanyList.tsx:import { GridIcon, ListIcon } from 'lucide-react';
./src/components/CompanyList.tsx:import type { JoinedCompany } from '@/types';
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:type SortOption = {
./src/components/CompanyList.tsx:  label: string;
./src/components/CompanyList.tsx:  value: string;
./src/components/CompanyList.tsx:  column: string;
./src/components/CompanyList.tsx:  direction: 'asc' | 'desc';
./src/components/CompanyList.tsx:};
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:const SORT_OPTIONS: SortOption[] = [
./src/components/CompanyList.tsx:  { label: 'Highest Rated', value: 'rating-desc', column: 'average_rating', direction: 'desc' },
./src/components/CompanyList.tsx:  { label: 'Lowest Rated', value: 'rating-asc', column: 'average_rating', direction: 'asc' },
./src/components/CompanyList.tsx:  { label: 'Most Reviews', value: 'reviews-desc', column: 'total_reviews', direction: 'desc' },
./src/components/CompanyList.tsx:  { label: 'Newest', value: 'created-desc', column: 'created_at', direction: 'desc' },
./src/components/CompanyList.tsx:  { label: 'Oldest', value: 'created-asc', column: 'created_at', direction: 'asc' },
./src/components/CompanyList.tsx:  { label: 'Name A-Z', value: 'name-asc', column: 'name', direction: 'asc' },
./src/components/CompanyList.tsx:  { label: 'Name Z-A', value: 'name-desc', column: 'name', direction: 'desc' },
./src/components/CompanyList.tsx:];
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:const ITEMS_PER_PAGE = 9;
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:type CompanyRow = Database['public']['Tables']['companies']['Row'];
./src/components/CompanyList.tsx:type ReviewRow = Database['public']['Tables']['reviews']['Row'];
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:interface CompanyWithReviews extends CompanyRow {
./src/components/CompanyList.tsx:  reviews: ReviewRow[];
./src/components/CompanyList.tsx:  average_rating?: number;
./src/components/CompanyList.tsx:  total_reviews?: number;
./src/components/CompanyList.tsx:  recommendation_rate?: number;
./src/components/CompanyList.tsx:}
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:interface CompanyListProps {
./src/components/CompanyList.tsx:  selectedLocation: string;
./src/components/CompanyList.tsx:  selectedIndustry: string;
./src/components/CompanyList.tsx:  searchQuery: string;
./src/components/CompanyList.tsx:  companies: JoinedCompany[];
./src/components/CompanyList.tsx:  onCompanyClick?: (company: JoinedCompany) => void;
./src/components/CompanyList.tsx:}
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:export const CompanyList = ({
./src/components/CompanyList.tsx:  selectedLocation,
./src/components/CompanyList.tsx:  selectedIndustry,
./src/components/CompanyList.tsx:  searchQuery,
./src/components/CompanyList.tsx:  companies,
./src/components/CompanyList.tsx:  onCompanyClick,
./src/components/CompanyList.tsx:}: CompanyListProps) => {
./src/components/CompanyList.tsx:  const [page, setPage] = useState(1);
./src/components/CompanyList.tsx:  const [sortBy, setSortBy] = useState<SortOption>(SORT_OPTIONS[0]);
./src/components/CompanyList.tsx:  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
./src/components/CompanyList.tsx:  const [totalCount, setTotalCount] = useState(0);
./src/components/CompanyList.tsx:  const [loading, setLoading] = useState(true);
./src/components/CompanyList.tsx:  const [error, setError] = useState<string | null>(null);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  const fetchCompanies = useCallback(async () => {
./src/components/CompanyList.tsx:    try {
./src/components/CompanyList.tsx:      setLoading(true);
./src/components/CompanyList.tsx:      setError(null);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      console.log('Fetching companies with filters:', {
./src/components/CompanyList.tsx:        location: selectedLocation,
./src/components/CompanyList.tsx:        industry: selectedIndustry,
./src/components/CompanyList.tsx:        search: searchQuery,
./src/components/CompanyList.tsx:        sort: sortBy,
./src/components/CompanyList.tsx:        page
./src/components/CompanyList.tsx:      });
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      let query = supabase
./src/components/CompanyList.tsx:        .from('companies')
./src/components/CompanyList.tsx:        .select(`
./src/components/CompanyList.tsx:          id,
./src/components/CompanyList.tsx:          name,
./src/components/CompanyList.tsx:          industry,
./src/components/CompanyList.tsx:          location,
./src/components/CompanyList.tsx:          website,
./src/components/CompanyList.tsx:          logo_url,
./src/components/CompanyList.tsx:          created_at,
./src/components/CompanyList.tsx:          updated_at,
./src/components/CompanyList.tsx:          reviews!company_id (
./src/components/CompanyList.tsx:            rating
./src/components/CompanyList.tsx:          )
./src/components/CompanyList.tsx:        `, { count: 'exact' });
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      // Apply filters
./src/components/CompanyList.tsx:      if (selectedLocation && selectedLocation !== 'all') {
./src/components/CompanyList.tsx:        query = query.eq('location', selectedLocation);
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:      if (selectedIndustry && selectedIndustry !== 'all') {
./src/components/CompanyList.tsx:        query = query.eq('industry', selectedIndustry);
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:      if (searchQuery) {
./src/components/CompanyList.tsx:        query = query.ilike('name', `%${searchQuery}%`);
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      // Apply sorting
./src/components/CompanyList.tsx:      if (sortBy.column === 'average_rating') {
./src/components/CompanyList.tsx:        // For rating-based sorting, we'll sort after fetching
./src/components/CompanyList.tsx:        query = query.order('name', { ascending: true });
./src/components/CompanyList.tsx:      } else {
./src/components/CompanyList.tsx:        query = query.order(sortBy.column, { ascending: sortBy.direction === 'asc' });
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      // Apply pagination
./src/components/CompanyList.tsx:      const start = (page - 1) * ITEMS_PER_PAGE;
./src/components/CompanyList.tsx:      query = query.range(start, start + ITEMS_PER_PAGE - 1);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      console.log('Executing Supabase query...');
./src/components/CompanyList.tsx:      const { data, error, count } = await query;
./src/components/CompanyList.tsx:      console.log('Query response:', { data, error, count });
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      if (error) {
./src/components/CompanyList.tsx:        console.error('Supabase error:', error);
./src/components/CompanyList.tsx:        throw new Error(error.message || 'Failed to fetch companies');
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      if (!data) {
./src/components/CompanyList.tsx:        console.log('No data returned from Supabase');
./src/components/CompanyList.tsx:        setTotalCount(0);
./src/components/CompanyList.tsx:        return;
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      // Calculate average ratings and total reviews
./src/components/CompanyList.tsx:      const companiesWithStats = data.map(company => {
./src/components/CompanyList.tsx:        const reviews = company.reviews || [];
./src/components/CompanyList.tsx:        const totalReviews = reviews.length;
./src/components/CompanyList.tsx:        const averageRating = totalReviews > 0
./src/components/CompanyList.tsx:          ? reviews.reduce((sum, review) => sum + (review.rating || 0), 0) / totalReviews
./src/components/CompanyList.tsx:          : 0;
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:        return {
./src/components/CompanyList.tsx:          ...company,
./src/components/CompanyList.tsx:          average_rating: averageRating,
./src/components/CompanyList.tsx:          total_reviews: totalReviews,
./src/components/CompanyList.tsx:          reviews: undefined // Remove the reviews array as we don't need it anymore
./src/components/CompanyList.tsx:        };
./src/components/CompanyList.tsx:      });
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      // Sort by rating if needed
./src/components/CompanyList.tsx:      if (sortBy.column === 'average_rating') {
./src/components/CompanyList.tsx:        companiesWithStats.sort((a, b) => {
./src/components/CompanyList.tsx:          return sortBy.direction === 'asc'
./src/components/CompanyList.tsx:            ? (a.average_rating || 0) - (b.average_rating || 0)
./src/components/CompanyList.tsx:            : (b.average_rating || 0) - (a.average_rating || 0);
./src/components/CompanyList.tsx:        });
./src/components/CompanyList.tsx:      }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      console.log(`Successfully fetched ${companiesWithStats.length} companies`);
./src/components/CompanyList.tsx:      setTotalCount(count || 0);
./src/components/CompanyList.tsx:    } catch (err) {
./src/components/CompanyList.tsx:      console.error('Error details:', err);
./src/components/CompanyList.tsx:      setError(err instanceof Error ? err.message : 'Failed to load companies');
./src/components/CompanyList.tsx:    } finally {
./src/components/CompanyList.tsx:      setLoading(false);
./src/components/CompanyList.tsx:    }
./src/components/CompanyList.tsx:  }, [selectedLocation, selectedIndustry, searchQuery, page, sortBy]);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  useEffect(() => {
./src/components/CompanyList.tsx:    fetchCompanies();
./src/components/CompanyList.tsx:  }, [fetchCompanies]);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  const totalPages = Math.ceil(totalCount / ITEMS_PER_PAGE);
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  if (loading) {
./src/components/CompanyList.tsx:    return (
./src/components/CompanyList.tsx:      <div className="flex justify-center items-center min-h-[400px]">
./src/components/CompanyList.tsx:        <LoadingSpinner size="lg" />
./src/components/CompanyList.tsx:      </div>
./src/components/CompanyList.tsx:    );
./src/components/CompanyList.tsx:  }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  if (error) {
./src/components/CompanyList.tsx:    return (
./src/components/CompanyList.tsx:      <div className="text-center py-8">
./src/components/CompanyList.tsx:        <p className="text-red-500">{error}</p>
./src/components/CompanyList.tsx:        <Button onClick={() => setPage(1)} className="mt-4">
./src/components/CompanyList.tsx:          Retry
./src/components/CompanyList.tsx:        </Button>
./src/components/CompanyList.tsx:      </div>
./src/components/CompanyList.tsx:    );
./src/components/CompanyList.tsx:  }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  if (!companies.length) {
./src/components/CompanyList.tsx:    return (
./src/components/CompanyList.tsx:      <div className="text-center py-8">
./src/components/CompanyList.tsx:        <p className="text-gray-500">No companies found</p>
./src/components/CompanyList.tsx:      </div>
./src/components/CompanyList.tsx:    );
./src/components/CompanyList.tsx:  }
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:  return (
./src/components/CompanyList.tsx:    <div className="space-y-6">
./src/components/CompanyList.tsx:      <div className="flex items-center justify-between">
./src/components/CompanyList.tsx:        <div className="flex items-center gap-4">
./src/components/CompanyList.tsx:          <Select value={sortBy.value} onValueChange={(value) => {
./src/components/CompanyList.tsx:            const option = SORT_OPTIONS.find(opt => opt.value === value);
./src/components/CompanyList.tsx:            if (option) setSortBy(option);
./src/components/CompanyList.tsx:          }}>
./src/components/CompanyList.tsx:            <SelectTrigger className="w-[180px]">
./src/components/CompanyList.tsx:              <SelectValue placeholder="Sort by..." />
./src/components/CompanyList.tsx:            </SelectTrigger>
./src/components/CompanyList.tsx:            <SelectContent>
./src/components/CompanyList.tsx:              {SORT_OPTIONS.map((option) => (
./src/components/CompanyList.tsx:                <SelectItem key={option.value} value={option.value}>
./src/components/CompanyList.tsx:                  {option.label}
./src/components/CompanyList.tsx:                </SelectItem>
./src/components/CompanyList.tsx:              ))}
./src/components/CompanyList.tsx:            </SelectContent>
./src/components/CompanyList.tsx:          </Select>
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:          <div className="flex items-center gap-2 border rounded-lg p-1">
./src/components/CompanyList.tsx:            <Button
./src/components/CompanyList.tsx:              variant={viewMode === 'grid' ? 'default' : 'ghost'}
./src/components/CompanyList.tsx:              size="sm"
./src/components/CompanyList.tsx:              onClick={() => setViewMode('grid')}
./src/components/CompanyList.tsx:            >
./src/components/CompanyList.tsx:              <GridIcon className="w-4 h-4" />
./src/components/CompanyList.tsx:            </Button>
./src/components/CompanyList.tsx:            <Button
./src/components/CompanyList.tsx:              variant={viewMode === 'list' ? 'default' : 'ghost'}
./src/components/CompanyList.tsx:              size="sm"
./src/components/CompanyList.tsx:              onClick={() => setViewMode('list')}
./src/components/CompanyList.tsx:            >
./src/components/CompanyList.tsx:              <ListIcon className="w-4 h-4" />
./src/components/CompanyList.tsx:            </Button>
./src/components/CompanyList.tsx:          </div>
./src/components/CompanyList.tsx:        </div>
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:        <div className="text-sm text-gray-500 dark:text-gray-400">
./src/components/CompanyList.tsx:          {totalCount} {totalCount === 1 ? 'company' : 'companies'} found
./src/components/CompanyList.tsx:        </div>
./src/components/CompanyList.tsx:      </div>
./src/components/CompanyList.tsx:
./src/components/CompanyList.tsx:      {viewMode === 'grid' ? (
./src/components/CompanyList.tsx:        <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
./src/components/CompanyList.tsx:          {companies.map((company) => (
./src/components/CompanyList.tsx:            <CompanyCard
./src/components/CompanyList.tsx:              key={company.id}
./src/components/CompanyList.tsx:              company={company}
./src/components/CompanyList.tsx:              onClick={() => onCompanyClick?.(company)}
./src/components/CompanyList.tsx:            />
./src/components/CompanyList.tsx:          ))}
./src/components/CompanyList.tsx:        </div>
./src/components/CompanyList.tsx:      ) : (
./src/components/CompanyList.tsx:        <List<JoinedCompany>
./src/components/CompanyList.tsx:          items={companies}
./src/components/CompanyList.tsx:          renderItem={(company) => <CompanyCard company={company} />}
./src/components/CompanyList.tsx:          keyExtractor={(company) => String(company.id)}
./src/components/CompanyList.tsx:          pagination={{
./src/components/CompanyList.tsx:            page,
./src/components/CompanyList.tsx:            totalPages,
./src/components/CompanyList.tsx:            onPageChange: setPage,
./src/components/CompanyList.tsx:          }}
./src/components/CompanyList.tsx:        />
./src/components/CompanyList.tsx:      )}
./src/components/CompanyList.tsx:    </div>
./src/components/CompanyList.tsx:  );
./src/components/CompanyList.tsx:};
./src/components/CompanyNews.tsx:'use client';
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:import { useEffect, useState } from 'react';
./src/components/CompanyNews.tsx:import { fetchCompanyNews, type MarketauxArticle } from '@/lib/marketauxApi';
./src/components/CompanyNews.tsx:import { Card, CardContent } from '@/components/ui/card';
./src/components/CompanyNews.tsx:import { Skeleton } from '@/components/ui/skeleton';
./src/components/CompanyNews.tsx:import { ExternalLinkIcon } from '@radix-ui/react-icons';
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:interface CompanyNewsProps {
./src/components/CompanyNews.tsx:  companyName: string;
./src/components/CompanyNews.tsx:}
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:export function CompanyNews({ companyName }: CompanyNewsProps) {
./src/components/CompanyNews.tsx:  const [news, setNews] = useState<MarketauxArticle[]>([]);
./src/components/CompanyNews.tsx:  const [loading, setLoading] = useState(true);
./src/components/CompanyNews.tsx:  const [error, setError] = useState<string | null>(null);
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:  useEffect(() => {
./src/components/CompanyNews.tsx:    async function loadNews() {
./src/components/CompanyNews.tsx:      try {
./src/components/CompanyNews.tsx:        setLoading(true);
./src/components/CompanyNews.tsx:        const articles = await fetchCompanyNews(companyName);
./src/components/CompanyNews.tsx:        setNews(articles);
./src/components/CompanyNews.tsx:      } catch (err) {
./src/components/CompanyNews.tsx:        console.error('Error fetching news:', err);
./src/components/CompanyNews.tsx:        setError('Failed to load news');
./src/components/CompanyNews.tsx:      } finally {
./src/components/CompanyNews.tsx:        setLoading(false);
./src/components/CompanyNews.tsx:      }
./src/components/CompanyNews.tsx:    }
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:    loadNews();
./src/components/CompanyNews.tsx:  }, [companyName]);
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:  if (loading) {
./src/components/CompanyNews.tsx:    return (
./src/components/CompanyNews.tsx:      <div className="space-y-4">
./src/components/CompanyNews.tsx:        {[...Array(3)].map((_, i) => (
./src/components/CompanyNews.tsx:          <Skeleton key={i} className="h-32" />
./src/components/CompanyNews.tsx:        ))}
./src/components/CompanyNews.tsx:      </div>
./src/components/CompanyNews.tsx:    );
./src/components/CompanyNews.tsx:  }
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:  if (error) {
./src/components/CompanyNews.tsx:    return (
./src/components/CompanyNews.tsx:      <div className="text-red-500">
./src/components/CompanyNews.tsx:        {error}
./src/components/CompanyNews.tsx:      </div>
./src/components/CompanyNews.tsx:    );
./src/components/CompanyNews.tsx:  }
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:  if (news.length === 0) {
./src/components/CompanyNews.tsx:    return (
./src/components/CompanyNews.tsx:      <div className="text-gray-500">
./src/components/CompanyNews.tsx:        No recent news found for {companyName}.
./src/components/CompanyNews.tsx:      </div>
./src/components/CompanyNews.tsx:    );
./src/components/CompanyNews.tsx:  }
./src/components/CompanyNews.tsx:
./src/components/CompanyNews.tsx:  return (
./src/components/CompanyNews.tsx:    <div className="space-y-4">
./src/components/CompanyNews.tsx:      {news.map((article, index) => (
./src/components/CompanyNews.tsx:        <Card key={index}>
./src/components/CompanyNews.tsx:          <CardContent className="p-4">
./src/components/CompanyNews.tsx:            <a
./src/components/CompanyNews.tsx:              href={article.url}
./src/components/CompanyNews.tsx:              target="_blank"
./src/components/CompanyNews.tsx:              rel="noopener noreferrer"
./src/components/CompanyNews.tsx:              className="flex items-start gap-2 hover:text-blue-600 transition-colors"
./src/components/CompanyNews.tsx:            >
./src/components/CompanyNews.tsx:              <h3 className="font-medium flex-grow">{article.title}</h3>
./src/components/CompanyNews.tsx:              <ExternalLinkIcon className="h-4 w-4 flex-shrink-0 mt-1" />
./src/components/CompanyNews.tsx:            </a>
./src/components/CompanyNews.tsx:            {article.description && (
./src/components/CompanyNews.tsx:              <p className="mt-2 text-sm text-gray-600">{article.description}</p>
./src/components/CompanyNews.tsx:            )}
./src/components/CompanyNews.tsx:            <div className="mt-2 text-xs text-gray-500 flex justify-between">
./src/components/CompanyNews.tsx:              <span>{article.source}</span>
./src/components/CompanyNews.tsx:              <span>{new Date(article.published_at).toLocaleDateString()}</span>
./src/components/CompanyNews.tsx:            </div>
./src/components/CompanyNews.tsx:          </CardContent>
./src/components/CompanyNews.tsx:        </Card>
./src/components/CompanyNews.tsx:      ))}
./src/components/CompanyNews.tsx:    </div>
./src/components/CompanyNews.tsx:  );
./src/components/CompanyNews.tsx:}
./src/components/CompanyProfile.tsx:'use client'
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:import { useState } from 'react';
./src/components/CompanyProfile.tsx:import type { Database } from '@/types/supabase';
./src/components/CompanyProfile.tsx:import { Company as DbCompany } from '@/types/database';
./src/components/CompanyProfile.tsx:import { Card } from './ui/card';
./src/components/CompanyProfile.tsx:import { StarRating } from './StarRating';
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:function formatRating(rating: number | null): number {
./src/components/CompanyProfile.tsx:  return rating ?? 0;
./src/components/CompanyProfile.tsx:}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:function formatPercentage(value: number | null): number {
./src/components/CompanyProfile.tsx:  return Math.round(value ?? 0);
./src/components/CompanyProfile.tsx:}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:function formatNumber(value: number | null): number {
./src/components/CompanyProfile.tsx:  return value ?? 0;
./src/components/CompanyProfile.tsx:}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:export function CompanyStats({ company }: { company: Company }) {
./src/components/CompanyProfile.tsx:  return (
./src/components/CompanyProfile.tsx:    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4">
./src/components/CompanyProfile.tsx:      <p>Additional company stats are currently not available.</p>
./src/components/CompanyProfile.tsx:    </div>
./src/components/CompanyProfile.tsx:  );
./src/components/CompanyProfile.tsx:}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:interface CompanyProfileProps {
./src/components/CompanyProfile.tsx:  company: Company;
./src/components/CompanyProfile.tsx:}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:export const CompanyProfile = ({ company }: CompanyProfileProps) => {
./src/components/CompanyProfile.tsx:  return (
./src/components/CompanyProfile.tsx:    <Card className="p-6">
./src/components/CompanyProfile.tsx:      <div className="flex items-start justify-between">
./src/components/CompanyProfile.tsx:        <div>
./src/components/CompanyProfile.tsx:          <h2 className="text-2xl font-bold">{company.name}</h2>
./src/components/CompanyProfile.tsx:          {company.industry && (
./src/components/CompanyProfile.tsx:            <p className="text-gray-600">{company.industry}</p>
./src/components/CompanyProfile.tsx:          )}
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:        {company.logo_url && (
./src/components/CompanyProfile.tsx:          <img
./src/components/CompanyProfile.tsx:            src={company.logo_url}
./src/components/CompanyProfile.tsx:            alt={`${company.name} logo`}
./src/components/CompanyProfile.tsx:            className="w-16 h-16 object-contain"
./src/components/CompanyProfile.tsx:          />
./src/components/CompanyProfile.tsx:        )}
./src/components/CompanyProfile.tsx:      </div>
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:      <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
./src/components/CompanyProfile.tsx:        <div>
./src/components/CompanyProfile.tsx:          <h3 className="font-semibold">Rating</h3>
./src/components/CompanyProfile.tsx:          <div className="flex items-center mt-1">
./src/components/CompanyProfile.tsx:            <StarRating rating={company.average_rating || 0} />
./src/components/CompanyProfile.tsx:            <span className="ml-2">
./src/components/CompanyProfile.tsx:              {company.average_rating?.toFixed(1) || 'No ratings'}
./src/components/CompanyProfile.tsx:            </span>
./src/components/CompanyProfile.tsx:          </div>
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:        <div>
./src/components/CompanyProfile.tsx:          <h3 className="font-semibold">Recommendation Rate</h3>
./src/components/CompanyProfile.tsx:          <p className="mt-1">
./src/components/CompanyProfile.tsx:            {company.recommendation_rate
./src/components/CompanyProfile.tsx:              ? `${(company.recommendation_rate * 100).toFixed(0)}%`
./src/components/CompanyProfile.tsx:              : 'No data'}
./src/components/CompanyProfile.tsx:          </p>
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:        <div>
./src/components/CompanyProfile.tsx:          <h3 className="font-semibold">Total Reviews</h3>
./src/components/CompanyProfile.tsx:          <p className="mt-1">{company.total_reviews || 0}</p>
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:      </div>
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:      {company.description && (
./src/components/CompanyProfile.tsx:        <div className="mt-6">
./src/components/CompanyProfile.tsx:          <h3 className="font-semibold">About</h3>
./src/components/CompanyProfile.tsx:          <p className="mt-1 text-gray-600">{company.description}</p>
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:      )}
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:      <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
./src/components/CompanyProfile.tsx:        <div>
./src/components/CompanyProfile.tsx:          <h3 className="font-semibold">Details</h3>
./src/components/CompanyProfile.tsx:          <dl className="mt-2 space-y-2">
./src/components/CompanyProfile.tsx:            {company.location && (
./src/components/CompanyProfile.tsx:              <div>
./src/components/CompanyProfile.tsx:                <dt className="text-gray-500">Location</dt>
./src/components/CompanyProfile.tsx:                <dd>{company.location}</dd>
./src/components/CompanyProfile.tsx:              </div>
./src/components/CompanyProfile.tsx:            )}
./src/components/CompanyProfile.tsx:            {company.size && (
./src/components/CompanyProfile.tsx:              <div>
./src/components/CompanyProfile.tsx:                <dt className="text-gray-500">Company Size</dt>
./src/components/CompanyProfile.tsx:                <dd>{company.size}</dd>
./src/components/CompanyProfile.tsx:              </div>
./src/components/CompanyProfile.tsx:            )}
./src/components/CompanyProfile.tsx:            {company.ceo && (
./src/components/CompanyProfile.tsx:              <div>
./src/components/CompanyProfile.tsx:                <dt className="text-gray-500">CEO</dt>
./src/components/CompanyProfile.tsx:                <dd>{company.ceo}</dd>
./src/components/CompanyProfile.tsx:              </div>
./src/components/CompanyProfile.tsx:            )}
./src/components/CompanyProfile.tsx:          </dl>
./src/components/CompanyProfile.tsx:        </div>
./src/components/CompanyProfile.tsx:
./src/components/CompanyProfile.tsx:        {(company.company_values || company.benefits) && (
./src/components/CompanyProfile.tsx:          <div>
./src/components/CompanyProfile.tsx:            <h3 className="font-semibold">Culture & Benefits</h3>
./src/components/CompanyProfile.tsx:            <dl className="mt-2 space-y-2">
./src/components/CompanyProfile.tsx:              {company.company_values && (
./src/components/CompanyProfile.tsx:                <div>
./src/components/CompanyProfile.tsx:                  <dt className="text-gray-500">Company Values</dt>
./src/components/CompanyProfile.tsx:                  <dd>{company.company_values}</dd>
./src/components/CompanyProfile.tsx:                </div>
./src/components/CompanyProfile.tsx:              )}
./src/components/CompanyProfile.tsx:              {company.benefits && (
./src/components/CompanyProfile.tsx:                <div>
./src/components/CompanyProfile.tsx:                  <dt className="text-gray-500">Benefits</dt>
./src/components/CompanyProfile.tsx:                  <dd>{company.benefits}</dd>
./src/components/CompanyProfile.tsx:                </div>
./src/components/CompanyProfile.tsx:              )}
./src/components/CompanyProfile.tsx:            </dl>
./src/components/CompanyProfile.tsx:          </div>
./src/components/CompanyProfile.tsx:        )}
./src/components/CompanyProfile.tsx:      </div>
./src/components/CompanyProfile.tsx:    </Card>
./src/components/CompanyProfile.tsx:  );
./src/components/CompanyProfile.tsx:};
./src/components/CompanyStats.tsx: 
./src/components/CreateReview.tsx:'use client'
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:import { useCompany } from '@/hooks/useCompany';
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:import { ReviewForm } from './ReviewForm';
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:/**
./src/components/CreateReview.tsx: * @file src/components/CreateReview.tsx
./src/components/CreateReview.tsx: * Component for creating new reviews
./src/components/CreateReview.tsx: */
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:interface CreateReviewProps {
./src/components/CreateReview.tsx:  companyId: string;
./src/components/CreateReview.tsx:}
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:function CreateReview({ companyId }: CreateReviewProps) {
./src/components/CreateReview.tsx:  const { company, isLoading, error } = useCompany(companyId);
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:  if (isLoading) {
./src/components/CreateReview.tsx:    return <div>Loading company details...</div>;
./src/components/CreateReview.tsx:  }
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:  if (error) {
./src/components/CreateReview.tsx:    return <div>Error: {error.message}</div>;
./src/components/CreateReview.tsx:  }
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:  if (!company) {
./src/components/CreateReview.tsx:    return <div>Company not found</div>;
./src/components/CreateReview.tsx:  }
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:  return (
./src/components/CreateReview.tsx:    <div className="container mx-auto py-8">
./src/components/CreateReview.tsx:      <h1 className="text-2xl font-bold mb-6">Write a Review for {company.name}</h1>
./src/components/CreateReview.tsx:      <ReviewForm companyId={companyId} />
./src/components/CreateReview.tsx:    </div>
./src/components/CreateReview.tsx:  );
./src/components/CreateReview.tsx:}
./src/components/CreateReview.tsx:
./src/components/CreateReview.tsx:// Protect the review creation for authenticated users
./src/components/CreateReview.tsx:export default withAuth(CreateReview);
./src/components/ErrorBoundary.tsx:'use client'
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:import React from 'react';
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:import { Button } from './ui/button';
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:interface Props {
./src/components/ErrorBoundary.tsx:  children: React.ReactNode;
./src/components/ErrorBoundary.tsx:  fallback?: React.ReactNode;
./src/components/ErrorBoundary.tsx:}
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:interface State {
./src/components/ErrorBoundary.tsx:  hasError: boolean;
./src/components/ErrorBoundary.tsx:  error?: Error;
./src/components/ErrorBoundary.tsx:}
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:export class ErrorBoundary extends React.Component<Props, State> {
./src/components/ErrorBoundary.tsx:  constructor(props: Props) {
./src/components/ErrorBoundary.tsx:    super(props);
./src/components/ErrorBoundary.tsx:    this.state = { hasError: false };
./src/components/ErrorBoundary.tsx:  }
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:  static getDerivedStateFromError(error: Error): State {
./src/components/ErrorBoundary.tsx:    return { hasError: true, error };
./src/components/ErrorBoundary.tsx:  }
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
./src/components/ErrorBoundary.tsx:    console.error('Error caught by boundary:', error, errorInfo);
./src/components/ErrorBoundary.tsx:  }
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:  render() {
./src/components/ErrorBoundary.tsx:    if (this.state.hasError) {
./src/components/ErrorBoundary.tsx:      return (
./src/components/ErrorBoundary.tsx:        this.props.fallback || (
./src/components/ErrorBoundary.tsx:          <div className="min-h-[400px] flex flex-col items-center justify-center p-4">
./src/components/ErrorBoundary.tsx:            <h2 className="text-xl font-semibold mb-4">Something went wrong</h2>
./src/components/ErrorBoundary.tsx:            <p className="text-gray-600 dark:text-gray-400 mb-4">
./src/components/ErrorBoundary.tsx:              {this.state.error?.message || 'An unexpected error occurred'}
./src/components/ErrorBoundary.tsx:            </p>
./src/components/ErrorBoundary.tsx:            <Button
./src/components/ErrorBoundary.tsx:              onClick={() => {
./src/components/ErrorBoundary.tsx:                this.setState({ hasError: false });
./src/components/ErrorBoundary.tsx:                window.location.reload();
./src/components/ErrorBoundary.tsx:              }}
./src/components/ErrorBoundary.tsx:            >
./src/components/ErrorBoundary.tsx:              Try again
./src/components/ErrorBoundary.tsx:            </Button>
./src/components/ErrorBoundary.tsx:          </div>
./src/components/ErrorBoundary.tsx:        )
./src/components/ErrorBoundary.tsx:      );
./src/components/ErrorBoundary.tsx:    }
./src/components/ErrorBoundary.tsx:
./src/components/ErrorBoundary.tsx:    return this.props.children;
./src/components/ErrorBoundary.tsx:  }
./src/components/ErrorBoundary.tsx:}
./src/components/ErrorDisplay.tsx:import { cn } from "@/lib/utils";
./src/components/ErrorDisplay.tsx:
./src/components/ErrorDisplay.tsx:
./src/components/ErrorDisplay.tsx:interface ErrorDisplayProps {
./src/components/ErrorDisplay.tsx:  message: string;
./src/components/ErrorDisplay.tsx:  className?: string;
./src/components/ErrorDisplay.tsx:}
./src/components/ErrorDisplay.tsx:
./src/components/ErrorDisplay.tsx:export function ErrorDisplay({ message, className }: ErrorDisplayProps) {
./src/components/ErrorDisplay.tsx:  return (
./src/components/ErrorDisplay.tsx:    <div className={cn("max-w-4xl mx-auto p-6", className)}>
./src/components/ErrorDisplay.tsx:      <div className="bg-red-50 dark:bg-red-900 border-l-4 border-red-500 p-4 rounded">
./src/components/ErrorDisplay.tsx:        <p className="text-red-700 dark:text-red-200">{message}</p>
./src/components/ErrorDisplay.tsx:      </div>
./src/components/ErrorDisplay.tsx:    </div>
./src/components/ErrorDisplay.tsx:  );
./src/components/ErrorDisplay.tsx:}
./src/components/FeaturedCompanies.tsx:'use client'
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:import { useCompanies } from '@/hooks/useCompany';
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:import { CompanyCard } from '@/components/CompanyCard';
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:export function FeaturedCompanies() {
./src/components/FeaturedCompanies.tsx:  const { companies, isLoading, error } = useCompanies({
./src/components/FeaturedCompanies.tsx:    limit: 3,
./src/components/FeaturedCompanies.tsx:    withStats: true,
./src/components/FeaturedCompanies.tsx:  });
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:  if (error) {
./src/components/FeaturedCompanies.tsx:    return (
./src/components/FeaturedCompanies.tsx:      <section className="py-12">
./src/components/FeaturedCompanies.tsx:        <h2 className="text-3xl font-bold mb-8 text-center">Featured Companies</h2>
./src/components/FeaturedCompanies.tsx:        <div className="text-red-500 text-center">{error.message}</div>
./src/components/FeaturedCompanies.tsx:      </section>
./src/components/FeaturedCompanies.tsx:    );
./src/components/FeaturedCompanies.tsx:  }
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:  if (isLoading) {
./src/components/FeaturedCompanies.tsx:    return (
./src/components/FeaturedCompanies.tsx:      <section className="py-12">
./src/components/FeaturedCompanies.tsx:        <h2 className="text-3xl font-bold mb-8 text-center">Featured Companies</h2>
./src/components/FeaturedCompanies.tsx:        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
./src/components/FeaturedCompanies.tsx:          {[...Array(3)].map((_, i) => (
./src/components/FeaturedCompanies.tsx:            <div key={i} className="border rounded-lg p-4 animate-pulse">
./src/components/FeaturedCompanies.tsx:              <div className="h-24 bg-gray-200 rounded"></div>
./src/components/FeaturedCompanies.tsx:            </div>
./src/components/FeaturedCompanies.tsx:          ))}
./src/components/FeaturedCompanies.tsx:        </div>
./src/components/FeaturedCompanies.tsx:      </section>
./src/components/FeaturedCompanies.tsx:    );
./src/components/FeaturedCompanies.tsx:  }
./src/components/FeaturedCompanies.tsx:
./src/components/FeaturedCompanies.tsx:  return (
./src/components/FeaturedCompanies.tsx:    <section className="py-12">
./src/components/FeaturedCompanies.tsx:      <h2 className="text-3xl font-bold mb-8 text-center">Featured Companies</h2>
./src/components/FeaturedCompanies.tsx:      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
./src/components/FeaturedCompanies.tsx:        {companies.map(company => (
./src/components/FeaturedCompanies.tsx:          <CompanyCard key={company.id} company={company} />
./src/components/FeaturedCompanies.tsx:        ))}
./src/components/FeaturedCompanies.tsx:      </div>
./src/components/FeaturedCompanies.tsx:    </section>
./src/components/FeaturedCompanies.tsx:  );
./src/components/FeaturedCompanies.tsx:}
./src/components/FloatingAddButton.tsx:'use client'
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:import { useState } from 'react';
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:import { XMarkIcon } from '@heroicons/react/24/outline';
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:import { CompanyForm } from '@/components/CompanyForm';
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:export function FloatingAddButton() {
./src/components/FloatingAddButton.tsx:  const [isOpen, setIsOpen] = useState(false);
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:  return (
./src/components/FloatingAddButton.tsx:    <>
./src/components/FloatingAddButton.tsx:      <button
./src/components/FloatingAddButton.tsx:        onClick={() => setIsOpen(true)}
./src/components/FloatingAddButton.tsx:        className="fixed bottom-20 right-8 bg-blue-500 text-white p-4 rounded-full shadow-lg hover:bg-blue-600 transition-colors z-40"
./src/components/FloatingAddButton.tsx:      >
./src/components/FloatingAddButton.tsx:        Add Company
./src/components/FloatingAddButton.tsx:      </button>
./src/components/FloatingAddButton.tsx:
./src/components/FloatingAddButton.tsx:      {isOpen && (
./src/components/FloatingAddButton.tsx:        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
./src/components/FloatingAddButton.tsx:          <div className="bg-white dark:bg-gray-800 rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto relative">
./src/components/FloatingAddButton.tsx:            <button
./src/components/FloatingAddButton.tsx:              onClick={() => setIsOpen(false)}
./src/components/FloatingAddButton.tsx:              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
./src/components/FloatingAddButton.tsx:            >
./src/components/FloatingAddButton.tsx:              <XMarkIcon className="w-6 h-6" />
./src/components/FloatingAddButton.tsx:            </button>
./src/components/FloatingAddButton.tsx:            <div className="p-6">
./src/components/FloatingAddButton.tsx:              <h2 className="text-2xl font-bold mb-4">Add New Company</h2>
./src/components/FloatingAddButton.tsx:              <CompanyForm onSuccess={() => setIsOpen(false)} />
./src/components/FloatingAddButton.tsx:            </div>
./src/components/FloatingAddButton.tsx:          </div>
./src/components/FloatingAddButton.tsx:        </div>
./src/components/FloatingAddButton.tsx:      )}
./src/components/FloatingAddButton.tsx:    </>
./src/components/FloatingAddButton.tsx:  );
./src/components/FloatingAddButton.tsx:}
./src/components/Footer.tsx:'use client'
./src/components/Footer.tsx:
./src/components/Footer.tsx:import Link from 'next/link';
./src/components/Footer.tsx:
./src/components/Footer.tsx:import { motion } from 'framer-motion';
./src/components/Footer.tsx:
./src/components/Footer.tsx:
./src/components/Footer.tsx:
./src/components/Footer.tsx:
./src/components/Footer.tsx:
./src/components/Footer.tsx:export function Footer() {
./src/components/Footer.tsx:  const currentYear = new Date().getFullYear();
./src/components/Footer.tsx:
./src/components/Footer.tsx:  const footerLinks = [
./src/components/Footer.tsx:    {
./src/components/Footer.tsx:      title: 'Company',
./src/components/Footer.tsx:      links: [
./src/components/Footer.tsx:        { name: 'About Us', href: '/about' },
./src/components/Footer.tsx:        { name: 'Contact', href: '/contact' },
./src/components/Footer.tsx:        { name: 'Careers', href: '/careers' },
./src/components/Footer.tsx:        { name: 'Blog', href: '/blog' },
./src/components/Footer.tsx:      ],
./src/components/Footer.tsx:    },
./src/components/Footer.tsx:    {
./src/components/Footer.tsx:      title: 'Legal',
./src/components/Footer.tsx:      links: [
./src/components/Footer.tsx:        { name: 'Terms of Service', href: '/terms' },
./src/components/Footer.tsx:        { name: 'Privacy Policy', href: '/privacy' },
./src/components/Footer.tsx:        { name: 'Cookie Policy', href: '/cookies' },
./src/components/Footer.tsx:        { name: 'Guidelines', href: '/guidelines' },
./src/components/Footer.tsx:      ],
./src/components/Footer.tsx:    },
./src/components/Footer.tsx:    {
./src/components/Footer.tsx:      title: 'Support',
./src/components/Footer.tsx:      links: [
./src/components/Footer.tsx:        { name: 'Help Center', href: '/help' },
./src/components/Footer.tsx:        { name: 'Report Issue', href: '/report' },
./src/components/Footer.tsx:        { name: 'FAQ', href: '/faq' },
./src/components/Footer.tsx:        { name: 'Safety Center', href: '/safety' },
./src/components/Footer.tsx:      ],
./src/components/Footer.tsx:    },
./src/components/Footer.tsx:  ];
./src/components/Footer.tsx:
./src/components/Footer.tsx:  return (
./src/components/Footer.tsx:    <footer className="bg-gray-900 text-gray-300">
./src/components/Footer.tsx:      <div className="container mx-auto px-6 py-12">
./src/components/Footer.tsx:        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
./src/components/Footer.tsx:          {/* Brand Section */}
./src/components/Footer.tsx:          <div className="space-y-4">
./src/components/Footer.tsx:            <Link 
./src/components/Footer.tsx:              href="/" 
./src/components/Footer.tsx:              className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-indigo-400"
./src/components/Footer.tsx:            >
./src/components/Footer.tsx:              RME
./src/components/Footer.tsx:            </Link>
./src/components/Footer.tsx:            <p className="text-sm text-gray-400 mt-2">
./src/components/Footer.tsx:              Empowering workplace transparency and accountability through honest employee reviews.
./src/components/Footer.tsx:            </p>
./src/components/Footer.tsx:            <div className="flex space-x-4 mt-4">
./src/components/Footer.tsx:              <motion.a
./src/components/Footer.tsx:                href="https://twitter.com/ratemyemployer"
./src/components/Footer.tsx:                target="_blank"
./src/components/Footer.tsx:                rel="noopener noreferrer"
./src/components/Footer.tsx:                className="text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:                whileHover={{ scale: 1.1 }}
./src/components/Footer.tsx:                whileTap={{ scale: 0.95 }}
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
./src/components/Footer.tsx:                  <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
./src/components/Footer.tsx:                </svg>
./src/components/Footer.tsx:              </motion.a>
./src/components/Footer.tsx:              <motion.a
./src/components/Footer.tsx:                href="https://linkedin.com/company/ratemyemployer"
./src/components/Footer.tsx:                target="_blank"
./src/components/Footer.tsx:                rel="noopener noreferrer"
./src/components/Footer.tsx:                className="text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:                whileHover={{ scale: 1.1 }}
./src/components/Footer.tsx:                whileTap={{ scale: 0.95 }}
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
./src/components/Footer.tsx:                  <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" />
./src/components/Footer.tsx:                </svg>
./src/components/Footer.tsx:              </motion.a>
./src/components/Footer.tsx:              <motion.a
./src/components/Footer.tsx:                href="https://github.com/ratemyemployer"
./src/components/Footer.tsx:                target="_blank"
./src/components/Footer.tsx:                rel="noopener noreferrer"
./src/components/Footer.tsx:                className="text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:                whileHover={{ scale: 1.1 }}
./src/components/Footer.tsx:                whileTap={{ scale: 0.95 }}
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
./src/components/Footer.tsx:                  <path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
./src/components/Footer.tsx:                </svg>
./src/components/Footer.tsx:              </motion.a>
./src/components/Footer.tsx:            </div>
./src/components/Footer.tsx:          </div>
./src/components/Footer.tsx:
./src/components/Footer.tsx:          {/* Links Sections */}
./src/components/Footer.tsx:          {footerLinks.map((section) => (
./src/components/Footer.tsx:            <div key={section.title}>
./src/components/Footer.tsx:              <h3 className="text-lg font-semibold text-white mb-4">{section.title}</h3>
./src/components/Footer.tsx:              <ul className="space-y-3">
./src/components/Footer.tsx:                {section.links.map((link) => (
./src/components/Footer.tsx:                  <li key={link.name}>
./src/components/Footer.tsx:                    <Link
./src/components/Footer.tsx:                      href={link.href}
./src/components/Footer.tsx:                      className="text-gray-400 hover:text-blue-400 transition-colors text-sm"
./src/components/Footer.tsx:                    >
./src/components/Footer.tsx:                      {link.name}
./src/components/Footer.tsx:                    </Link>
./src/components/Footer.tsx:                  </li>
./src/components/Footer.tsx:                ))}
./src/components/Footer.tsx:              </ul>
./src/components/Footer.tsx:            </div>
./src/components/Footer.tsx:          ))}
./src/components/Footer.tsx:        </div>
./src/components/Footer.tsx:
./src/components/Footer.tsx:        {/* Bottom Section */}
./src/components/Footer.tsx:        <div className="border-t border-gray-800 mt-12 pt-8">
./src/components/Footer.tsx:          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
./src/components/Footer.tsx:            <p className="text-sm text-gray-400">
./src/components/Footer.tsx:              © {currentYear} RateMyEmployer. All rights reserved.
./src/components/Footer.tsx:            </p>
./src/components/Footer.tsx:            <div className="flex space-x-6">
./src/components/Footer.tsx:              <Link
./src/components/Footer.tsx:                href="/accessibility"
./src/components/Footer.tsx:                className="text-sm text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                Accessibility
./src/components/Footer.tsx:              </Link>
./src/components/Footer.tsx:              <Link
./src/components/Footer.tsx:                href="/sitemap"
./src/components/Footer.tsx:                className="text-sm text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                Sitemap
./src/components/Footer.tsx:              </Link>
./src/components/Footer.tsx:              <button
./src/components/Footer.tsx:                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
./src/components/Footer.tsx:                className="text-sm text-gray-400 hover:text-blue-400 transition-colors"
./src/components/Footer.tsx:              >
./src/components/Footer.tsx:                Back to top ↑
./src/components/Footer.tsx:              </button>
./src/components/Footer.tsx:            </div>
./src/components/Footer.tsx:          </div>
./src/components/Footer.tsx:        </div>
./src/components/Footer.tsx:      </div>
./src/components/Footer.tsx:    </footer>
./src/components/Footer.tsx:  );
./src/components/Footer.tsx:}
./src/components/HomeClient.tsx:'use client';
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:import { useState, useEffect } from 'react';
./src/components/HomeClient.tsx:import { useRouter } from 'next/navigation';
./src/components/HomeClient.tsx:import { useForm } from 'react-hook-form';
./src/components/HomeClient.tsx:import { zodResolver } from '@hookform/resolvers/zod';
./src/components/HomeClient.tsx:import { X } from 'lucide-react';
./src/components/HomeClient.tsx:import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';
./src/components/HomeClient.tsx:import { z } from 'zod';
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:import { useDebounce } from '@/hooks/useDebounce';
./src/components/HomeClient.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/HomeClient.tsx:import { INDUSTRIES, type Industry, type JoinedCompany } from '@/types';
./src/components/HomeClient.tsx:import { companySchema, type CompanyFormData, type ReviewFormData } from '@/lib/schemas';
./src/components/HomeClient.tsx:import type { Database } from '@/types/database';
./src/components/HomeClient.tsx:import { Button } from '@/components/ui/button';
./src/components/HomeClient.tsx:import { Input } from '@/components/ui/input';
./src/components/HomeClient.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/components/HomeClient.tsx:import { LocationAutocomplete } from '@/components/LocationAutocomplete';
./src/components/HomeClient.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/components/HomeClient.tsx:import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
./src/components/HomeClient.tsx:import { createCompany } from '@/lib/database';
./src/components/HomeClient.tsx:import { useToast } from '@/components/ui/use-toast';
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:type SearchResult = JoinedCompany;
./src/components/HomeClient.tsx:type DbReview = Database['public']['Tables']['reviews'];
./src/components/HomeClient.tsx:type DbCompany = Database['public']['Tables']['companies'];
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:export const HomeClient = () => {
./src/components/HomeClient.tsx:  const { user } = useAuth();
./src/components/HomeClient.tsx:  const router = useRouter();
./src/components/HomeClient.tsx:  const [searchQuery, setSearchQuery] = useState('');
./src/components/HomeClient.tsx:  const debouncedSearchQuery = useDebounce(searchQuery, 300);
./src/components/HomeClient.tsx:  const [loading, setLoading] = useState(false);
./src/components/HomeClient.tsx:  const [showAddCompany, setShowAddCompany] = useState(false);
./src/components/HomeClient.tsx:  const [showReviewModal, setShowReviewModal] = useState(false);
./src/components/HomeClient.tsx:  const [selectedCompany, setSelectedCompany] = useState<SearchResult | null>(null);
./src/components/HomeClient.tsx:  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
./src/components/HomeClient.tsx:  const [showDropdown, setShowDropdown] = useState(false);
./src/components/HomeClient.tsx:  const supabase = createClientComponentClient<Database>();
./src/components/HomeClient.tsx:  const { toast } = useToast();
./src/components/HomeClient.tsx:  const [isSubmitting, setIsSubmitting] = useState(false);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const {
./src/components/HomeClient.tsx:    register,
./src/components/HomeClient.tsx:    handleSubmit,
./src/components/HomeClient.tsx:    reset,
./src/components/HomeClient.tsx:    setValue,
./src/components/HomeClient.tsx:    watch,
./src/components/HomeClient.tsx:    formState: { errors },
./src/components/HomeClient.tsx:  } = useForm<CompanyFormData>({
./src/components/HomeClient.tsx:    resolver: zodResolver(companySchema),
./src/components/HomeClient.tsx:    defaultValues: {
./src/components/HomeClient.tsx:      name: '',
./src/components/HomeClient.tsx:      website: '',
./src/components/HomeClient.tsx:      industry: undefined,
./src/components/HomeClient.tsx:      location: '',
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:  });
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const locationValue = watch('location');
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const handleSearchChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
./src/components/HomeClient.tsx:    const value = e.target.value;
./src/components/HomeClient.tsx:    setSearchQuery(value);
./src/components/HomeClient.tsx:    setShowDropdown(true);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:    if (!value.trim()) {
./src/components/HomeClient.tsx:      setSearchResults([]);
./src/components/HomeClient.tsx:      setShowDropdown(false);
./src/components/HomeClient.tsx:      return;
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:    try {
./src/components/HomeClient.tsx:      setLoading(true);
./src/components/HomeClient.tsx:      const { data, error } = await supabase
./src/components/HomeClient.tsx:        .from('companies')
./src/components/HomeClient.tsx:        .select('*')
./src/components/HomeClient.tsx:        .ilike('name', `%${value}%`)
./src/components/HomeClient.tsx:        .limit(5);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      if (error) throw error;
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      // Filter out null industries and provide a default
./src/components/HomeClient.tsx:      const validResults = (data || []).map(company => ({
./src/components/HomeClient.tsx:        ...company,
./src/components/HomeClient.tsx:        industry: company.industry || 'Uncategorized'
./src/components/HomeClient.tsx:      }));
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      setSearchResults(validResults);
./src/components/HomeClient.tsx:    } catch (error) {
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Error',
./src/components/HomeClient.tsx:        description: 'Failed to search companies',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:      setSearchResults([]);
./src/components/HomeClient.tsx:    } finally {
./src/components/HomeClient.tsx:      setLoading(false);
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:  };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  // Handle clicking outside the dropdown
./src/components/HomeClient.tsx:  useEffect(() => {
./src/components/HomeClient.tsx:    const handleClickOutside = (event: MouseEvent) => {
./src/components/HomeClient.tsx:      const dropdown = document.querySelector('.search-dropdown');
./src/components/HomeClient.tsx:      if (dropdown && !dropdown.contains(event.target as Node)) {
./src/components/HomeClient.tsx:        setShowDropdown(false);
./src/components/HomeClient.tsx:      }
./src/components/HomeClient.tsx:    };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:    document.addEventListener('mousedown', handleClickOutside);
./src/components/HomeClient.tsx:    return () => document.removeEventListener('mousedown', handleClickOutside);
./src/components/HomeClient.tsx:  }, []);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const handleWriteReview = (company: SearchResult) => {
./src/components/HomeClient.tsx:    if (!user) {
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Authentication Required',
./src/components/HomeClient.tsx:        description: 'Please sign in to write a review',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:      router.push('/auth');
./src/components/HomeClient.tsx:      return;
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:    setSelectedCompany(company);
./src/components/HomeClient.tsx:    setShowReviewModal(true);
./src/components/HomeClient.tsx:    setShowDropdown(false);
./src/components/HomeClient.tsx:  };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const handleReviewSubmit = async (formData: ReviewFormData): Promise<void> => {
./src/components/HomeClient.tsx:    if (!selectedCompany || !user) {
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Error',
./src/components/HomeClient.tsx:        description: 'Please select a company and log in to submit a review',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:      return;
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:    if (!formData.rating) {
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Error',
./src/components/HomeClient.tsx:        description: 'Please provide a rating',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:      return;
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:    try {
./src/components/HomeClient.tsx:      const cleanData: DbReview['Insert'] = {
./src/components/HomeClient.tsx:        company_id: selectedCompany.id,
./src/components/HomeClient.tsx:        user_id: user.id,
./src/components/HomeClient.tsx:        title: formData.title,
./src/components/HomeClient.tsx:        rating: formData.rating,
./src/components/HomeClient.tsx:        pros: formData.pros,
./src/components/HomeClient.tsx:        cons: formData.cons,
./src/components/HomeClient.tsx:        position: formData.position || null,
./src/components/HomeClient.tsx:        employment_status: formData.employment_status || null,
./src/components/HomeClient.tsx:        is_current_employee: formData.is_current_employee || null,
./src/components/HomeClient.tsx:        reviewer_email: user.email || null,
./src/components/HomeClient.tsx:        reviewer_id: user.id,
./src/components/HomeClient.tsx:        reviewer_name: user.user_metadata?.full_name || null,
./src/components/HomeClient.tsx:        status: 'pending',
./src/components/HomeClient.tsx:        created_at: new Date().toISOString(),
./src/components/HomeClient.tsx:        updated_at: new Date().toISOString()
./src/components/HomeClient.tsx:      };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      const { error } = await supabase
./src/components/HomeClient.tsx:        .from('reviews')
./src/components/HomeClient.tsx:        .insert(cleanData);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      if (error) {
./src/components/HomeClient.tsx:        toast({
./src/components/HomeClient.tsx:          title: 'Error',
./src/components/HomeClient.tsx:          description: error.message,
./src/components/HomeClient.tsx:          variant: 'destructive'
./src/components/HomeClient.tsx:        });
./src/components/HomeClient.tsx:        return;
./src/components/HomeClient.tsx:      }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Success',
./src/components/HomeClient.tsx:        description: 'Review submitted successfully',
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      setShowReviewModal(false);
./src/components/HomeClient.tsx:      router.refresh();
./src/components/HomeClient.tsx:    } catch (error) {
./src/components/HomeClient.tsx:      console.error('Error submitting review:', error);
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Error',
./src/components/HomeClient.tsx:        description: 'Failed to submit review',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:  };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  const onSubmit = async (data: z.infer<typeof companySchema>) => {
./src/components/HomeClient.tsx:    try {
./src/components/HomeClient.tsx:      setIsSubmitting(true);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      if (!data.industry || !data.location) {
./src/components/HomeClient.tsx:        toast({
./src/components/HomeClient.tsx:          title: 'Error',
./src/components/HomeClient.tsx:          description: 'Industry and location are required',
./src/components/HomeClient.tsx:          variant: 'destructive'
./src/components/HomeClient.tsx:        });
./src/components/HomeClient.tsx:        return;
./src/components/HomeClient.tsx:      }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      const cleanData: DbCompany['Row'] = {
./src/components/HomeClient.tsx:        id: 0, // This will be ignored by Supabase
./src/components/HomeClient.tsx:        name: data.name.trim(),
./src/components/HomeClient.tsx:        website: data.website?.trim() || null,
./src/components/HomeClient.tsx:        industry: data.industry,
./src/components/HomeClient.tsx:        location: data.location,
./src/components/HomeClient.tsx:        description: null,
./src/components/HomeClient.tsx:        logo_url: null,
./src/components/HomeClient.tsx:        size: null,
./src/components/HomeClient.tsx:        ceo: null,
./src/components/HomeClient.tsx:        company_values: null,
./src/components/HomeClient.tsx:        benefits: null,
./src/components/HomeClient.tsx:        created_by: user?.id || null,
./src/components/HomeClient.tsx:        verification_status: 'pending',
./src/components/HomeClient.tsx:        verified: null,
./src/components/HomeClient.tsx:        created_at: new Date().toISOString(),
./src/components/HomeClient.tsx:        updated_at: new Date().toISOString()
./src/components/HomeClient.tsx:      };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      const { error } = await createCompany(cleanData);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      if (error) {
./src/components/HomeClient.tsx:        toast({
./src/components/HomeClient.tsx:          title: 'Error',
./src/components/HomeClient.tsx:          description: error.message,
./src/components/HomeClient.tsx:          variant: 'destructive'
./src/components/HomeClient.tsx:        });
./src/components/HomeClient.tsx:        return;
./src/components/HomeClient.tsx:      }
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Success',
./src/components/HomeClient.tsx:        description: 'Company created successfully',
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      // Reset form
./src/components/HomeClient.tsx:      reset();
./src/components/HomeClient.tsx:      setValue('location', '');
./src/components/HomeClient.tsx:      setShowDropdown(false);
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      // Refresh search results if there's a search query
./src/components/HomeClient.tsx:      if (searchQuery) {
./src/components/HomeClient.tsx:        handleSearchChange({ target: { value: searchQuery } } as React.ChangeEvent<HTMLInputElement>);
./src/components/HomeClient.tsx:      }
./src/components/HomeClient.tsx:    } catch (error) {
./src/components/HomeClient.tsx:      console.error('Error creating company:', error);
./src/components/HomeClient.tsx:      toast({
./src/components/HomeClient.tsx:        title: 'Error',
./src/components/HomeClient.tsx:        description: 'Failed to create company',
./src/components/HomeClient.tsx:        variant: 'destructive'
./src/components/HomeClient.tsx:      });
./src/components/HomeClient.tsx:    } finally {
./src/components/HomeClient.tsx:      setIsSubmitting(false);
./src/components/HomeClient.tsx:    }
./src/components/HomeClient.tsx:  };
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:  return (
./src/components/HomeClient.tsx:    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white">
./src/components/HomeClient.tsx:      {/* Hero Section */}
./src/components/HomeClient.tsx:      <div className="container mx-auto px-4 py-16">
./src/components/HomeClient.tsx:        <div className="text-center max-w-[1200px] mx-auto">
./src/components/HomeClient.tsx:          <h1 className="text-[120px] font-bold bg-gradient-to-r from-[#4F46E5] via-[#7C3AED] to-[#9333EA] bg-clip-text text-transparent leading-none tracking-tight mb-8">
./src/components/HomeClient.tsx:            Rate My Employer
./src/components/HomeClient.tsx:          </h1>
./src/components/HomeClient.tsx:          <h2 className="text-[48px] text-[#374151] font-semibold mb-4">
./src/components/HomeClient.tsx:            Share Your Work Experience
./src/components/HomeClient.tsx:          </h2>
./src/components/HomeClient.tsx:          <p className="text-[24px] text-[#6B7280] mb-16">
./src/components/HomeClient.tsx:            Help others make informed career decisions.
./src/components/HomeClient.tsx:          </p>
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:          {/* Search Bar with Dropdown */}
./src/components/HomeClient.tsx:          <div className="max-w-3xl mx-auto mb-12">
./src/components/HomeClient.tsx:            <div className="relative">
./src/components/HomeClient.tsx:              <Input
./src/components/HomeClient.tsx:                type="text"
./src/components/HomeClient.tsx:                placeholder="Search for a company..."
./src/components/HomeClient.tsx:                value={searchQuery}
./src/components/HomeClient.tsx:                onChange={handleSearchChange}
./src/components/HomeClient.tsx:                onFocus={() => setShowDropdown(true)}
./src/components/HomeClient.tsx:                className="w-full px-8 py-6 text-xl border border-gray-200 rounded-full shadow-lg focus:outline-none focus:ring-2 focus:ring-[#4F46E5] bg-white"
./src/components/HomeClient.tsx:              />
./src/components/HomeClient.tsx:              
./src/components/HomeClient.tsx:              {/* Search Results Dropdown */}
./src/components/HomeClient.tsx:              {showDropdown && (searchResults.length > 0 || loading || searchQuery) && (
./src/components/HomeClient.tsx:                <div className="absolute z-10 w-full mt-2 bg-white rounded-lg shadow-lg border border-gray-200 search-dropdown">
./src/components/HomeClient.tsx:                  {loading ? (
./src/components/HomeClient.tsx:                    <div className="p-4 text-center">
./src/components/HomeClient.tsx:                      <LoadingSpinner className="w-6 h-6 text-[#4F46E5]" />
./src/components/HomeClient.tsx:                    </div>
./src/components/HomeClient.tsx:                  ) : searchResults.length > 0 ? (
./src/components/HomeClient.tsx:                    <div className="py-2">
./src/components/HomeClient.tsx:                      {searchResults.map((company) => (
./src/components/HomeClient.tsx:                        <div
./src/components/HomeClient.tsx:                          key={company.id}
./src/components/HomeClient.tsx:                          className="px-4 py-3 hover:bg-gray-50 flex items-center justify-between"
./src/components/HomeClient.tsx:                        >
./src/components/HomeClient.tsx:                          <div>
./src/components/HomeClient.tsx:                            <div className="font-medium">{company.name}</div>
./src/components/HomeClient.tsx:                            <div className="text-sm text-gray-500">{company.industry}</div>
./src/components/HomeClient.tsx:                          </div>
./src/components/HomeClient.tsx:                          <Button
./src/components/HomeClient.tsx:                            onClick={() => handleWriteReview(company)}
./src/components/HomeClient.tsx:                            className="bg-[#4F46E5] text-white hover:bg-[#4338CA]"
./src/components/HomeClient.tsx:                          >
./src/components/HomeClient.tsx:                            Write Review
./src/components/HomeClient.tsx:                          </Button>
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                      ))}
./src/components/HomeClient.tsx:                    </div>
./src/components/HomeClient.tsx:                  ) : searchQuery && (
./src/components/HomeClient.tsx:                    <div className="p-4 text-center">
./src/components/HomeClient.tsx:                      <p className="text-gray-600 mb-3">No companies found matching your search.</p>
./src/components/HomeClient.tsx:                      <Button
./src/components/HomeClient.tsx:                        onClick={() => {
./src/components/HomeClient.tsx:                          if (!user) {
./src/components/HomeClient.tsx:                            toast({
./src/components/HomeClient.tsx:                              title: 'Authentication Required',
./src/components/HomeClient.tsx:                              description: 'Please sign in to add a company',
./src/components/HomeClient.tsx:                              variant: 'destructive'
./src/components/HomeClient.tsx:                            });
./src/components/HomeClient.tsx:                            router.push('/auth');
./src/components/HomeClient.tsx:                            return;
./src/components/HomeClient.tsx:                          }
./src/components/HomeClient.tsx:                          setShowAddCompany(true);
./src/components/HomeClient.tsx:                          setValue('name', searchQuery.trim());
./src/components/HomeClient.tsx:                          setShowDropdown(false);
./src/components/HomeClient.tsx:                        }}
./src/components/HomeClient.tsx:                        className="bg-[#4F46E5] text-white hover:bg-[#4338CA]"
./src/components/HomeClient.tsx:                      >
./src/components/HomeClient.tsx:                        Add "{searchQuery}" as a new company
./src/components/HomeClient.tsx:                      </Button>
./src/components/HomeClient.tsx:                    </div>
./src/components/HomeClient.tsx:                  )}
./src/components/HomeClient.tsx:                </div>
./src/components/HomeClient.tsx:              )}
./src/components/HomeClient.tsx:            </div>
./src/components/HomeClient.tsx:          </div>
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:          {/* Background Check Button */}
./src/components/HomeClient.tsx:          <a 
./src/components/HomeClient.tsx:            href="/background-check" 
./src/components/HomeClient.tsx:            className="inline-block px-8 py-4 text-lg bg-[#4F46E5] text-white rounded-full font-medium hover:bg-[#4338CA] transition-colors shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 transition-transform"
./src/components/HomeClient.tsx:          >
./src/components/HomeClient.tsx:            Try Background Check
./src/components/HomeClient.tsx:          </a>
./src/components/HomeClient.tsx:        </div>
./src/components/HomeClient.tsx:      </div>
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      {/* Add Company Modal */}
./src/components/HomeClient.tsx:      {showAddCompany && (
./src/components/HomeClient.tsx:        <div className="fixed inset-0 overflow-hidden z-50">
./src/components/HomeClient.tsx:          <div className="absolute inset-0 overflow-hidden">
./src/components/HomeClient.tsx:            <div className="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
./src/components/HomeClient.tsx:            <div className="fixed inset-y-0 right-0 pl-10 max-w-full flex">
./src/components/HomeClient.tsx:              <div className="relative w-screen max-w-md">
./src/components/HomeClient.tsx:                <div className="h-full flex flex-col bg-white dark:bg-gray-900 shadow-xl">
./src/components/HomeClient.tsx:                  <div className="flex-1 h-0 overflow-y-auto">
./src/components/HomeClient.tsx:                    <div className="py-6 px-4 sm:px-6">
./src/components/HomeClient.tsx:                      <div className="flex items-start justify-between">
./src/components/HomeClient.tsx:                        <h2 className="text-lg font-medium text-gray-900 dark:text-white">
./src/components/HomeClient.tsx:                          Add New Company
./src/components/HomeClient.tsx:                        </h2>
./src/components/HomeClient.tsx:                        <Button
./src/components/HomeClient.tsx:                          variant="ghost"
./src/components/HomeClient.tsx:                          size="icon"
./src/components/HomeClient.tsx:                          onClick={() => setShowAddCompany(false)}
./src/components/HomeClient.tsx:                        >
./src/components/HomeClient.tsx:                          <X className="h-6 w-6" />
./src/components/HomeClient.tsx:                        </Button>
./src/components/HomeClient.tsx:                      </div>
./src/components/HomeClient.tsx:                      <form onSubmit={handleSubmit(onSubmit)} className="mt-6 space-y-6">
./src/components/HomeClient.tsx:                        <div>
./src/components/HomeClient.tsx:                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/components/HomeClient.tsx:                            Company Name
./src/components/HomeClient.tsx:                          </label>
./src/components/HomeClient.tsx:                          <Input
./src/components/HomeClient.tsx:                            {...register('name')}
./src/components/HomeClient.tsx:                            className="mt-1"
./src/components/HomeClient.tsx:                          />
./src/components/HomeClient.tsx:                          {errors.name && (
./src/components/HomeClient.tsx:                            <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
./src/components/HomeClient.tsx:                          )}
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                        <div>
./src/components/HomeClient.tsx:                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/components/HomeClient.tsx:                            Website (optional)
./src/components/HomeClient.tsx:                          </label>
./src/components/HomeClient.tsx:                          <Input 
./src/components/HomeClient.tsx:                            {...register('website')}
./src/components/HomeClient.tsx:                            className="mt-1"
./src/components/HomeClient.tsx:                            placeholder="https://example.com"
./src/components/HomeClient.tsx:                            type="url"
./src/components/HomeClient.tsx:                          />
./src/components/HomeClient.tsx:                          {errors.website && (
./src/components/HomeClient.tsx:                            <p className="mt-1 text-sm text-red-600">{errors.website.message}</p>
./src/components/HomeClient.tsx:                          )}
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                        <div>
./src/components/HomeClient.tsx:                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/components/HomeClient.tsx:                            Industry
./src/components/HomeClient.tsx:                          </label>
./src/components/HomeClient.tsx:                          <Select
./src/components/HomeClient.tsx:                            onValueChange={(value: Industry) => setValue('industry', value)}
./src/components/HomeClient.tsx:                          >
./src/components/HomeClient.tsx:                            <SelectTrigger className="mt-1">
./src/components/HomeClient.tsx:                              <SelectValue placeholder="Select an industry" />
./src/components/HomeClient.tsx:                            </SelectTrigger>
./src/components/HomeClient.tsx:                            <SelectContent>
./src/components/HomeClient.tsx:                              {INDUSTRIES.map((industry) => (
./src/components/HomeClient.tsx:                                <SelectItem key={industry} value={industry}>
./src/components/HomeClient.tsx:                                  {industry}
./src/components/HomeClient.tsx:                                </SelectItem>
./src/components/HomeClient.tsx:                              ))}
./src/components/HomeClient.tsx:                            </SelectContent>
./src/components/HomeClient.tsx:                          </Select>
./src/components/HomeClient.tsx:                          {errors.industry && (
./src/components/HomeClient.tsx:                            <p className="mt-1 text-sm text-red-600">{errors.industry.message}</p>
./src/components/HomeClient.tsx:                          )}
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                        <div>
./src/components/HomeClient.tsx:                          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
./src/components/HomeClient.tsx:                            Location
./src/components/HomeClient.tsx:                          </label>
./src/components/HomeClient.tsx:                          <LocationAutocomplete
./src/components/HomeClient.tsx:                            value={locationValue || ''}
./src/components/HomeClient.tsx:                            onChange={(value) => {
./src/components/HomeClient.tsx:                              setValue('location', value, { shouldValidate: true });
./src/components/HomeClient.tsx:                            }}
./src/components/HomeClient.tsx:                            className="w-full p-2 border rounded-lg dark:bg-gray-800 dark:border-gray-700"
./src/components/HomeClient.tsx:                            placeholder="Enter a location"
./src/components/HomeClient.tsx:                          />
./src/components/HomeClient.tsx:                          {errors.location && (
./src/components/HomeClient.tsx:                            <p className="mt-1 text-sm text-red-600">{errors.location.message}</p>
./src/components/HomeClient.tsx:                          )}
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                        <Button
./src/components/HomeClient.tsx:                          type="submit"
./src/components/HomeClient.tsx:                          className="w-full bg-[#4F46E5] text-white hover:bg-[#4338CA]"
./src/components/HomeClient.tsx:                          disabled={isSubmitting}
./src/components/HomeClient.tsx:                        >
./src/components/HomeClient.tsx:                          {isSubmitting ? <LoadingSpinner /> : 'Add Company'}
./src/components/HomeClient.tsx:                        </Button>
./src/components/HomeClient.tsx:                      </form>
./src/components/HomeClient.tsx:                    </div>
./src/components/HomeClient.tsx:                  </div>
./src/components/HomeClient.tsx:                </div>
./src/components/HomeClient.tsx:              </div>
./src/components/HomeClient.tsx:            </div>
./src/components/HomeClient.tsx:          </div>
./src/components/HomeClient.tsx:        </div>
./src/components/HomeClient.tsx:      )}
./src/components/HomeClient.tsx:
./src/components/HomeClient.tsx:      {/* Add Review Modal */}
./src/components/HomeClient.tsx:      {showReviewModal && selectedCompany && (
./src/components/HomeClient.tsx:        <div className="fixed inset-0 overflow-hidden z-50">
./src/components/HomeClient.tsx:          <div className="absolute inset-0 overflow-hidden">
./src/components/HomeClient.tsx:            <div className="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity" 
./src/components/HomeClient.tsx:              onClick={() => setShowReviewModal(false)}
./src/components/HomeClient.tsx:            />
./src/components/HomeClient.tsx:            <div className="fixed inset-y-0 right-0 max-w-full flex">
./src/components/HomeClient.tsx:              <div className="relative w-screen max-w-lg">
./src/components/HomeClient.tsx:                <div className="h-full flex flex-col bg-white dark:bg-gray-900 shadow-xl">
./src/components/HomeClient.tsx:                  <div className="flex-1 h-0 overflow-y-auto">
./src/components/HomeClient.tsx:                    <div className="py-6 px-4 sm:px-6">
./src/components/HomeClient.tsx:                      <div className="flex items-start justify-between">
./src/components/HomeClient.tsx:                        <div>
./src/components/HomeClient.tsx:                          <h2 className="text-lg font-medium text-gray-900 dark:text-white">
./src/components/HomeClient.tsx:                            Write a Review
./src/components/HomeClient.tsx:                          </h2>
./src/components/HomeClient.tsx:                          <p className="mt-1 text-sm text-gray-500">
./src/components/HomeClient.tsx:                            for {selectedCompany.name}
./src/components/HomeClient.tsx:                          </p>
./src/components/HomeClient.tsx:                        </div>
./src/components/HomeClient.tsx:                        <Button
./src/components/HomeClient.tsx:                          variant="ghost"
./src/components/HomeClient.tsx:                          size="icon"
./src/components/HomeClient.tsx:                          onClick={() => setShowReviewModal(false)}
./src/components/HomeClient.tsx:                        >
./src/components/HomeClient.tsx:                          <X className="h-6 w-6" />
./src/components/HomeClient.tsx:                        </Button>
./src/components/HomeClient.tsx:                      </div>
./src/components/HomeClient.tsx:                      <div className="mt-6">
./src/components/HomeClient.tsx:                        <ReviewForm
./src/components/HomeClient.tsx:                          companyId={selectedCompany.id}
./src/components/HomeClient.tsx:                          company={selectedCompany}
./src/components/HomeClient.tsx:                          onSubmit={handleReviewSubmit}
./src/components/HomeClient.tsx:                        />
./src/components/HomeClient.tsx:                      </div>
./src/components/HomeClient.tsx:                    </div>
./src/components/HomeClient.tsx:                  </div>
./src/components/HomeClient.tsx:                </div>
./src/components/HomeClient.tsx:              </div>
./src/components/HomeClient.tsx:            </div>
./src/components/HomeClient.tsx:          </div>
./src/components/HomeClient.tsx:        </div>
./src/components/HomeClient.tsx:      )}
./src/components/HomeClient.tsx:    </div>
./src/components/HomeClient.tsx:  );
./src/components/HomeClient.tsx:}; 
./src/components/layouts/AdminLayout.tsx:'use client'
./src/components/layouts/AdminLayout.tsx:
./src/components/layouts/AdminLayout.tsx:import { ReactNode } from 'react';
./src/components/layouts/AdminLayout.tsx:import Link from 'next/link';
./src/components/layouts/AdminLayout.tsx:import { withAuth } from '@/lib/auth/withAuth';
./src/components/layouts/AdminLayout.tsx:
./src/components/layouts/AdminLayout.tsx:interface AdminLayoutProps {
./src/components/layouts/AdminLayout.tsx:  children: ReactNode;
./src/components/layouts/AdminLayout.tsx:}
./src/components/layouts/AdminLayout.tsx:
./src/components/layouts/AdminLayout.tsx:function AdminLayoutBase({ children }: AdminLayoutProps): JSX.Element {
./src/components/layouts/AdminLayout.tsx:  return (
./src/components/layouts/AdminLayout.tsx:    <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
./src/components/layouts/AdminLayout.tsx:      <nav className="bg-white dark:bg-gray-800 shadow">
./src/components/layouts/AdminLayout.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/components/layouts/AdminLayout.tsx:          <div className="flex justify-between h-16">
./src/components/layouts/AdminLayout.tsx:            <div className="flex">
./src/components/layouts/AdminLayout.tsx:              <div className="flex-shrink-0 flex items-center">
./src/components/layouts/AdminLayout.tsx:                <Link href="/admin" className="text-xl font-bold text-gray-800 dark:text-white">
./src/components/layouts/AdminLayout.tsx:                  Admin Dashboard
./src/components/layouts/AdminLayout.tsx:                </Link>
./src/components/layouts/AdminLayout.tsx:              </div>
./src/components/layouts/AdminLayout.tsx:              <div className="hidden sm:ml-6 sm:flex sm:space-x-8">
./src/components/layouts/AdminLayout.tsx:                <Link href="/admin" className="text-gray-900 dark:text-gray-100 hover:text-gray-500 dark:hover:text-gray-400 px-3 py-2 rounded-md text-sm font-medium">
./src/components/layouts/AdminLayout.tsx:                  Overview
./src/components/layouts/AdminLayout.tsx:                </Link>
./src/components/layouts/AdminLayout.tsx:                <Link href="/admin/users" className="text-gray-900 dark:text-gray-100 hover:text-gray-500 dark:hover:text-gray-400 px-3 py-2 rounded-md text-sm font-medium">
./src/components/layouts/AdminLayout.tsx:                  Users
./src/components/layouts/AdminLayout.tsx:                </Link>
./src/components/layouts/AdminLayout.tsx:                <Link href="/admin/analytics" className="text-gray-900 dark:text-gray-100 hover:text-gray-500 dark:hover:text-gray-400 px-3 py-2 rounded-md text-sm font-medium">
./src/components/layouts/AdminLayout.tsx:                  Analytics
./src/components/layouts/AdminLayout.tsx:                </Link>
./src/components/layouts/AdminLayout.tsx:              </div>
./src/components/layouts/AdminLayout.tsx:            </div>
./src/components/layouts/AdminLayout.tsx:          </div>
./src/components/layouts/AdminLayout.tsx:        </div>
./src/components/layouts/AdminLayout.tsx:      </nav>
./src/components/layouts/AdminLayout.tsx:      <main className="py-10">
./src/components/layouts/AdminLayout.tsx:        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
./src/components/layouts/AdminLayout.tsx:          {children}
./src/components/layouts/AdminLayout.tsx:        </div>
./src/components/layouts/AdminLayout.tsx:      </main>
./src/components/layouts/AdminLayout.tsx:    </div>
./src/components/layouts/AdminLayout.tsx:  );
./src/components/layouts/AdminLayout.tsx:}
./src/components/layouts/AdminLayout.tsx:
./src/components/layouts/AdminLayout.tsx:export const AdminLayout = withAuth(AdminLayoutBase);
./src/components/LoadingSpinner.tsx:import { Loader2 } from 'lucide-react';
./src/components/LoadingSpinner.tsx:import { cn } from '@/lib/utils';
./src/components/LoadingSpinner.tsx:
./src/components/LoadingSpinner.tsx:interface LoadingSpinnerProps {
./src/components/LoadingSpinner.tsx:  size?: 'sm' | 'md' | 'lg';
./src/components/LoadingSpinner.tsx:  className?: string;
./src/components/LoadingSpinner.tsx:  fullScreen?: boolean;
./src/components/LoadingSpinner.tsx:}
./src/components/LoadingSpinner.tsx:
./src/components/LoadingSpinner.tsx:const sizeClasses = {
./src/components/LoadingSpinner.tsx:  sm: 'w-4 h-4',
./src/components/LoadingSpinner.tsx:  md: 'w-8 h-8',
./src/components/LoadingSpinner.tsx:  lg: 'w-12 h-12',
./src/components/LoadingSpinner.tsx:};
./src/components/LoadingSpinner.tsx:
./src/components/LoadingSpinner.tsx:export function LoadingSpinner({ 
./src/components/LoadingSpinner.tsx:  size = 'md',
./src/components/LoadingSpinner.tsx:  className,
./src/components/LoadingSpinner.tsx:  fullScreen = false 
./src/components/LoadingSpinner.tsx:}: LoadingSpinnerProps) {
./src/components/LoadingSpinner.tsx:  const containerClasses = cn(
./src/components/LoadingSpinner.tsx:    'flex items-center justify-center',
./src/components/LoadingSpinner.tsx:    fullScreen && 'fixed inset-0 bg-white/80 backdrop-blur-sm',
./src/components/LoadingSpinner.tsx:    className
./src/components/LoadingSpinner.tsx:  );
./src/components/LoadingSpinner.tsx:
./src/components/LoadingSpinner.tsx:  return (
./src/components/LoadingSpinner.tsx:    <div className={containerClasses}>
./src/components/LoadingSpinner.tsx:      <Loader2 className={cn(
./src/components/LoadingSpinner.tsx:        'animate-spin text-blue-500',
./src/components/LoadingSpinner.tsx:        sizeClasses[size]
./src/components/LoadingSpinner.tsx:      )} />
./src/components/LoadingSpinner.tsx:    </div>
./src/components/LoadingSpinner.tsx:  );
./src/components/LoadingSpinner.tsx:}
./src/components/LocationAutocomplete.tsx:/// <reference types="google.maps" />
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:'use client'
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:import { useEffect, useRef, useState } from 'react';
./src/components/LocationAutocomplete.tsx:import { Input } from './ui/input';
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:declare global {
./src/components/LocationAutocomplete.tsx:  interface Window {
./src/components/LocationAutocomplete.tsx:    google: {
./src/components/LocationAutocomplete.tsx:      maps: {
./src/components/LocationAutocomplete.tsx:        places: {
./src/components/LocationAutocomplete.tsx:          AutocompleteService: new () => google.maps.places.AutocompleteService;
./src/components/LocationAutocomplete.tsx:          PlacesServiceStatus: {
./src/components/LocationAutocomplete.tsx:            OK: 'OK';
./src/components/LocationAutocomplete.tsx:            ZERO_RESULTS: 'ZERO_RESULTS';
./src/components/LocationAutocomplete.tsx:            OVER_QUERY_LIMIT: 'OVER_QUERY_LIMIT';
./src/components/LocationAutocomplete.tsx:            REQUEST_DENIED: 'REQUEST_DENIED';
./src/components/LocationAutocomplete.tsx:            INVALID_REQUEST: 'INVALID_REQUEST';
./src/components/LocationAutocomplete.tsx:          };
./src/components/LocationAutocomplete.tsx:        };
./src/components/LocationAutocomplete.tsx:      };
./src/components/LocationAutocomplete.tsx:    };
./src/components/LocationAutocomplete.tsx:  }
./src/components/LocationAutocomplete.tsx:}
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:interface LocationAutocompleteProps {
./src/components/LocationAutocomplete.tsx:  value: string;
./src/components/LocationAutocomplete.tsx:  onChange: (value: string) => void;
./src/components/LocationAutocomplete.tsx:  placeholder?: string;
./src/components/LocationAutocomplete.tsx:  className?: string;
./src/components/LocationAutocomplete.tsx:}
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:export const LocationAutocomplete = ({
./src/components/LocationAutocomplete.tsx:  value,
./src/components/LocationAutocomplete.tsx:  onChange,
./src/components/LocationAutocomplete.tsx:  placeholder = 'Enter a location',
./src/components/LocationAutocomplete.tsx:  className
./src/components/LocationAutocomplete.tsx:}: LocationAutocompleteProps) => {
./src/components/LocationAutocomplete.tsx:  const [predictions, setPredictions] = useState<google.maps.places.AutocompletePrediction[]>([]);
./src/components/LocationAutocomplete.tsx:  const autocompleteService = useRef<google.maps.places.AutocompleteService | null>(null);
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:  useEffect(() => {
./src/components/LocationAutocomplete.tsx:    if (!autocompleteService.current && window.google) {
./src/components/LocationAutocomplete.tsx:      autocompleteService.current = new window.google.maps.places.AutocompleteService();
./src/components/LocationAutocomplete.tsx:    }
./src/components/LocationAutocomplete.tsx:  }, []);
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
./src/components/LocationAutocomplete.tsx:    const value = e.target.value;
./src/components/LocationAutocomplete.tsx:    onChange(value);
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:    if (!value || !autocompleteService.current) {
./src/components/LocationAutocomplete.tsx:      setPredictions([]);
./src/components/LocationAutocomplete.tsx:      return;
./src/components/LocationAutocomplete.tsx:    }
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:    autocompleteService.current.getPlacePredictions(
./src/components/LocationAutocomplete.tsx:      {
./src/components/LocationAutocomplete.tsx:        input: value,
./src/components/LocationAutocomplete.tsx:        types: ['(cities)']
./src/components/LocationAutocomplete.tsx:      },
./src/components/LocationAutocomplete.tsx:      (predictions, status) => {
./src/components/LocationAutocomplete.tsx:        if (status === (window.google.maps.places as any).PlacesServiceStatus.OK && predictions) {
./src/components/LocationAutocomplete.tsx:          setPredictions(predictions);
./src/components/LocationAutocomplete.tsx:        } else {
./src/components/LocationAutocomplete.tsx:          setPredictions([]);
./src/components/LocationAutocomplete.tsx:        }
./src/components/LocationAutocomplete.tsx:      }
./src/components/LocationAutocomplete.tsx:    );
./src/components/LocationAutocomplete.tsx:  };
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:  return (
./src/components/LocationAutocomplete.tsx:    <div className="relative">
./src/components/LocationAutocomplete.tsx:      <Input
./src/components/LocationAutocomplete.tsx:        type="text"
./src/components/LocationAutocomplete.tsx:        value={value}
./src/components/LocationAutocomplete.tsx:        onChange={handleInputChange}
./src/components/LocationAutocomplete.tsx:        placeholder={placeholder}
./src/components/LocationAutocomplete.tsx:        className={className}
./src/components/LocationAutocomplete.tsx:      />
./src/components/LocationAutocomplete.tsx:      {predictions.length > 0 && (
./src/components/LocationAutocomplete.tsx:        <ul className="absolute z-10 w-full bg-white border border-gray-300 rounded-md mt-1 max-h-60 overflow-auto">
./src/components/LocationAutocomplete.tsx:          {predictions.map((prediction) => (
./src/components/LocationAutocomplete.tsx:            <li
./src/components/LocationAutocomplete.tsx:              key={prediction.place_id}
./src/components/LocationAutocomplete.tsx:              className="px-4 py-2 hover:bg-gray-100 cursor-pointer"
./src/components/LocationAutocomplete.tsx:              onClick={() => {
./src/components/LocationAutocomplete.tsx:                onChange(prediction.description);
./src/components/LocationAutocomplete.tsx:                setPredictions([]);
./src/components/LocationAutocomplete.tsx:              }}
./src/components/LocationAutocomplete.tsx:            >
./src/components/LocationAutocomplete.tsx:              {prediction.description}
./src/components/LocationAutocomplete.tsx:            </li>
./src/components/LocationAutocomplete.tsx:          ))}
./src/components/LocationAutocomplete.tsx:        </ul>
./src/components/LocationAutocomplete.tsx:      )}
./src/components/LocationAutocomplete.tsx:    </div>
./src/components/LocationAutocomplete.tsx:  );
./src/components/LocationAutocomplete.tsx:};
./src/components/LocationAutocomplete.tsx:
./src/components/LocationAutocomplete.tsx:export default LocationAutocomplete;
./src/components/LoginButton.tsx:'use client'
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:export function LoginButton() {
./src/components/LoginButton.tsx:  const { user, isLoading, error, signIn, signOut } = useAuth();
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:  if (isLoading) {
./src/components/LoginButton.tsx:    return (
./src/components/LoginButton.tsx:      <button
./src/components/LoginButton.tsx:        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
./src/components/LoginButton.tsx:        disabled
./src/components/LoginButton.tsx:      >
./src/components/LoginButton.tsx:        Loading...
./src/components/LoginButton.tsx:      </button>
./src/components/LoginButton.tsx:    );
./src/components/LoginButton.tsx:  }
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:  if (error) {
./src/components/LoginButton.tsx:    return (
./src/components/LoginButton.tsx:      <button
./src/components/LoginButton.tsx:        className="px-4 py-2 text-sm font-medium text-red-700 bg-red-100 rounded-md hover:bg-red-200"
./src/components/LoginButton.tsx:        onClick={() => window.location.reload()}
./src/components/LoginButton.tsx:      >
./src/components/LoginButton.tsx:        Error: {error}
./src/components/LoginButton.tsx:      </button>
./src/components/LoginButton.tsx:    );
./src/components/LoginButton.tsx:  }
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:  if (user) {
./src/components/LoginButton.tsx:    return (
./src/components/LoginButton.tsx:      <button
./src/components/LoginButton.tsx:        onClick={() => signOut()}
./src/components/LoginButton.tsx:        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200"
./src/components/LoginButton.tsx:      >
./src/components/LoginButton.tsx:        Sign Out
./src/components/LoginButton.tsx:      </button>
./src/components/LoginButton.tsx:    );
./src/components/LoginButton.tsx:  }
./src/components/LoginButton.tsx:
./src/components/LoginButton.tsx:  return (
./src/components/LoginButton.tsx:    <button
./src/components/LoginButton.tsx:      onClick={() => signIn('', '')}
./src/components/LoginButton.tsx:      className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700"
./src/components/LoginButton.tsx:    >
./src/components/LoginButton.tsx:      Sign In
./src/components/LoginButton.tsx:    </button>
./src/components/LoginButton.tsx:  );
./src/components/LoginButton.tsx:}
./src/components/Navbar.tsx:'use client';
./src/components/Navbar.tsx:
./src/components/Navbar.tsx:import { useState } from 'react';
./src/components/Navbar.tsx:import Image from 'next/image';
./src/components/Navbar.tsx:import Link from 'next/link';
./src/components/Navbar.tsx:import { ChevronDown, Menu, User, X } from 'lucide-react';
./src/components/Navbar.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/Navbar.tsx:
./src/components/Navbar.tsx:export function Navbar(): JSX.Element {
./src/components/Navbar.tsx:  const [isMenuOpen, setIsMenuOpen] = useState(false);
./src/components/Navbar.tsx:  const { user, isLoading, signOut } = useAuth();
./src/components/Navbar.tsx:  const [showDropdown, setShowDropdown] = useState(false);
./src/components/Navbar.tsx:
./src/components/Navbar.tsx:  const handleSignOut = async () => {
./src/components/Navbar.tsx:    await signOut();
./src/components/Navbar.tsx:    setShowDropdown(false);
./src/components/Navbar.tsx:  };
./src/components/Navbar.tsx:
./src/components/Navbar.tsx:  return (
./src/components/Navbar.tsx:    <nav className="bg-white sticky top-0 z-50">
./src/components/Navbar.tsx:      <div className="max-w-[1200px] w-[80%] mx-auto">
./src/components/Navbar.tsx:        <div className="flex justify-between items-center h-20">
./src/components/Navbar.tsx:          <Link href="/" className="text-3xl font-bold text-[#4F46E5]">
./src/components/Navbar.tsx:            RME
./src/components/Navbar.tsx:          </Link>
./src/components/Navbar.tsx:          <div className="hidden md:flex items-center space-x-10">
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/companies"
./src/components/Navbar.tsx:              className="text-[16px] text-gray-600 hover:text-gray-900 transition-colors"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Companies
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/reviews"
./src/components/Navbar.tsx:              className="text-[16px] text-gray-600 hover:text-gray-900 transition-colors"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Reviews
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link 
./src/components/Navbar.tsx:              href="/shame" 
./src/components/Navbar.tsx:              className="text-[16px] text-gray-600 hover:text-gray-900 transition-colors"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Wall of Shame
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link 
./src/components/Navbar.tsx:              href="/fame" 
./src/components/Navbar.tsx:              className="text-[16px] text-gray-600 hover:text-gray-900 transition-colors"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Wall of Fame
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/background-check"
./src/components/Navbar.tsx:              className="text-[16px] text-gray-600 hover:text-gray-900 transition-colors"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Background Check
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            {isLoading ? (
./src/components/Navbar.tsx:              <div className="w-8 h-8 rounded-full border-2 border-[#4F46E5] border-t-transparent animate-spin" />
./src/components/Navbar.tsx:            ) : user ? (
./src/components/Navbar.tsx:              <div className="relative">
./src/components/Navbar.tsx:                <button
./src/components/Navbar.tsx:                  onClick={() => setShowDropdown(!showDropdown)}
./src/components/Navbar.tsx:                  className="flex items-center gap-2"
./src/components/Navbar.tsx:                >
./src/components/Navbar.tsx:                  <div className="bg-orange-600 rounded-full w-8 h-8 flex items-center justify-center text-white">
./src/components/Navbar.tsx:                    {user.user_metadata?.full_name?.[0] || user.email?.[0] || 'U'}
./src/components/Navbar.tsx:                  </div>
./src/components/Navbar.tsx:                  <span className="text-[16px] text-gray-700">
./src/components/Navbar.tsx:                    {user.user_metadata?.full_name || user.email?.split('@')[0]}
./src/components/Navbar.tsx:                  </span>
./src/components/Navbar.tsx:                  <ChevronDown className="w-4 h-4 text-gray-500" />
./src/components/Navbar.tsx:                </button>
./src/components/Navbar.tsx:
./src/components/Navbar.tsx:                {showDropdown && (
./src/components/Navbar.tsx:                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 border border-gray-100">
./src/components/Navbar.tsx:                    <Link
./src/components/Navbar.tsx:                      href="/account"
./src/components/Navbar.tsx:                      className="block px-4 py-2 text-[14px] text-gray-700 hover:bg-gray-50"
./src/components/Navbar.tsx:                      onClick={() => setShowDropdown(false)}
./src/components/Navbar.tsx:                    >
./src/components/Navbar.tsx:                      My Account
./src/components/Navbar.tsx:                    </Link>
./src/components/Navbar.tsx:                    <div className="border-t border-gray-100 my-1"></div>
./src/components/Navbar.tsx:                    <button
./src/components/Navbar.tsx:                      onClick={handleSignOut}
./src/components/Navbar.tsx:                      className="block w-full text-left px-4 py-2 text-[14px] text-red-600 hover:bg-gray-50"
./src/components/Navbar.tsx:                    >
./src/components/Navbar.tsx:                      Sign Out
./src/components/Navbar.tsx:                    </button>
./src/components/Navbar.tsx:                  </div>
./src/components/Navbar.tsx:                )}
./src/components/Navbar.tsx:              </div>
./src/components/Navbar.tsx:            ) : (
./src/components/Navbar.tsx:              <Link
./src/components/Navbar.tsx:                href="/auth/signin"
./src/components/Navbar.tsx:                className="bg-[#4F46E5] text-white px-6 py-2 rounded-lg hover:bg-[#4338CA] transition-colors flex items-center gap-2 text-[14px]"
./src/components/Navbar.tsx:              >
./src/components/Navbar.tsx:                <User className="w-4 h-4" />
./src/components/Navbar.tsx:                Sign In
./src/components/Navbar.tsx:              </Link>
./src/components/Navbar.tsx:            )}
./src/components/Navbar.tsx:          </div>
./src/components/Navbar.tsx:          <button 
./src/components/Navbar.tsx:            className="md:hidden p-2 text-gray-600" 
./src/components/Navbar.tsx:            onClick={() => setIsMenuOpen(!isMenuOpen)}
./src/components/Navbar.tsx:          >
./src/components/Navbar.tsx:            {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
./src/components/Navbar.tsx:          </button>
./src/components/Navbar.tsx:        </div>
./src/components/Navbar.tsx:      </div>
./src/components/Navbar.tsx:      {isMenuOpen && (
./src/components/Navbar.tsx:        <div className="md:hidden border-t border-gray-100">
./src/components/Navbar.tsx:          <div className="max-w-[1200px] w-[80%] mx-auto">
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/companies"
./src/components/Navbar.tsx:              className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Companies
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/reviews"
./src/components/Navbar.tsx:              className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Reviews
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/shame"
./src/components/Navbar.tsx:              className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Wall of Shame
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/fame"
./src/components/Navbar.tsx:              className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Wall of Fame
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            <Link
./src/components/Navbar.tsx:              href="/background-check"
./src/components/Navbar.tsx:              className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:            >
./src/components/Navbar.tsx:              Background Check
./src/components/Navbar.tsx:            </Link>
./src/components/Navbar.tsx:            {user ? (
./src/components/Navbar.tsx:              <>
./src/components/Navbar.tsx:                <Link
./src/components/Navbar.tsx:                  href="/account"
./src/components/Navbar.tsx:                  className="block py-3 text-[16px] text-gray-600 hover:text-gray-900"
./src/components/Navbar.tsx:                >
./src/components/Navbar.tsx:                  My Account
./src/components/Navbar.tsx:                </Link>
./src/components/Navbar.tsx:                <button
./src/components/Navbar.tsx:                  onClick={handleSignOut}
./src/components/Navbar.tsx:                  className="block w-full text-left py-3 text-[16px] text-red-600 hover:text-red-700"
./src/components/Navbar.tsx:                >
./src/components/Navbar.tsx:                  Sign Out
./src/components/Navbar.tsx:                </button>
./src/components/Navbar.tsx:              </>
./src/components/Navbar.tsx:            ) : (
./src/components/Navbar.tsx:              <Link
./src/components/Navbar.tsx:                href="/auth/signin"
./src/components/Navbar.tsx:                className="block py-3 mb-4 text-center bg-[#4F46E5] text-white rounded-lg hover:bg-[#4338CA] transition-colors text-[14px]"
./src/components/Navbar.tsx:              >
./src/components/Navbar.tsx:                Sign In
./src/components/Navbar.tsx:              </Link>
./src/components/Navbar.tsx:            )}
./src/components/Navbar.tsx:          </div>
./src/components/Navbar.tsx:        </div>
./src/components/Navbar.tsx:      )}
./src/components/Navbar.tsx:    </nav>
./src/components/Navbar.tsx:  );
./src/components/Navbar.tsx:}
./src/components/PerformanceMonitor.tsx:'use client'
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:import { useEffect, useState } from 'react';
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:import { usePathname } from 'next/navigation';
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:import { BarChart2 } from 'lucide-react';
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:interface PerformanceMetrics {
./src/components/PerformanceMonitor.tsx:  loadTime: number | null;
./src/components/PerformanceMonitor.tsx:  loadPercentage: number;
./src/components/PerformanceMonitor.tsx:  ttfb: number | null;
./src/components/PerformanceMonitor.tsx:  fcp: number | null;
./src/components/PerformanceMonitor.tsx:  lcp: number | null;
./src/components/PerformanceMonitor.tsx:}
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:export default function PerformanceMonitor() {
./src/components/PerformanceMonitor.tsx:  const pathname = usePathname();
./src/components/PerformanceMonitor.tsx:  const [isVisible, setIsVisible] = useState(false);
./src/components/PerformanceMonitor.tsx:  const [metrics, setMetrics] = useState<PerformanceMetrics>({
./src/components/PerformanceMonitor.tsx:    loadTime: null,
./src/components/PerformanceMonitor.tsx:    loadPercentage: 0,
./src/components/PerformanceMonitor.tsx:    ttfb: null,
./src/components/PerformanceMonitor.tsx:    fcp: null,
./src/components/PerformanceMonitor.tsx:    lcp: null,
./src/components/PerformanceMonitor.tsx:  });
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  useEffect(() => {
./src/components/PerformanceMonitor.tsx:    const handleKeyPress = (event: KeyboardEvent) => {
./src/components/PerformanceMonitor.tsx:      if (event.altKey && event.key.toLowerCase() === 'p') {
./src/components/PerformanceMonitor.tsx:        setIsVisible(prev => !prev);
./src/components/PerformanceMonitor.tsx:      }
./src/components/PerformanceMonitor.tsx:    };
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    window.addEventListener('keydown', handleKeyPress);
./src/components/PerformanceMonitor.tsx:    return () => window.removeEventListener('keydown', handleKeyPress);
./src/components/PerformanceMonitor.tsx:  }, []);
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  useEffect(() => {
./src/components/PerformanceMonitor.tsx:    // Reset metrics on navigation
./src/components/PerformanceMonitor.tsx:    setMetrics({
./src/components/PerformanceMonitor.tsx:      loadTime: null,
./src/components/PerformanceMonitor.tsx:      loadPercentage: 0,
./src/components/PerformanceMonitor.tsx:      ttfb: null,
./src/components/PerformanceMonitor.tsx:      fcp: null,
./src/components/PerformanceMonitor.tsx:      lcp: null,
./src/components/PerformanceMonitor.tsx:    });
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    const startTime = performance.now();
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    // Track Time to First Byte
./src/components/PerformanceMonitor.tsx:    const observer = new PerformanceObserver(list => {
./src/components/PerformanceMonitor.tsx:      const entries = list.getEntries();
./src/components/PerformanceMonitor.tsx:      entries.forEach(entry => {
./src/components/PerformanceMonitor.tsx:        if (entry.entryType === 'navigation') {
./src/components/PerformanceMonitor.tsx:          const navEntry = entry as PerformanceNavigationTiming;
./src/components/PerformanceMonitor.tsx:          setMetrics(prev => ({
./src/components/PerformanceMonitor.tsx:            ...prev,
./src/components/PerformanceMonitor.tsx:            ttfb: navEntry.responseStart - navEntry.requestStart,
./src/components/PerformanceMonitor.tsx:          }));
./src/components/PerformanceMonitor.tsx:        }
./src/components/PerformanceMonitor.tsx:      });
./src/components/PerformanceMonitor.tsx:    });
./src/components/PerformanceMonitor.tsx:    observer.observe({ entryTypes: ['navigation'] });
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    // Track First Contentful Paint
./src/components/PerformanceMonitor.tsx:    const fcpObserver = new PerformanceObserver(list => {
./src/components/PerformanceMonitor.tsx:      const entries = list.getEntries();
./src/components/PerformanceMonitor.tsx:      entries.forEach(entry => {
./src/components/PerformanceMonitor.tsx:        if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {
./src/components/PerformanceMonitor.tsx:          setMetrics(prev => ({
./src/components/PerformanceMonitor.tsx:            ...prev,
./src/components/PerformanceMonitor.tsx:            fcp: entry.startTime,
./src/components/PerformanceMonitor.tsx:          }));
./src/components/PerformanceMonitor.tsx:        }
./src/components/PerformanceMonitor.tsx:      });
./src/components/PerformanceMonitor.tsx:    });
./src/components/PerformanceMonitor.tsx:    fcpObserver.observe({ entryTypes: ['paint'] });
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    // Track Largest Contentful Paint
./src/components/PerformanceMonitor.tsx:    const lcpObserver = new PerformanceObserver(list => {
./src/components/PerformanceMonitor.tsx:      const entries = list.getEntries();
./src/components/PerformanceMonitor.tsx:      const lastEntry = entries[entries.length - 1];
./src/components/PerformanceMonitor.tsx:      setMetrics(prev => ({
./src/components/PerformanceMonitor.tsx:        ...prev,
./src/components/PerformanceMonitor.tsx:        lcp: lastEntry.startTime,
./src/components/PerformanceMonitor.tsx:      }));
./src/components/PerformanceMonitor.tsx:    });
./src/components/PerformanceMonitor.tsx:    lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    // Simulate loading percentage
./src/components/PerformanceMonitor.tsx:    const loadInterval = setInterval(() => {
./src/components/PerformanceMonitor.tsx:      setMetrics(prev => {
./src/components/PerformanceMonitor.tsx:        if (prev.loadPercentage >= 100) {
./src/components/PerformanceMonitor.tsx:          clearInterval(loadInterval);
./src/components/PerformanceMonitor.tsx:          return {
./src/components/PerformanceMonitor.tsx:            ...prev,
./src/components/PerformanceMonitor.tsx:            loadTime: performance.now() - startTime,
./src/components/PerformanceMonitor.tsx:            loadPercentage: 100,
./src/components/PerformanceMonitor.tsx:          };
./src/components/PerformanceMonitor.tsx:        }
./src/components/PerformanceMonitor.tsx:        return {
./src/components/PerformanceMonitor.tsx:          ...prev,
./src/components/PerformanceMonitor.tsx:          loadPercentage: Math.min(prev.loadPercentage + 10, 100),
./src/components/PerformanceMonitor.tsx:        };
./src/components/PerformanceMonitor.tsx:      });
./src/components/PerformanceMonitor.tsx:    }, 100);
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:    return () => {
./src/components/PerformanceMonitor.tsx:      observer.disconnect();
./src/components/PerformanceMonitor.tsx:      fcpObserver.disconnect();
./src/components/PerformanceMonitor.tsx:      lcpObserver.disconnect();
./src/components/PerformanceMonitor.tsx:      clearInterval(loadInterval);
./src/components/PerformanceMonitor.tsx:    };
./src/components/PerformanceMonitor.tsx:  }, [pathname]);
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  const formatTime = (ms: number | null) => {
./src/components/PerformanceMonitor.tsx:    if (ms === null) return '...';
./src/components/PerformanceMonitor.tsx:    return (ms / 1000).toFixed(2);
./src/components/PerformanceMonitor.tsx:  };
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  // Always show the toggle button
./src/components/PerformanceMonitor.tsx:  const toggleButton = (
./src/components/PerformanceMonitor.tsx:    <button
./src/components/PerformanceMonitor.tsx:      onClick={() => setIsVisible(prev => !prev)}
./src/components/PerformanceMonitor.tsx:      className="fixed bottom-6 right-20 p-2 rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 z-50 border border-gray-200 dark:border-gray-700"
./src/components/PerformanceMonitor.tsx:      title="Toggle Performance Monitor (Alt+P)"
./src/components/PerformanceMonitor.tsx:    >
./src/components/PerformanceMonitor.tsx:      <BarChart2 className="w-5 h-5 text-gray-600 dark:text-gray-300" />
./src/components/PerformanceMonitor.tsx:    </button>
./src/components/PerformanceMonitor.tsx:  );
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  if (!isVisible) {
./src/components/PerformanceMonitor.tsx:    return toggleButton;
./src/components/PerformanceMonitor.tsx:  }
./src/components/PerformanceMonitor.tsx:
./src/components/PerformanceMonitor.tsx:  return (
./src/components/PerformanceMonitor.tsx:    <>
./src/components/PerformanceMonitor.tsx:      {toggleButton}
./src/components/PerformanceMonitor.tsx:      <div className="fixed bottom-20 right-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-3 text-sm border border-gray-200 dark:border-gray-700 z-50">
./src/components/PerformanceMonitor.tsx:        <div className="flex flex-col items-end space-y-1">
./src/components/PerformanceMonitor.tsx:          <div className="text-gray-600 dark:text-gray-300">Load: {metrics.loadPercentage}%</div>
./src/components/PerformanceMonitor.tsx:          <div className="text-gray-600 dark:text-gray-300">
./src/components/PerformanceMonitor.tsx:            Time: {formatTime(metrics.loadTime)}s
./src/components/PerformanceMonitor.tsx:          </div>
./src/components/PerformanceMonitor.tsx:          <div className="text-gray-600 dark:text-gray-300">TTFB: {formatTime(metrics.ttfb)}s</div>
./src/components/PerformanceMonitor.tsx:          <div className="text-gray-600 dark:text-gray-300">FCP: {formatTime(metrics.fcp)}s</div>
./src/components/PerformanceMonitor.tsx:          <div className="text-gray-600 dark:text-gray-300">LCP: {formatTime(metrics.lcp)}s</div>
./src/components/PerformanceMonitor.tsx:        </div>
./src/components/PerformanceMonitor.tsx:      </div>
./src/components/PerformanceMonitor.tsx:    </>
./src/components/PerformanceMonitor.tsx:  );
./src/components/PerformanceMonitor.tsx:}
./src/components/ReviewActions.tsx:'use client'
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:import * as React from 'react';
./src/components/ReviewActions.tsx:import type { MouseEvent } from 'react';
./src/components/ReviewActions.tsx:import { createBrowserClient } from '@supabase/ssr';
./src/components/ReviewActions.tsx:import { Heart } from 'lucide-react';
./src/components/ReviewActions.tsx:import { Button } from '@/components/ui/button';
./src/components/ReviewActions.tsx:import { useToast } from '@/components/ui/use-toast';
./src/components/ReviewActions.tsx:import { ReviewId } from '@/types';
./src/components/ReviewActions.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/ReviewActions.tsx:import { ThumbsUp, Flag, Edit } from 'lucide-react';
./src/components/ReviewActions.tsx:import { useState } from 'react';
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:interface ReviewActionsProps {
./src/components/ReviewActions.tsx:  reviewId: ReviewId;
./src/components/ReviewActions.tsx:  initialLikes: number;
./src/components/ReviewActions.tsx:  isLiked: boolean;
./src/components/ReviewActions.tsx:  onEditClick?: () => void;
./src/components/ReviewActions.tsx:  onReportClick?: () => void;
./src/components/ReviewActions.tsx:}
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:export const ReviewActions = ({
./src/components/ReviewActions.tsx:  reviewId,
./src/components/ReviewActions.tsx:  initialLikes,
./src/components/ReviewActions.tsx:  isLiked: initialIsLiked,
./src/components/ReviewActions.tsx:  onEditClick,
./src/components/ReviewActions.tsx:  onReportClick
./src/components/ReviewActions.tsx:}: ReviewActionsProps) => {
./src/components/ReviewActions.tsx:  const [likes, setLikes] = useState(initialLikes);
./src/components/ReviewActions.tsx:  const [isLiked, setIsLiked] = useState(initialIsLiked);
./src/components/ReviewActions.tsx:  const { user } = useAuth();
./src/components/ReviewActions.tsx:  const { toast } = useToast();
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:  const handleLike = async () => {
./src/components/ReviewActions.tsx:    if (!user) {
./src/components/ReviewActions.tsx:      toast({
./src/components/ReviewActions.tsx:        title: 'Authentication required',
./src/components/ReviewActions.tsx:        description: 'Please sign in to like reviews',
./src/components/ReviewActions.tsx:        variant: 'destructive'
./src/components/ReviewActions.tsx:      });
./src/components/ReviewActions.tsx:      return;
./src/components/ReviewActions.tsx:    }
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:    try {
./src/components/ReviewActions.tsx:      const newIsLiked = !isLiked;
./src/components/ReviewActions.tsx:      setIsLiked(newIsLiked);
./src/components/ReviewActions.tsx:      setLikes(likes + (newIsLiked ? 1 : -1));
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:      const response = await fetch(`/api/reviews/${reviewId}/like`, {
./src/components/ReviewActions.tsx:        method: 'POST',
./src/components/ReviewActions.tsx:        headers: {
./src/components/ReviewActions.tsx:          'Content-Type': 'application/json'
./src/components/ReviewActions.tsx:        },
./src/components/ReviewActions.tsx:        body: JSON.stringify({ liked: newIsLiked })
./src/components/ReviewActions.tsx:      });
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:      if (!response.ok) {
./src/components/ReviewActions.tsx:        throw new Error('Failed to update like status');
./src/components/ReviewActions.tsx:      }
./src/components/ReviewActions.tsx:    } catch (error) {
./src/components/ReviewActions.tsx:      setIsLiked(!isLiked);
./src/components/ReviewActions.tsx:      setLikes(likes);
./src/components/ReviewActions.tsx:      toast({
./src/components/ReviewActions.tsx:        title: 'Error',
./src/components/ReviewActions.tsx:        description: 'Failed to update like status',
./src/components/ReviewActions.tsx:        variant: 'destructive'
./src/components/ReviewActions.tsx:      });
./src/components/ReviewActions.tsx:    }
./src/components/ReviewActions.tsx:  };
./src/components/ReviewActions.tsx:
./src/components/ReviewActions.tsx:  return (
./src/components/ReviewActions.tsx:    <div className="flex items-center space-x-2">
./src/components/ReviewActions.tsx:      <Button
./src/components/ReviewActions.tsx:        variant="ghost"
./src/components/ReviewActions.tsx:        size="sm"
./src/components/ReviewActions.tsx:        onClick={handleLike}
./src/components/ReviewActions.tsx:        className={isLiked ? 'text-blue-600' : ''}
./src/components/ReviewActions.tsx:      >
./src/components/ReviewActions.tsx:        <ThumbsUp className="w-4 h-4 mr-1" />
./src/components/ReviewActions.tsx:        {likes}
./src/components/ReviewActions.tsx:      </Button>
./src/components/ReviewActions.tsx:      {onEditClick && (
./src/components/ReviewActions.tsx:        <Button variant="ghost" size="sm" onClick={onEditClick}>
./src/components/ReviewActions.tsx:          <Edit className="w-4 h-4" />
./src/components/ReviewActions.tsx:        </Button>
./src/components/ReviewActions.tsx:      )}
./src/components/ReviewActions.tsx:      {onReportClick && (
./src/components/ReviewActions.tsx:        <Button variant="ghost" size="sm" onClick={onReportClick}>
./src/components/ReviewActions.tsx:          <Flag className="w-4 h-4" />
./src/components/ReviewActions.tsx:        </Button>
./src/components/ReviewActions.tsx:      )}
./src/components/ReviewActions.tsx:    </div>
./src/components/ReviewActions.tsx:  );
./src/components/ReviewActions.tsx:};
./src/components/ReviewCard.tsx:'use client'
./src/components/ReviewCard.tsx:
./src/components/ReviewCard.tsx:import { Review } from '@/types';
./src/components/ReviewCard.tsx:import { Card } from './ui/card';
./src/components/ReviewCard.tsx:import { StarRating } from '@/components/ui/StarRating';
./src/components/ReviewCard.tsx:import { ReviewActions } from './ReviewActions';
./src/components/ReviewCard.tsx:import { formatDate } from '@/lib/utils';
./src/components/ReviewCard.tsx:
./src/components/ReviewCard.tsx:interface ReviewCardProps {
./src/components/ReviewCard.tsx:  review: Review;
./src/components/ReviewCard.tsx:  onEditClick?: () => void;
./src/components/ReviewCard.tsx:  onReportClick?: () => void;
./src/components/ReviewCard.tsx:}
./src/components/ReviewCard.tsx:
./src/components/ReviewCard.tsx:export const ReviewCard = ({ review, onEditClick, onReportClick }: ReviewCardProps) => {
./src/components/ReviewCard.tsx:  return (
./src/components/ReviewCard.tsx:    <Card className="p-6">
./src/components/ReviewCard.tsx:      <div className="flex items-start justify-between">
./src/components/ReviewCard.tsx:        <div>
./src/components/ReviewCard.tsx:          <h3 className="text-lg font-semibold">{review.title}</h3>
./src/components/ReviewCard.tsx:          <div className="mt-1 flex items-center space-x-4">
./src/components/ReviewCard.tsx:            <StarRating rating={review.rating} />
./src/components/ReviewCard.tsx:            <span className="text-gray-500">
./src/components/ReviewCard.tsx:              {formatDate(review.created_at || '')}
./src/components/ReviewCard.tsx:            </span>
./src/components/ReviewCard.tsx:          </div>
./src/components/ReviewCard.tsx:        </div>
./src/components/ReviewCard.tsx:        <ReviewActions
./src/components/ReviewCard.tsx:          reviewId={review.id}
./src/components/ReviewCard.tsx:          initialLikes={review.likes_count || 0}
./src/components/ReviewCard.tsx:          isLiked={review.is_liked || false}
./src/components/ReviewCard.tsx:          onEditClick={onEditClick}
./src/components/ReviewCard.tsx:          onReportClick={onReportClick}
./src/components/ReviewCard.tsx:        />
./src/components/ReviewCard.tsx:      </div>
./src/components/ReviewCard.tsx:
./src/components/ReviewCard.tsx:      <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
./src/components/ReviewCard.tsx:        <div>
./src/components/ReviewCard.tsx:          <h4 className="font-semibold text-green-600">Pros</h4>
./src/components/ReviewCard.tsx:          <p className="mt-1 text-gray-600">{review.pros}</p>
./src/components/ReviewCard.tsx:        </div>
./src/components/ReviewCard.tsx:        <div>
./src/components/ReviewCard.tsx:          <h4 className="font-semibold text-red-600">Cons</h4>
./src/components/ReviewCard.tsx:          <p className="mt-1 text-gray-600">{review.cons}</p>
./src/components/ReviewCard.tsx:        </div>
./src/components/ReviewCard.tsx:      </div>
./src/components/ReviewCard.tsx:
./src/components/ReviewCard.tsx:      {(review.position || review.employment_status || review.is_current_employee !== null) && (
./src/components/ReviewCard.tsx:        <div className="mt-4 text-sm text-gray-500">
./src/components/ReviewCard.tsx:          {review.position && <span className="mr-3">{review.position}</span>}
./src/components/ReviewCard.tsx:          {review.employment_status && (
./src/components/ReviewCard.tsx:            <span className="mr-3">{review.employment_status}</span>
./src/components/ReviewCard.tsx:          )}
./src/components/ReviewCard.tsx:          {review.is_current_employee !== null && (
./src/components/ReviewCard.tsx:            <span>
./src/components/ReviewCard.tsx:              {review.is_current_employee ? 'Current Employee' : 'Former Employee'}
./src/components/ReviewCard.tsx:            </span>
./src/components/ReviewCard.tsx:          )}
./src/components/ReviewCard.tsx:        </div>
./src/components/ReviewCard.tsx:      )}
./src/components/ReviewCard.tsx:    </Card>
./src/components/ReviewCard.tsx:  );
./src/components/ReviewCard.tsx:};
./src/components/ReviewFilters.tsx:'use client'
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:// components/ReviewFilters.tsx
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:type SortType = 'newest' | 'oldest' | 'highest' | 'lowest';
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:interface Filters {
./src/components/ReviewFilters.tsx:  minRating: number;
./src/components/ReviewFilters.tsx:  employmentStatus: string;
./src/components/ReviewFilters.tsx:  dateRange: string;
./src/components/ReviewFilters.tsx:}
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:type FilterValue = number | string;
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:interface ReviewFiltersProps {
./src/components/ReviewFilters.tsx:  currentFilters: Filters;
./src/components/ReviewFilters.tsx:  currentSort: SortType;
./src/components/ReviewFilters.tsx:}
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:interface FilterChangeEvent extends CustomEvent {
./src/components/ReviewFilters.tsx:  detail: {
./src/components/ReviewFilters.tsx:    key: keyof Filters;
./src/components/ReviewFilters.tsx:    value: FilterValue;
./src/components/ReviewFilters.tsx:  };
./src/components/ReviewFilters.tsx:}
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:interface SortChangeEvent extends CustomEvent {
./src/components/ReviewFilters.tsx:  detail: SortType;
./src/components/ReviewFilters.tsx:}
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:export default function ReviewFilters({ currentFilters, currentSort }: ReviewFiltersProps) {
./src/components/ReviewFilters.tsx:  const dispatchFilterChange = (key: keyof Filters, value: FilterValue) => {
./src/components/ReviewFilters.tsx:    const event = new CustomEvent<FilterChangeEvent['detail']>('filterChange', {
./src/components/ReviewFilters.tsx:      detail: { key, value },
./src/components/ReviewFilters.tsx:    });
./src/components/ReviewFilters.tsx:    window.dispatchEvent(event);
./src/components/ReviewFilters.tsx:  };
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:  const dispatchSortChange = (sort: SortType) => {
./src/components/ReviewFilters.tsx:    const event = new CustomEvent<SortType>('sortChange', {
./src/components/ReviewFilters.tsx:      detail: sort,
./src/components/ReviewFilters.tsx:    });
./src/components/ReviewFilters.tsx:    window.dispatchEvent(event);
./src/components/ReviewFilters.tsx:  };
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:  return (
./src/components/ReviewFilters.tsx:    <div className="space-y-4">
./src/components/ReviewFilters.tsx:      {/* Rating Filter */}
./src/components/ReviewFilters.tsx:      <div>
./src/components/ReviewFilters.tsx:        <label className="block text-sm font-medium text-gray-700">Minimum Rating</label>
./src/components/ReviewFilters.tsx:        <select
./src/components/ReviewFilters.tsx:          value={currentFilters.minRating}
./src/components/ReviewFilters.tsx:          onChange={e => dispatchFilterChange('minRating', Number(e.target.value))}
./src/components/ReviewFilters.tsx:          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
./src/components/ReviewFilters.tsx:        >
./src/components/ReviewFilters.tsx:          <option value={0}>All Ratings</option>
./src/components/ReviewFilters.tsx:          {[1, 2, 3, 4, 5].map(rating => (
./src/components/ReviewFilters.tsx:            <option key={rating} value={rating}>
./src/components/ReviewFilters.tsx:              {rating}+ Stars
./src/components/ReviewFilters.tsx:            </option>
./src/components/ReviewFilters.tsx:          ))}
./src/components/ReviewFilters.tsx:        </select>
./src/components/ReviewFilters.tsx:      </div>
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:      {/* Employment Status Filter */}
./src/components/ReviewFilters.tsx:      <div>
./src/components/ReviewFilters.tsx:        <label className="block text-sm font-medium text-gray-700">Employment Status</label>
./src/components/ReviewFilters.tsx:        <select
./src/components/ReviewFilters.tsx:          value={currentFilters.employmentStatus}
./src/components/ReviewFilters.tsx:          onChange={e => dispatchFilterChange('employmentStatus', e.target.value)}
./src/components/ReviewFilters.tsx:          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
./src/components/ReviewFilters.tsx:        >
./src/components/ReviewFilters.tsx:          <option value="all">All</option>
./src/components/ReviewFilters.tsx:          <option value="current">Current Employee</option>
./src/components/ReviewFilters.tsx:          <option value="former">Former Employee</option>
./src/components/ReviewFilters.tsx:        </select>
./src/components/ReviewFilters.tsx:      </div>
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:      {/* Date Range Filter */}
./src/components/ReviewFilters.tsx:      <div>
./src/components/ReviewFilters.tsx:        <label className="block text-sm font-medium text-gray-700">Time Period</label>
./src/components/ReviewFilters.tsx:        <select
./src/components/ReviewFilters.tsx:          value={currentFilters.dateRange}
./src/components/ReviewFilters.tsx:          onChange={e => dispatchFilterChange('dateRange', e.target.value)}
./src/components/ReviewFilters.tsx:          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
./src/components/ReviewFilters.tsx:        >
./src/components/ReviewFilters.tsx:          <option value="all">All Time</option>
./src/components/ReviewFilters.tsx:          <option value="month">Last Month</option>
./src/components/ReviewFilters.tsx:          <option value="6months">Last 6 Months</option>
./src/components/ReviewFilters.tsx:          <option value="year">Last Year</option>
./src/components/ReviewFilters.tsx:        </select>
./src/components/ReviewFilters.tsx:      </div>
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:      {/* Sort Options */}
./src/components/ReviewFilters.tsx:      <div>
./src/components/ReviewFilters.tsx:        <label className="block text-sm font-medium text-gray-700">Sort By</label>
./src/components/ReviewFilters.tsx:        <select
./src/components/ReviewFilters.tsx:          value={currentSort}
./src/components/ReviewFilters.tsx:          onChange={e => dispatchSortChange(e.target.value as SortType)}
./src/components/ReviewFilters.tsx:          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
./src/components/ReviewFilters.tsx:        >
./src/components/ReviewFilters.tsx:          <option value="newest">Newest First</option>
./src/components/ReviewFilters.tsx:          <option value="oldest">Oldest First</option>
./src/components/ReviewFilters.tsx:          <option value="highest">Highest Rated</option>
./src/components/ReviewFilters.tsx:          <option value="lowest">Lowest Rated</option>
./src/components/ReviewFilters.tsx:        </select>
./src/components/ReviewFilters.tsx:      </div>
./src/components/ReviewFilters.tsx:    </div>
./src/components/ReviewFilters.tsx:  );
./src/components/ReviewFilters.tsx:}
./src/components/ReviewFilters.tsx:
./src/components/ReviewFilters.tsx:export type { ReviewFiltersProps, Filters, SortType, FilterChangeEvent, SortChangeEvent };
./src/components/ReviewForm.tsx:'use client'
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:import { useState, useEffect } from 'react';
./src/components/ReviewForm.tsx:import { useRouter } from 'next/navigation';
./src/components/ReviewForm.tsx:import { useForm } from 'react-hook-form';
./src/components/ReviewForm.tsx:import { zodResolver } from '@hookform/resolvers/zod';
./src/components/ReviewForm.tsx:import { supabase } from '@/lib/supabaseClient';
./src/components/ReviewForm.tsx:import { reviewSchema, type ReviewFormData, employmentStatusEnum } from '@/lib/schemas';
./src/components/ReviewForm.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/ReviewForm.tsx:import type { CompanyId, JoinedCompany, ReviewInsert, EmploymentStatus, EMPLOYMENT_STATUSES } from '@/types';
./src/components/ReviewForm.tsx:import { Button } from './ui/button';
./src/components/ReviewForm.tsx:import { Input } from './ui/input';
./src/components/ReviewForm.tsx:import { LoadingSpinner } from './ui/loading-spinner';
./src/components/ReviewForm.tsx:import { useToast } from './ui/use-toast';
./src/components/ReviewForm.tsx:import { PostgrestError } from '@supabase/supabase-js';
./src/components/ReviewForm.tsx:import { z } from 'zod';
./src/components/ReviewForm.tsx:import { EMPLOYMENT_STATUSES as UpdatedEMPLOYMENT_STATUSES } from '@/constants';
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:/**
./src/components/ReviewForm.tsx: * src/components/ReviewForm.tsx
./src/components/ReviewForm.tsx: * Review form component for creating and editing reviews
./src/components/ReviewForm.tsx: */
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:// External imports
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:// Internal imports
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:interface ReviewFormProps {
./src/components/ReviewForm.tsx:  companyId: CompanyId;
./src/components/ReviewForm.tsx:  company?: JoinedCompany;
./src/components/ReviewForm.tsx:  onSubmit: (data: ReviewInsert) => Promise<void>;
./src/components/ReviewForm.tsx:  defaultValues?: Partial<ReviewInsert>;
./src/components/ReviewForm.tsx:  initialData?: import('@/types/database').Review;
./src/components/ReviewForm.tsx:  onSuccess?: () => void;
./src/components/ReviewForm.tsx:}
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:const commonPositions = [
./src/components/ReviewForm.tsx:  'Software Engineer',
./src/components/ReviewForm.tsx:  'Product Manager',
./src/components/ReviewForm.tsx:  'Data Scientist',
./src/components/ReviewForm.tsx:  'UX Designer',
./src/components/ReviewForm.tsx:  'Marketing Manager',
./src/components/ReviewForm.tsx:  'Sales Representative',
./src/components/ReviewForm.tsx:  'Customer Support',
./src/components/ReviewForm.tsx:  'Human Resources',
./src/components/ReviewForm.tsx:  'Financial Analyst',
./src/components/ReviewForm.tsx:  'Project Manager',
./src/components/ReviewForm.tsx:  'Business Analyst',
./src/components/ReviewForm.tsx:  'Operations Manager',
./src/components/ReviewForm.tsx:  'Account Manager',
./src/components/ReviewForm.tsx:  'Quality Assurance',
./src/components/ReviewForm.tsx:  'DevOps Engineer'
./src/components/ReviewForm.tsx:];
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:const employmentOptions = [
./src/components/ReviewForm.tsx:  { value: 'Full-time', label: 'Full Time' },
./src/components/ReviewForm.tsx:  { value: 'Part-time', label: 'Part Time' },
./src/components/ReviewForm.tsx:  { value: 'Contract', label: 'Contract' },
./src/components/ReviewForm.tsx:  { value: 'Intern', label: 'Intern' }
./src/components/ReviewForm.tsx:];
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:const formSchema = z.object({
./src/components/ReviewForm.tsx:  company_id: z.number(),
./src/components/ReviewForm.tsx:  rating: z.number().min(1).max(5),
./src/components/ReviewForm.tsx:  title: z.string().min(1, 'Title is required'),
./src/components/ReviewForm.tsx:  pros: z.string().min(1, 'Pros are required'),
./src/components/ReviewForm.tsx:  cons: z.string().min(1, 'Cons are required'),
./src/components/ReviewForm.tsx:  position: z.string().optional(),
./src/components/ReviewForm.tsx:  employment_status: z.enum(['Full-time', 'Part-time', 'Contract', 'Intern']).optional(),
./src/components/ReviewForm.tsx:  is_current_employee: z.boolean().optional()
./src/components/ReviewForm.tsx:});
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:type FormData = z.infer<typeof formSchema>;
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:export const ReviewForm = ({
./src/components/ReviewForm.tsx:  initialData,
./src/components/ReviewForm.tsx:  companyId,
./src/components/ReviewForm.tsx:  onSubmit,
./src/components/ReviewForm.tsx:  onSuccess
./src/components/ReviewForm.tsx:}: ReviewFormProps) => {
./src/components/ReviewForm.tsx:  const { user } = useAuth();
./src/components/ReviewForm.tsx:  const router = useRouter();
./src/components/ReviewForm.tsx:  const { toast } = useToast();
./src/components/ReviewForm.tsx:  const [isSubmitting, setIsSubmitting] = useState(false);
./src/components/ReviewForm.tsx:  const [selectedCompany, setSelectedCompany] = useState<JoinedCompany | null>(null);
./src/components/ReviewForm.tsx:  const [isLoading, setIsLoading] = useState(true);
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  const {
./src/components/ReviewForm.tsx:    register,
./src/components/ReviewForm.tsx:    handleSubmit,
./src/components/ReviewForm.tsx:    formState: { errors },
./src/components/ReviewForm.tsx:    reset,
./src/components/ReviewForm.tsx:    setValue,
./src/components/ReviewForm.tsx:    watch
./src/components/ReviewForm.tsx:  } = useForm<FormData>({
./src/components/ReviewForm.tsx:    resolver: zodResolver(formSchema),
./src/components/ReviewForm.tsx:    defaultValues: {
./src/components/ReviewForm.tsx:      company_id: companyId,
./src/components/ReviewForm.tsx:      title: '',
./src/components/ReviewForm.tsx:      rating: 0,
./src/components/ReviewForm.tsx:      pros: '',
./src/components/ReviewForm.tsx:      cons: '',
./src/components/ReviewForm.tsx:      position: '',
./src/components/ReviewForm.tsx:      status: 'pending' as const,
./src/components/ReviewForm.tsx:      employment_status: 'Full-time' as const,
./src/components/ReviewForm.tsx:      is_current_employee: false,
./src/components/ReviewForm.tsx:      ...initialData
./src/components/ReviewForm.tsx:    }
./src/components/ReviewForm.tsx:  });
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  const rating = watch('rating');
./src/components/ReviewForm.tsx:  const position = watch('position');
./src/components/ReviewForm.tsx:  const pros = watch('pros');
./src/components/ReviewForm.tsx:  const cons = watch('cons');
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  useEffect(() => {
./src/components/ReviewForm.tsx:    let isMounted = true;
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:    const fetchCompanyData = async () => {
./src/components/ReviewForm.tsx:      if (!companyId) {
./src/components/ReviewForm.tsx:        setIsLoading(false);
./src/components/ReviewForm.tsx:        return;
./src/components/ReviewForm.tsx:      }
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      try {
./src/components/ReviewForm.tsx:        const { data: company, error } = await supabase
./src/components/ReviewForm.tsx:          .from('companies')
./src/components/ReviewForm.tsx:          .select('*, reviews(*)')
./src/components/ReviewForm.tsx:          .eq('id', companyId)
./src/components/ReviewForm.tsx:          .single();
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:        if (error) throw error;
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:        if (isMounted && company) {
./src/components/ReviewForm.tsx:          setSelectedCompany(company as JoinedCompany);
./src/components/ReviewForm.tsx:        }
./src/components/ReviewForm.tsx:      } catch (err) {
./src/components/ReviewForm.tsx:        console.error('Error fetching company:', err);
./src/components/ReviewForm.tsx:        toast({
./src/components/ReviewForm.tsx:          title: "Error",
./src/components/ReviewForm.tsx:          description: "Failed to load company data. Please try again.",
./src/components/ReviewForm.tsx:          variant: "destructive",
./src/components/ReviewForm.tsx:        });
./src/components/ReviewForm.tsx:      } finally {
./src/components/ReviewForm.tsx:        if (isMounted) {
./src/components/ReviewForm.tsx:          setIsLoading(false);
./src/components/ReviewForm.tsx:        }
./src/components/ReviewForm.tsx:      }
./src/components/ReviewForm.tsx:    };
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:    fetchCompanyData();
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:    return () => {
./src/components/ReviewForm.tsx:      isMounted = false;
./src/components/ReviewForm.tsx:    };
./src/components/ReviewForm.tsx:  }, [companyId, toast]);
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  const handleReviewSubmit = async (data: ReviewInsert) => {
./src/components/ReviewForm.tsx:    if (!user) {
./src/components/ReviewForm.tsx:      router.push('/auth/login?redirectTo=' + encodeURIComponent(window.location.pathname));
./src/components/ReviewForm.tsx:      return;
./src/components/ReviewForm.tsx:    }
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:    if (!companyId) {
./src/components/ReviewForm.tsx:      toast({
./src/components/ReviewForm.tsx:        title: "Error",
./src/components/ReviewForm.tsx:        description: "Company ID is required",
./src/components/ReviewForm.tsx:        variant: "destructive",
./src/components/ReviewForm.tsx:      });
./src/components/ReviewForm.tsx:      return;
./src/components/ReviewForm.tsx:    }
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:    try {
./src/components/ReviewForm.tsx:      setIsSubmitting(true);
./src/components/ReviewForm.tsx:      const { error } = await supabase.from('reviews').insert({
./src/components/ReviewForm.tsx:        ...data,
./src/components/ReviewForm.tsx:        company_id: companyId,
./src/components/ReviewForm.tsx:        reviewer_id: user.id,
./src/components/ReviewForm.tsx:        status: 'pending'
./src/components/ReviewForm.tsx:      });
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      if (error) throw error;
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      toast({
./src/components/ReviewForm.tsx:        title: "Success",
./src/components/ReviewForm.tsx:        description: "Your review has been submitted successfully and is pending approval.",
./src/components/ReviewForm.tsx:      });
./src/components/ReviewForm.tsx:      
./src/components/ReviewForm.tsx:      reset();
./src/components/ReviewForm.tsx:      onSuccess?.();
./src/components/ReviewForm.tsx:    } catch (error) {
./src/components/ReviewForm.tsx:      console.error('Error submitting review:', error);
./src/components/ReviewForm.tsx:      toast({
./src/components/ReviewForm.tsx:        title: "Error",
./src/components/ReviewForm.tsx:        description: error instanceof Error ? error.message : 'Failed to submit review',
./src/components/ReviewForm.tsx:        variant: "destructive",
./src/components/ReviewForm.tsx:      });
./src/components/ReviewForm.tsx:    } finally {
./src/components/ReviewForm.tsx:      setIsSubmitting(false);
./src/components/ReviewForm.tsx:    }
./src/components/ReviewForm.tsx:  };
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  if (isLoading) {
./src/components/ReviewForm.tsx:    return (
./src/components/ReviewForm.tsx:      <div className="flex justify-center items-center min-h-[400px]" role="status" aria-label="Loading form...">
./src/components/ReviewForm.tsx:        <LoadingSpinner size="lg" />
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:    );
./src/components/ReviewForm.tsx:  }
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:  return (
./src/components/ReviewForm.tsx:    <form 
./src/components/ReviewForm.tsx:      onSubmit={(e) => {
./src/components/ReviewForm.tsx:        e.preventDefault();
./src/components/ReviewForm.tsx:        console.log('Form onSubmit triggered');  // Debug log
./src/components/ReviewForm.tsx:        handleSubmit(handleReviewSubmit)(e);
./src/components/ReviewForm.tsx:      }} 
./src/components/ReviewForm.tsx:      className="space-y-6"
./src/components/ReviewForm.tsx:    >
./src/components/ReviewForm.tsx:      {/* Company Name */}
./src/components/ReviewForm.tsx:      {selectedCompany && (
./src/components/ReviewForm.tsx:        <div className="mb-6">
./src/components/ReviewForm.tsx:          <h2 className="text-xl font-semibold text-gray-900 dark:text-gray-100">
./src/components/ReviewForm.tsx:            Review for {selectedCompany.name}
./src/components/ReviewForm.tsx:          </h2>
./src/components/ReviewForm.tsx:          <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
./src/components/ReviewForm.tsx:            Share your experience working at {selectedCompany.name}
./src/components/ReviewForm.tsx:          </p>
./src/components/ReviewForm.tsx:        </div>
./src/components/ReviewForm.tsx:      )}
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Rating */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <div role="group" aria-label="Rating">
./src/components/ReviewForm.tsx:          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="rating-label">
./src/components/ReviewForm.tsx:            Overall Rating <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:          </label>
./src/components/ReviewForm.tsx:          <div className="flex items-center space-x-4">
./src/components/ReviewForm.tsx:            <div className="flex items-center space-x-1">
./src/components/ReviewForm.tsx:              {[1, 2, 3, 4, 5].map((value) => (
./src/components/ReviewForm.tsx:                <button
./src/components/ReviewForm.tsx:                  key={value}
./src/components/ReviewForm.tsx:                  type="button"
./src/components/ReviewForm.tsx:                  onClick={() => setValue('rating', value)}
./src/components/ReviewForm.tsx:                  className={`p-1 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors
./src/components/ReviewForm.tsx:                    ${rating >= value ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`}
./src/components/ReviewForm.tsx:                  aria-label={`Rate ${value} out of 5 stars`}
./src/components/ReviewForm.tsx:                  aria-pressed={rating >= value}
./src/components/ReviewForm.tsx:                >
./src/components/ReviewForm.tsx:                  <svg className="w-8 h-8" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
./src/components/ReviewForm.tsx:                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
./src/components/ReviewForm.tsx:                  </svg>
./src/components/ReviewForm.tsx:                </button>
./src/components/ReviewForm.tsx:              ))}
./src/components/ReviewForm.tsx:            </div>
./src/components/ReviewForm.tsx:            <span className="text-sm text-gray-600 dark:text-gray-400" aria-live="polite">
./src/components/ReviewForm.tsx:              {rating || 0} out of 5 stars
./src/components/ReviewForm.tsx:            </span>
./src/components/ReviewForm.tsx:          </div>
./src/components/ReviewForm.tsx:          {errors.rating && (
./src/components/ReviewForm.tsx:            <p className="mt-1 text-sm text-red-600">{errors.rating.message}</p>
./src/components/ReviewForm.tsx:          )}
./src/components/ReviewForm.tsx:        </div>
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Title */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="title-label">
./src/components/ReviewForm.tsx:          Review Title <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:        <Input
./src/components/ReviewForm.tsx:          {...register('title')}
./src/components/ReviewForm.tsx:          type="text"
./src/components/ReviewForm.tsx:          placeholder="Summarize your experience in a title"
./src/components/ReviewForm.tsx:          className="w-full"
./src/components/ReviewForm.tsx:          aria-labelledby="title-label"
./src/components/ReviewForm.tsx:        />
./src/components/ReviewForm.tsx:        {errors.title && (
./src/components/ReviewForm.tsx:          <p className="mt-1 text-sm text-red-600">{errors.title.message}</p>
./src/components/ReviewForm.tsx:        )}
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Position */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="position-label">
./src/components/ReviewForm.tsx:          Position <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:        <Input
./src/components/ReviewForm.tsx:          {...register('position')}
./src/components/ReviewForm.tsx:          type="text"
./src/components/ReviewForm.tsx:          list="positions"
./src/components/ReviewForm.tsx:          placeholder="Your job title"
./src/components/ReviewForm.tsx:          className="w-full"
./src/components/ReviewForm.tsx:          aria-labelledby="position-label"
./src/components/ReviewForm.tsx:        />
./src/components/ReviewForm.tsx:        <datalist id="positions">
./src/components/ReviewForm.tsx:          {commonPositions.map((pos) => (
./src/components/ReviewForm.tsx:            <option key={pos} value={pos} />
./src/components/ReviewForm.tsx:          ))}
./src/components/ReviewForm.tsx:        </datalist>
./src/components/ReviewForm.tsx:        {errors.position && (
./src/components/ReviewForm.tsx:          <p className="mt-1 text-sm text-red-600">{errors.position.message}</p>
./src/components/ReviewForm.tsx:        )}
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Employment Status */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="employment-status-label">
./src/components/ReviewForm.tsx:          Employment Status <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:        <select
./src/components/ReviewForm.tsx:          id="employment_status"
./src/components/ReviewForm.tsx:          {...register('employment_status')}
./src/components/ReviewForm.tsx:          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
./src/components/ReviewForm.tsx:        >
./src/components/ReviewForm.tsx:          <option value="">Select employment status</option>
./src/components/ReviewForm.tsx:          {UpdatedEMPLOYMENT_STATUSES.map((status) => (
./src/components/ReviewForm.tsx:            <option key={status} value={status}>
./src/components/ReviewForm.tsx:              {status}
./src/components/ReviewForm.tsx:            </option>
./src/components/ReviewForm.tsx:          ))}
./src/components/ReviewForm.tsx:        </select>
./src/components/ReviewForm.tsx:        {errors.employment_status && (
./src/components/ReviewForm.tsx:          <p className="mt-1 text-sm text-red-600">{errors.employment_status.message}</p>
./src/components/ReviewForm.tsx:        )}
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Current Employee */}
./src/components/ReviewForm.tsx:      <div className="flex items-center">
./src/components/ReviewForm.tsx:        <input
./src/components/ReviewForm.tsx:          {...register('is_current_employee')}
./src/components/ReviewForm.tsx:          type="checkbox"
./src/components/ReviewForm.tsx:          className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700"
./src/components/ReviewForm.tsx:          id="is-current-employee"
./src/components/ReviewForm.tsx:        />
./src/components/ReviewForm.tsx:        <label
./src/components/ReviewForm.tsx:          htmlFor="is-current-employee"
./src/components/ReviewForm.tsx:          className="ml-2 block text-sm text-gray-700 dark:text-gray-300"
./src/components/ReviewForm.tsx:        >
./src/components/ReviewForm.tsx:          I currently work here
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Pros */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="pros-label">
./src/components/ReviewForm.tsx:          Pros <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:        <textarea
./src/components/ReviewForm.tsx:          {...register('pros')}
./src/components/ReviewForm.tsx:          className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100"
./src/components/ReviewForm.tsx:          rows={3}
./src/components/ReviewForm.tsx:          placeholder="What did you like about working here? (minimum 10 characters)"
./src/components/ReviewForm.tsx:          maxLength={1000}
./src/components/ReviewForm.tsx:          aria-labelledby="pros-label"
./src/components/ReviewForm.tsx:        />
./src/components/ReviewForm.tsx:        {errors.pros && (
./src/components/ReviewForm.tsx:          <p className="mt-1 text-sm text-red-600">{errors.pros.message}</p>
./src/components/ReviewForm.tsx:        )}
./src/components/ReviewForm.tsx:        <div className="mt-1 text-sm text-gray-500 dark:text-gray-400">
./src/components/ReviewForm.tsx:          {1000 - (pros?.length || 0)} characters remaining
./src/components/ReviewForm.tsx:        </div>
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Cons */}
./src/components/ReviewForm.tsx:      <div>
./src/components/ReviewForm.tsx:        <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1" id="cons-label">
./src/components/ReviewForm.tsx:          Cons <span className="text-red-500">*</span>
./src/components/ReviewForm.tsx:        </label>
./src/components/ReviewForm.tsx:        <textarea
./src/components/ReviewForm.tsx:          {...register('cons')}
./src/components/ReviewForm.tsx:          className="w-full rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100"
./src/components/ReviewForm.tsx:          rows={3}
./src/components/ReviewForm.tsx:          placeholder="What could be improved? (minimum 10 characters)"
./src/components/ReviewForm.tsx:          maxLength={1000}
./src/components/ReviewForm.tsx:          aria-labelledby="cons-label"
./src/components/ReviewForm.tsx:        />
./src/components/ReviewForm.tsx:        {errors.cons && (
./src/components/ReviewForm.tsx:          <p className="mt-1 text-sm text-red-600">{errors.cons.message}</p>
./src/components/ReviewForm.tsx:        )}
./src/components/ReviewForm.tsx:        <div className="mt-1 text-sm text-gray-500 dark:text-gray-400">
./src/components/ReviewForm.tsx:          {1000 - (cons?.length || 0)} characters remaining
./src/components/ReviewForm.tsx:        </div>
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:
./src/components/ReviewForm.tsx:      {/* Submit Button */}
./src/components/ReviewForm.tsx:      <div className="flex justify-end space-x-4">
./src/components/ReviewForm.tsx:        <Button
./src/components/ReviewForm.tsx:          type="submit"
./src/components/ReviewForm.tsx:          disabled={isSubmitting}
./src/components/ReviewForm.tsx:          variant="default"
./src/components/ReviewForm.tsx:          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md"
./src/components/ReviewForm.tsx:        >
./src/components/ReviewForm.tsx:          {isSubmitting ? (
./src/components/ReviewForm.tsx:            <>
./src/components/ReviewForm.tsx:              <LoadingSpinner size="sm" className="mr-2" />
./src/components/ReviewForm.tsx:              Submitting...
./src/components/ReviewForm.tsx:            </>
./src/components/ReviewForm.tsx:          ) : (
./src/components/ReviewForm.tsx:            'Submit Review'
./src/components/ReviewForm.tsx:          )}
./src/components/ReviewForm.tsx:        </Button>
./src/components/ReviewForm.tsx:      </div>
./src/components/ReviewForm.tsx:    </form>
./src/components/ReviewForm.tsx:  );
./src/components/ReviewForm.tsx:};
./src/components/ReviewList.tsx:'use client'
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:import { useEffect, useState } from 'react';
./src/components/ReviewList.tsx:import { StarIcon } from '@heroicons/react/24/solid';
./src/components/ReviewList.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/components/ReviewList.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/components/ReviewList.tsx:import { formatDateDisplay } from '@/utils/date';
./src/components/ReviewList.tsx:import { ReviewCard } from './ReviewCard';
./src/components/ReviewList.tsx:import { List } from './ui/List';
./src/components/ReviewList.tsx:import type { Review } from '@/types/database';
./src/components/ReviewList.tsx:import { useCompany } from '@/hooks/useCompany';
./src/components/ReviewList.tsx:import { ReviewForm } from '@/components/ReviewForm';
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:interface ReviewListProps {
./src/components/ReviewList.tsx:  reviews?: Review[];
./src/components/ReviewList.tsx:  loading?: boolean;
./src/components/ReviewList.tsx:  error?: Error | null;
./src/components/ReviewList.tsx:  emptyMessage?: string;
./src/components/ReviewList.tsx:  companyId: string;
./src/components/ReviewList.tsx:}
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:export const ReviewList = ({
./src/components/ReviewList.tsx:  reviews = [],
./src/components/ReviewList.tsx:  loading = false,
./src/components/ReviewList.tsx:  error = null,
./src/components/ReviewList.tsx:  emptyMessage = 'No reviews found',
./src/components/ReviewList.tsx:  companyId
./src/components/ReviewList.tsx:}: ReviewListProps) => {
./src/components/ReviewList.tsx:  const { session } = useAuth();
./src/components/ReviewList.tsx:  const [showReviewForm, setShowReviewForm] = useState(false);
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:  if (loading) {
./src/components/ReviewList.tsx:    return (
./src/components/ReviewList.tsx:      <div className="space-y-4">
./src/components/ReviewList.tsx:        {[...Array(3)].map((_, i) => (
./src/components/ReviewList.tsx:          <div
./src/components/ReviewList.tsx:            key={i}
./src/components/ReviewList.tsx:            className="bg-gray-100 dark:bg-gray-800 animate-pulse h-32 rounded-lg"
./src/components/ReviewList.tsx:          />
./src/components/ReviewList.tsx:        ))}
./src/components/ReviewList.tsx:      </div>
./src/components/ReviewList.tsx:    );
./src/components/ReviewList.tsx:  }
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:  if (error) {
./src/components/ReviewList.tsx:    return (
./src/components/ReviewList.tsx:      <div className="text-red-500 dark:text-red-400 text-center p-4">
./src/components/ReviewList.tsx:        {error.message || 'An error occurred while loading reviews'}
./src/components/ReviewList.tsx:      </div>
./src/components/ReviewList.tsx:    );
./src/components/ReviewList.tsx:  }
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:  if (!reviews?.length) {
./src/components/ReviewList.tsx:    return (
./src/components/ReviewList.tsx:      <div className="text-gray-500 dark:text-gray-400 text-center p-4">
./src/components/ReviewList.tsx:        {emptyMessage}
./src/components/ReviewList.tsx:      </div>
./src/components/ReviewList.tsx:    );
./src/components/ReviewList.tsx:  }
./src/components/ReviewList.tsx:
./src/components/ReviewList.tsx:  return (
./src/components/ReviewList.tsx:    <div className="reviews-section">
./src/components/ReviewList.tsx:      <h3>Reviews</h3>
./src/components/ReviewList.tsx:      {showReviewForm && (
./src/components/ReviewList.tsx:        <ReviewForm 
./src/components/ReviewList.tsx:          companyId={companyId}
./src/components/ReviewList.tsx:          onClose={() => setShowReviewForm(false)}
./src/components/ReviewList.tsx:        />
./src/components/ReviewList.tsx:      )}
./src/components/ReviewList.tsx:      <div className="reviews-list">
./src/components/ReviewList.tsx:        {reviews.map((review) => (
./src/components/ReviewList.tsx:          <ReviewCard key={review.id} review={review} />
./src/components/ReviewList.tsx:        ))}
./src/components/ReviewList.tsx:      </div>
./src/components/ReviewList.tsx:    </div>
./src/components/ReviewList.tsx:  );
./src/components/ReviewList.tsx:};
./src/components/RootLayoutClient.tsx:'use client'
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:import { Providers } from '@/app/providers';
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:import { Footer } from '@/components/Footer';
./src/components/RootLayoutClient.tsx:import { Navbar } from '@/components/Navbar';
./src/components/RootLayoutClient.tsx:import PerformanceMonitor from '@/components/PerformanceMonitor';
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:import ThemeToggle from '@/components/ThemeToggle';
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:
./src/components/RootLayoutClient.tsx:export default function RootLayoutClient({ children }: { children: React.ReactNode }) {
./src/components/RootLayoutClient.tsx:  return (
./src/components/RootLayoutClient.tsx:    <Providers>
./src/components/RootLayoutClient.tsx:      <div className="flex flex-col min-h-screen">
./src/components/RootLayoutClient.tsx:        <Navbar />
./src/components/RootLayoutClient.tsx:        <main className="flex-grow">{children}</main>
./src/components/RootLayoutClient.tsx:        <ThemeToggle />
./src/components/RootLayoutClient.tsx:        <PerformanceMonitor />
./src/components/RootLayoutClient.tsx:        <Footer />
./src/components/RootLayoutClient.tsx:      </div>
./src/components/RootLayoutClient.tsx:    </Providers>
./src/components/RootLayoutClient.tsx:  );
./src/components/RootLayoutClient.tsx:}
./src/components/SearchAndFilter.tsx:'use client'
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:import { useState, useEffect } from 'react';
./src/components/SearchAndFilter.tsx:import { useRouter } from 'next/navigation';
./src/components/SearchAndFilter.tsx:import { supabase } from '@/lib/supabaseClient';
./src/components/SearchAndFilter.tsx:import type { Company } from '@/types/database';
./src/components/SearchAndFilter.tsx:import { Input } from '@/components/ui/input';
./src/components/SearchAndFilter.tsx:import { Button } from '@/components/ui/button';
./src/components/SearchAndFilter.tsx:import { Slider } from '@/components/ui/slider';
./src/components/SearchAndFilter.tsx:import { Badge } from '@/components/ui/badge';
./src/components/SearchAndFilter.tsx:import { FilterIcon, XIcon } from 'lucide-react';
./src/components/SearchAndFilter.tsx:import {
./src/components/SearchAndFilter.tsx:  Select,
./src/components/SearchAndFilter.tsx:  SelectTrigger,
./src/components/SearchAndFilter.tsx:  SelectValue,
./src/components/SearchAndFilter.tsx:  SelectContent,
./src/components/SearchAndFilter.tsx:  SelectItem
./src/components/SearchAndFilter.tsx:} from '@/components/ui/select';
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:interface SearchAndFilterProps {
./src/components/SearchAndFilter.tsx:  onSearch?: (query: string) => void;
./src/components/SearchAndFilter.tsx:  onIndustryChange?: (industry: string) => void;
./src/components/SearchAndFilter.tsx:  onLocationChange?: (location: string) => void;
./src/components/SearchAndFilter.tsx:  selectedIndustry?: string;
./src/components/SearchAndFilter.tsx:  selectedLocation?: string;
./src/components/SearchAndFilter.tsx:}
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:const COMPANY_SIZES = [
./src/components/SearchAndFilter.tsx:  'All Sizes',
./src/components/SearchAndFilter.tsx:  '1-10',
./src/components/SearchAndFilter.tsx:  '11-50',
./src/components/SearchAndFilter.tsx:  '51-200',
./src/components/SearchAndFilter.tsx:  '201-500',
./src/components/SearchAndFilter.tsx:  '501-1000',
./src/components/SearchAndFilter.tsx:  '1001-5000',
./src/components/SearchAndFilter.tsx:  '5000+'
./src/components/SearchAndFilter.tsx:];
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:const SearchAndFilter = ({ 
./src/components/SearchAndFilter.tsx:  onSearch, 
./src/components/SearchAndFilter.tsx:  onIndustryChange, 
./src/components/SearchAndFilter.tsx:  onLocationChange,
./src/components/SearchAndFilter.tsx:  selectedIndustry = '',
./src/components/SearchAndFilter.tsx:  selectedLocation = ''
./src/components/SearchAndFilter.tsx:}: SearchAndFilterProps) => {
./src/components/SearchAndFilter.tsx:  const [searchQuery, setSearchQuery] = useState('');
./src/components/SearchAndFilter.tsx:  const [industries, setIndustries] = useState<string[]>([]);
./src/components/SearchAndFilter.tsx:  const [locations, setLocations] = useState<string[]>([]);
./src/components/SearchAndFilter.tsx:  const router = useRouter();
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:  useEffect(() => {
./src/components/SearchAndFilter.tsx:    const fetchFilters = async () => {
./src/components/SearchAndFilter.tsx:      try {
./src/components/SearchAndFilter.tsx:        // Fetch unique industries
./src/components/SearchAndFilter.tsx:        const { data: industryData } = await supabase
./src/components/SearchAndFilter.tsx:          .from('companies')
./src/components/SearchAndFilter.tsx:          .select('industry')
./src/components/SearchAndFilter.tsx:          .not('industry', 'is', null);
./src/components/SearchAndFilter.tsx:        
./src/components/SearchAndFilter.tsx:        if (industryData) {
./src/components/SearchAndFilter.tsx:          const uniqueIndustries = [...new Set(industryData.map(item => item.industry))];
./src/components/SearchAndFilter.tsx:          setIndustries(uniqueIndustries);
./src/components/SearchAndFilter.tsx:        }
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:        // Fetch unique locations
./src/components/SearchAndFilter.tsx:        const { data: locationData } = await supabase
./src/components/SearchAndFilter.tsx:          .from('companies')
./src/components/SearchAndFilter.tsx:          .select('location')
./src/components/SearchAndFilter.tsx:          .not('location', 'is', null);
./src/components/SearchAndFilter.tsx:        
./src/components/SearchAndFilter.tsx:        if (locationData) {
./src/components/SearchAndFilter.tsx:          const uniqueLocations = [...new Set(locationData.map(item => item.location))];
./src/components/SearchAndFilter.tsx:          setLocations(uniqueLocations);
./src/components/SearchAndFilter.tsx:        }
./src/components/SearchAndFilter.tsx:      } catch (error) {
./src/components/SearchAndFilter.tsx:        console.error('Error fetching filters:', error);
./src/components/SearchAndFilter.tsx:      }
./src/components/SearchAndFilter.tsx:    };
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:    fetchFilters();
./src/components/SearchAndFilter.tsx:  }, []);
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
./src/components/SearchAndFilter.tsx:    const query = event.target.value;
./src/components/SearchAndFilter.tsx:    setSearchQuery(query);
./src/components/SearchAndFilter.tsx:    onSearch?.(query);
./src/components/SearchAndFilter.tsx:  };
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:  const handleIndustryChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
./src/components/SearchAndFilter.tsx:    const industry = event.target.value;
./src/components/SearchAndFilter.tsx:    onIndustryChange?.(industry);
./src/components/SearchAndFilter.tsx:  };
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:  const handleLocationChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
./src/components/SearchAndFilter.tsx:    const location = event.target.value;
./src/components/SearchAndFilter.tsx:    onLocationChange?.(location);
./src/components/SearchAndFilter.tsx:  };
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:  return (
./src/components/SearchAndFilter.tsx:    <div className="w-full max-w-4xl mx-auto p-4">
./src/components/SearchAndFilter.tsx:      <div className="flex flex-col md:flex-row gap-4">
./src/components/SearchAndFilter.tsx:        {/* Search Input */}
./src/components/SearchAndFilter.tsx:        <div className="flex-1">
./src/components/SearchAndFilter.tsx:          <Input
./src/components/SearchAndFilter.tsx:            type="text"
./src/components/SearchAndFilter.tsx:            placeholder="Search companies..."
./src/components/SearchAndFilter.tsx:            value={searchQuery}
./src/components/SearchAndFilter.tsx:            onChange={handleSearch}
./src/components/SearchAndFilter.tsx:            className="w-full"
./src/components/SearchAndFilter.tsx:          />
./src/components/SearchAndFilter.tsx:        </div>
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:        {/* Industry Filter */}
./src/components/SearchAndFilter.tsx:        <div className="w-full md:w-48">
./src/components/SearchAndFilter.tsx:          <Select
./src/components/SearchAndFilter.tsx:            value={selectedIndustry || "all"}
./src/components/SearchAndFilter.tsx:            onValueChange={(value) => onIndustryChange?.(value === "all" ? "" : value)}
./src/components/SearchAndFilter.tsx:          >
./src/components/SearchAndFilter.tsx:            <SelectTrigger>
./src/components/SearchAndFilter.tsx:              <SelectValue placeholder="All Industries" />
./src/components/SearchAndFilter.tsx:            </SelectTrigger>
./src/components/SearchAndFilter.tsx:            <SelectContent>
./src/components/SearchAndFilter.tsx:              <SelectItem value="all">All Industries</SelectItem>
./src/components/SearchAndFilter.tsx:              {industries.map((industry) => (
./src/components/SearchAndFilter.tsx:                <SelectItem key={industry} value={industry}>
./src/components/SearchAndFilter.tsx:                  {industry}
./src/components/SearchAndFilter.tsx:                </SelectItem>
./src/components/SearchAndFilter.tsx:              ))}
./src/components/SearchAndFilter.tsx:            </SelectContent>
./src/components/SearchAndFilter.tsx:          </Select>
./src/components/SearchAndFilter.tsx:        </div>
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:        {/* Location Filter */}
./src/components/SearchAndFilter.tsx:        <div className="w-full md:w-48">
./src/components/SearchAndFilter.tsx:          <Select
./src/components/SearchAndFilter.tsx:            value={selectedLocation || "all"}
./src/components/SearchAndFilter.tsx:            onValueChange={(value) => onLocationChange?.(value === "all" ? "" : value)}
./src/components/SearchAndFilter.tsx:          >
./src/components/SearchAndFilter.tsx:            <SelectTrigger>
./src/components/SearchAndFilter.tsx:              <SelectValue placeholder="All Locations" />
./src/components/SearchAndFilter.tsx:            </SelectTrigger>
./src/components/SearchAndFilter.tsx:            <SelectContent>
./src/components/SearchAndFilter.tsx:              <SelectItem value="all">All Locations</SelectItem>
./src/components/SearchAndFilter.tsx:              {locations.map((location) => (
./src/components/SearchAndFilter.tsx:                <SelectItem key={location} value={location}>
./src/components/SearchAndFilter.tsx:                  {location}
./src/components/SearchAndFilter.tsx:                </SelectItem>
./src/components/SearchAndFilter.tsx:              ))}
./src/components/SearchAndFilter.tsx:            </SelectContent>
./src/components/SearchAndFilter.tsx:          </Select>
./src/components/SearchAndFilter.tsx:        </div>
./src/components/SearchAndFilter.tsx:      </div>
./src/components/SearchAndFilter.tsx:    </div>
./src/components/SearchAndFilter.tsx:  );
./src/components/SearchAndFilter.tsx:};
./src/components/SearchAndFilter.tsx:
./src/components/SearchAndFilter.tsx:export default SearchAndFilter;
./src/components/SearchBar.tsx:'use client'
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:import { useState } from 'react';
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:import { useRouter } from 'next/navigation';
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:export function SearchBar() {
./src/components/SearchBar.tsx:  const router = useRouter();
./src/components/SearchBar.tsx:  const [searchTerm, setSearchTerm] = useState('');
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:  const handleSearch = (e: React.FormEvent) => {
./src/components/SearchBar.tsx:    e.preventDefault();
./src/components/SearchBar.tsx:    router.push(`/search?q=${encodeURIComponent(searchTerm)}`);
./src/components/SearchBar.tsx:  };
./src/components/SearchBar.tsx:
./src/components/SearchBar.tsx:  return (
./src/components/SearchBar.tsx:    <form onSubmit={handleSearch} className="flex gap-2">
./src/components/SearchBar.tsx:      <input
./src/components/SearchBar.tsx:        type="text"
./src/components/SearchBar.tsx:        value={searchTerm}
./src/components/SearchBar.tsx:        onChange={e => setSearchTerm(e.target.value)}
./src/components/SearchBar.tsx:        className="border rounded-md px-4 py-2"
./src/components/SearchBar.tsx:        placeholder="Search companies..."
./src/components/SearchBar.tsx:      />
./src/components/SearchBar.tsx:      <button
./src/components/SearchBar.tsx:        type="submit"
./src/components/SearchBar.tsx:        className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
./src/components/SearchBar.tsx:      >
./src/components/SearchBar.tsx:        Search
./src/components/SearchBar.tsx:      </button>
./src/components/SearchBar.tsx:    </form>
./src/components/SearchBar.tsx:  );
./src/components/SearchBar.tsx:}
./src/components/StatCard.tsx:
./src/components/StatCard.tsx:
./src/components/StatCard.tsx:interface StatCardProps {
./src/components/StatCard.tsx:  label: string;
./src/components/StatCard.tsx:  value: string | number;
./src/components/StatCard.tsx:  type: 'rating' | 'percentage' | 'number';
./src/components/StatCard.tsx:}
./src/components/StatCard.tsx:
./src/components/StatCard.tsx:export function StatCard({ label, value, type }: StatCardProps) {
./src/components/StatCard.tsx:  const formattedValue = type === 'rating' && typeof value === 'number' ? value.toFixed(1) : value;
./src/components/StatCard.tsx:
./src/components/StatCard.tsx:  return (
./src/components/StatCard.tsx:    <div className="bg-white rounded-lg shadow p-4">
./src/components/StatCard.tsx:      <p className="text-sm text-gray-600">{label}</p>
./src/components/StatCard.tsx:      <p className="text-2xl font-bold">
./src/components/StatCard.tsx:        {formattedValue}
./src/components/StatCard.tsx:        {type === 'rating' && ' / 5'}
./src/components/StatCard.tsx:      </p>
./src/components/StatCard.tsx:    </div>
./src/components/StatCard.tsx:  );
./src/components/StatCard.tsx:}
./src/components/ThemeProvider.tsx:'use client'
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:import * as React from 'react';
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:import { ThemeProvider as NextThemesProvider } from 'next-themes';
./src/components/ThemeProvider.tsx:import type { ThemeProviderProps as NextThemeProviderProps } from 'next-themes';
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:type ThemeProviderProps = React.PropsWithChildren<NextThemeProviderProps>;
./src/components/ThemeProvider.tsx:
./src/components/ThemeProvider.tsx:export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
./src/components/ThemeProvider.tsx:  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
./src/components/ThemeProvider.tsx:}
./src/components/ThemeToggle.tsx:'use client'
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:import { useEffect, useState } from 'react';
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:import { useTheme } from 'next-themes';
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:import { Sun, Moon } from 'lucide-react';
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:export default function ThemeToggle() {
./src/components/ThemeToggle.tsx:  const { theme, setTheme } = useTheme();
./src/components/ThemeToggle.tsx:  const [mounted, setMounted] = useState(false);
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:  useEffect(() => {
./src/components/ThemeToggle.tsx:    setMounted(true);
./src/components/ThemeToggle.tsx:  }, []);
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:  if (!mounted) {
./src/components/ThemeToggle.tsx:    return null;
./src/components/ThemeToggle.tsx:  }
./src/components/ThemeToggle.tsx:
./src/components/ThemeToggle.tsx:  return (
./src/components/ThemeToggle.tsx:    <button
./src/components/ThemeToggle.tsx:      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
./src/components/ThemeToggle.tsx:      className="fixed bottom-6 right-6 p-2 rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 z-50 border border-gray-200 dark:border-gray-700"
./src/components/ThemeToggle.tsx:      title="Toggle theme"
./src/components/ThemeToggle.tsx:    >
./src/components/ThemeToggle.tsx:      {theme === 'dark' ? (
./src/components/ThemeToggle.tsx:        <Sun className="w-5 h-5 text-gray-600 dark:text-gray-300" />
./src/components/ThemeToggle.tsx:      ) : (
./src/components/ThemeToggle.tsx:        <Moon className="w-5 h-5 text-gray-600 dark:text-gray-300" />
./src/components/ThemeToggle.tsx:      )}
./src/components/ThemeToggle.tsx:    </button>
./src/components/ThemeToggle.tsx:  );
./src/components/ThemeToggle.tsx:}
./src/components/ui/alert.tsx:import * as React from "react"
./src/components/ui/alert.tsx:import { cn } from "@/lib/utils"
./src/components/ui/alert.tsx:
./src/components/ui/alert.tsx:const Alert = React.forwardRef<
./src/components/ui/alert.tsx:  HTMLDivElement,
./src/components/ui/alert.tsx:  React.HTMLAttributes<HTMLDivElement> & {
./src/components/ui/alert.tsx:    variant?: "default" | "destructive"
./src/components/ui/alert.tsx:  }
./src/components/ui/alert.tsx:>(({ className, variant = "default", ...props }, ref) => (
./src/components/ui/alert.tsx:  <div
./src/components/ui/alert.tsx:    ref={ref}
./src/components/ui/alert.tsx:    role="alert"
./src/components/ui/alert.tsx:    className={cn(
./src/components/ui/alert.tsx:      "relative w-full rounded-lg border p-4",
./src/components/ui/alert.tsx:      {
./src/components/ui/alert.tsx:        "bg-destructive/15 text-destructive border-destructive": variant === "destructive",
./src/components/ui/alert.tsx:        "bg-background text-foreground": variant === "default",
./src/components/ui/alert.tsx:      },
./src/components/ui/alert.tsx:      className
./src/components/ui/alert.tsx:    )}
./src/components/ui/alert.tsx:    {...props}
./src/components/ui/alert.tsx:  />
./src/components/ui/alert.tsx:))
./src/components/ui/alert.tsx:Alert.displayName = "Alert"
./src/components/ui/alert.tsx:
./src/components/ui/alert.tsx:const AlertTitle = React.forwardRef<
./src/components/ui/alert.tsx:  HTMLParagraphElement,
./src/components/ui/alert.tsx:  React.HTMLAttributes<HTMLHeadingElement>
./src/components/ui/alert.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/alert.tsx:  <h5
./src/components/ui/alert.tsx:    ref={ref}
./src/components/ui/alert.tsx:    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
./src/components/ui/alert.tsx:    {...props}
./src/components/ui/alert.tsx:  />
./src/components/ui/alert.tsx:))
./src/components/ui/alert.tsx:AlertTitle.displayName = "AlertTitle"
./src/components/ui/alert.tsx:
./src/components/ui/alert.tsx:const AlertDescription = React.forwardRef<
./src/components/ui/alert.tsx:  HTMLParagraphElement,
./src/components/ui/alert.tsx:  React.HTMLAttributes<HTMLParagraphElement>
./src/components/ui/alert.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/alert.tsx:  <div
./src/components/ui/alert.tsx:    ref={ref}
./src/components/ui/alert.tsx:    className={cn("text-sm [&_p]:leading-relaxed", className)}
./src/components/ui/alert.tsx:    {...props}
./src/components/ui/alert.tsx:  />
./src/components/ui/alert.tsx:))
./src/components/ui/alert.tsx:AlertDescription.displayName = "AlertDescription"
./src/components/ui/alert.tsx:
./src/components/ui/alert.tsx:export { Alert, AlertTitle, AlertDescription } 
./src/components/ui/badge.tsx:import { ReactNode } from 'react';
./src/components/ui/badge.tsx:
./src/components/ui/badge.tsx:import { cn } from '@/lib/utils';
./src/components/ui/badge.tsx:
./src/components/ui/badge.tsx:
./src/components/ui/badge.tsx:interface BadgeProps {
./src/components/ui/badge.tsx:  children: ReactNode;
./src/components/ui/badge.tsx:  variant?: 'default' | 'secondary' | 'destructive' | 'outline';
./src/components/ui/badge.tsx:  className?: string;
./src/components/ui/badge.tsx:}
./src/components/ui/badge.tsx:
./src/components/ui/badge.tsx:export function Badge({ children, variant = 'default', className }: BadgeProps) {
./src/components/ui/badge.tsx:  const variants = {
./src/components/ui/badge.tsx:    default: 'bg-primary text-primary-foreground',
./src/components/ui/badge.tsx:    secondary: 'bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-gray-100',
./src/components/ui/badge.tsx:    destructive: 'bg-red-500 text-white',
./src/components/ui/badge.tsx:    outline: 'border border-gray-200 text-gray-900 dark:border-gray-700 dark:text-gray-100',
./src/components/ui/badge.tsx:  };
./src/components/ui/badge.tsx:
./src/components/ui/badge.tsx:  return (
./src/components/ui/badge.tsx:    <span
./src/components/ui/badge.tsx:      className={cn(
./src/components/ui/badge.tsx:        'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium transition-colors',
./src/components/ui/badge.tsx:        variants[variant],
./src/components/ui/badge.tsx:        className
./src/components/ui/badge.tsx:      )}
./src/components/ui/badge.tsx:    >
./src/components/ui/badge.tsx:      {children}
./src/components/ui/badge.tsx:    </span>
./src/components/ui/badge.tsx:  );
./src/components/ui/badge.tsx:}
./src/components/ui/button.tsx:import * as React from 'react';
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:import { Slot } from '@radix-ui/react-slot';
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:import { cva, type VariantProps } from 'class-variance-authority';
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:import { cn } from '@/lib/utils';
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:const buttonVariants = cva(
./src/components/ui/button.tsx:  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
./src/components/ui/button.tsx:  {
./src/components/ui/button.tsx:    variants: {
./src/components/ui/button.tsx:      variant: {
./src/components/ui/button.tsx:        default: 'bg-blue-600 text-white hover:bg-blue-700',
./src/components/ui/button.tsx:        destructive: 'bg-red-500 text-white hover:bg-red-600',
./src/components/ui/button.tsx:        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
./src/components/ui/button.tsx:        secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200',
./src/components/ui/button.tsx:        ghost: 'hover:bg-gray-100 hover:text-gray-900',
./src/components/ui/button.tsx:        link: 'text-blue-600 underline-offset-4 hover:underline',
./src/components/ui/button.tsx:      },
./src/components/ui/button.tsx:      size: {
./src/components/ui/button.tsx:        default: 'h-10 px-4 py-2',
./src/components/ui/button.tsx:        sm: 'h-9 rounded-md px-3',
./src/components/ui/button.tsx:        lg: 'h-11 rounded-md px-8',
./src/components/ui/button.tsx:        icon: 'h-10 w-10',
./src/components/ui/button.tsx:      },
./src/components/ui/button.tsx:    },
./src/components/ui/button.tsx:    defaultVariants: {
./src/components/ui/button.tsx:      variant: 'default',
./src/components/ui/button.tsx:      size: 'default',
./src/components/ui/button.tsx:    },
./src/components/ui/button.tsx:  }
./src/components/ui/button.tsx:);
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:export interface ButtonProps
./src/components/ui/button.tsx:  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
./src/components/ui/button.tsx:    VariantProps<typeof buttonVariants> {
./src/components/ui/button.tsx:  asChild?: boolean;
./src/components/ui/button.tsx:}
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
./src/components/ui/button.tsx:  ({ className, variant, size, asChild = false, ...props }, ref) => {
./src/components/ui/button.tsx:    const Comp = asChild ? Slot : 'button';
./src/components/ui/button.tsx:    return (
./src/components/ui/button.tsx:      <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />
./src/components/ui/button.tsx:    );
./src/components/ui/button.tsx:  }
./src/components/ui/button.tsx:);
./src/components/ui/button.tsx:Button.displayName = 'Button';
./src/components/ui/button.tsx:
./src/components/ui/button.tsx:export { Button, buttonVariants };
./src/components/ui/card.tsx:import * as React from 'react';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:import { cn } from '@/lib/utils';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const Card = React.forwardRef<
./src/components/ui/card.tsx:  HTMLDivElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLDivElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <div
./src/components/ui/card.tsx:    ref={ref}
./src/components/ui/card.tsx:    className={cn(
./src/components/ui/card.tsx:      'rounded-lg border bg-card text-card-foreground shadow-sm',
./src/components/ui/card.tsx:      className
./src/components/ui/card.tsx:    )}
./src/components/ui/card.tsx:    {...props}
./src/components/ui/card.tsx:  />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:Card.displayName = 'Card';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const CardHeader = React.forwardRef<
./src/components/ui/card.tsx:  HTMLDivElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLDivElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <div
./src/components/ui/card.tsx:    ref={ref}
./src/components/ui/card.tsx:    className={cn('flex flex-col space-y-1.5 p-6', className)}
./src/components/ui/card.tsx:    {...props}
./src/components/ui/card.tsx:  />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:CardHeader.displayName = 'CardHeader';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const CardTitle = React.forwardRef<
./src/components/ui/card.tsx:  HTMLParagraphElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLHeadingElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <h3
./src/components/ui/card.tsx:    ref={ref}
./src/components/ui/card.tsx:    className={cn(
./src/components/ui/card.tsx:      'text-2xl font-semibold leading-none tracking-tight',
./src/components/ui/card.tsx:      className
./src/components/ui/card.tsx:    )}
./src/components/ui/card.tsx:    {...props}
./src/components/ui/card.tsx:  />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:CardTitle.displayName = 'CardTitle';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const CardDescription = React.forwardRef<
./src/components/ui/card.tsx:  HTMLParagraphElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLParagraphElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <p
./src/components/ui/card.tsx:    ref={ref}
./src/components/ui/card.tsx:    className={cn('text-sm text-muted-foreground', className)}
./src/components/ui/card.tsx:    {...props}
./src/components/ui/card.tsx:  />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:CardDescription.displayName = 'CardDescription';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const CardContent = React.forwardRef<
./src/components/ui/card.tsx:  HTMLDivElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLDivElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:CardContent.displayName = 'CardContent';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:const CardFooter = React.forwardRef<
./src/components/ui/card.tsx:  HTMLDivElement,
./src/components/ui/card.tsx:  React.HTMLAttributes<HTMLDivElement>
./src/components/ui/card.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/card.tsx:  <div
./src/components/ui/card.tsx:    ref={ref}
./src/components/ui/card.tsx:    className={cn('flex items-center p-6 pt-0', className)}
./src/components/ui/card.tsx:    {...props}
./src/components/ui/card.tsx:  />
./src/components/ui/card.tsx:));
./src/components/ui/card.tsx:CardFooter.displayName = 'CardFooter';
./src/components/ui/card.tsx:
./src/components/ui/card.tsx:export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };
./src/components/ui/command.tsx:'use client'
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:import * as React from "react"
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:import { Dialog, DialogContent } from "@radix-ui/react-dialog"
./src/components/ui/command.tsx:import { DialogProps } from "@radix-ui/react-dialog"
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:import { Command as CommandPrimitive } from "cmdk"
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:import { cn } from "@/lib/utils"
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:
./src/components/ui/command.tsx:interface CommandDialogProps extends DialogProps {
./src/components/ui/command.tsx:  children: React.ReactNode;
./src/components/ui/command.tsx:}
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const Command = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className={cn(
./src/components/ui/command.tsx:      "flex h-full w-full flex-col overflow-hidden rounded-md bg-white dark:bg-gray-800",
./src/components/ui/command.tsx:      className
./src/components/ui/command.tsx:    )}
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:Command.displayName = CommandPrimitive.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
./src/components/ui/command.tsx:  return (
./src/components/ui/command.tsx:    <Dialog {...props}>
./src/components/ui/command.tsx:      <DialogContent className="overflow-hidden p-0">
./src/components/ui/command.tsx:        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-gray-500 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
./src/components/ui/command.tsx:          {children}
./src/components/ui/command.tsx:        </Command>
./src/components/ui/command.tsx:      </DialogContent>
./src/components/ui/command.tsx:    </Dialog>
./src/components/ui/command.tsx:  )
./src/components/ui/command.tsx:}
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandInput = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.Input>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
./src/components/ui/command.tsx:    <CommandPrimitive.Input
./src/components/ui/command.tsx:      ref={ref}
./src/components/ui/command.tsx:      className={cn(
./src/components/ui/command.tsx:        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-gray-500 disabled:cursor-not-allowed disabled:opacity-50 dark:text-white",
./src/components/ui/command.tsx:        className
./src/components/ui/command.tsx:      )}
./src/components/ui/command.tsx:      {...props}
./src/components/ui/command.tsx:    />
./src/components/ui/command.tsx:  </div>
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandInput.displayName = CommandPrimitive.Input.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandList = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.List>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive.List
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandList.displayName = CommandPrimitive.List.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandEmpty = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.Empty>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
./src/components/ui/command.tsx:>((props, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive.Empty
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className="py-6 text-center text-sm text-gray-500"
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandEmpty.displayName = CommandPrimitive.Empty.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandGroup = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.Group>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive.Group
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className={cn(
./src/components/ui/command.tsx:      "overflow-hidden p-1 text-gray-700 dark:text-gray-400 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-gray-500",
./src/components/ui/command.tsx:      className
./src/components/ui/command.tsx:    )}
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandGroup.displayName = CommandPrimitive.Group.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandSeparator = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.Separator>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive.Separator
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className={cn("-mx-1 h-px bg-gray-200 dark:bg-gray-800", className)}
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandSeparator.displayName = CommandPrimitive.Separator.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandItem = React.forwardRef<
./src/components/ui/command.tsx:  React.ElementRef<typeof CommandPrimitive.Item>,
./src/components/ui/command.tsx:  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
./src/components/ui/command.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/command.tsx:  <CommandPrimitive.Item
./src/components/ui/command.tsx:    ref={ref}
./src/components/ui/command.tsx:    className={cn(
./src/components/ui/command.tsx:      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-gray-100 aria-selected:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:aria-selected:bg-gray-800 dark:aria-selected:text-white",
./src/components/ui/command.tsx:      className
./src/components/ui/command.tsx:    )}
./src/components/ui/command.tsx:    {...props}
./src/components/ui/command.tsx:  />
./src/components/ui/command.tsx:))
./src/components/ui/command.tsx:CommandItem.displayName = CommandPrimitive.Item.displayName
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:const CommandShortcut = ({
./src/components/ui/command.tsx:  className,
./src/components/ui/command.tsx:  ...props
./src/components/ui/command.tsx:}: React.HTMLAttributes<HTMLSpanElement>) => {
./src/components/ui/command.tsx:  return (
./src/components/ui/command.tsx:    <span
./src/components/ui/command.tsx:      className={cn(
./src/components/ui/command.tsx:        "ml-auto text-xs tracking-widest text-gray-500",
./src/components/ui/command.tsx:        className
./src/components/ui/command.tsx:      )}
./src/components/ui/command.tsx:      {...props}
./src/components/ui/command.tsx:    />
./src/components/ui/command.tsx:  )
./src/components/ui/command.tsx:}
./src/components/ui/command.tsx:CommandShortcut.displayName = "CommandShortcut"
./src/components/ui/command.tsx: 
./src/components/ui/command.tsx:export {
./src/components/ui/command.tsx:  Command,
./src/components/ui/command.tsx:  CommandDialog,
./src/components/ui/command.tsx:  CommandInput,
./src/components/ui/command.tsx:  CommandList,
./src/components/ui/command.tsx:  CommandEmpty,
./src/components/ui/command.tsx:  CommandGroup,
./src/components/ui/command.tsx:  CommandItem,
./src/components/ui/command.tsx:  CommandShortcut,
./src/components/ui/command.tsx:  CommandSeparator,
./src/components/ui/command.tsx:}
./src/components/ui/index.ts:
./src/components/ui/index.ts:
./src/components/ui/index.ts:export * from './input';
./src/components/ui/index.ts:export * from './button';
./src/components/ui/index.ts:export * from './card';
./src/components/ui/input.tsx:import * as React from 'react';
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:import { cn } from '@/lib/utils';
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:export type InputProps = React.InputHTMLAttributes<HTMLInputElement>;
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:const Input = React.forwardRef<HTMLInputElement, InputProps>(
./src/components/ui/input.tsx:  ({ className, type, ...props }, ref) => {
./src/components/ui/input.tsx:    return (
./src/components/ui/input.tsx:      <input
./src/components/ui/input.tsx:        type={type}
./src/components/ui/input.tsx:        className={cn(
./src/components/ui/input.tsx:          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
./src/components/ui/input.tsx:          className
./src/components/ui/input.tsx:        )}
./src/components/ui/input.tsx:        ref={ref}
./src/components/ui/input.tsx:        {...props}
./src/components/ui/input.tsx:      />
./src/components/ui/input.tsx:    );
./src/components/ui/input.tsx:  }
./src/components/ui/input.tsx:);
./src/components/ui/input.tsx:Input.displayName = 'Input';
./src/components/ui/input.tsx:
./src/components/ui/input.tsx:export { Input };
./src/components/ui/label.tsx:import * as React from 'react';
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:import * as LabelPrimitive from '@radix-ui/react-label';
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:import { cva, type VariantProps } from 'class-variance-authority';
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:import { cn } from '@/lib/utils';
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:// src/components/ui/label.tsx
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:const labelVariants = cva(
./src/components/ui/label.tsx:  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
./src/components/ui/label.tsx:);
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:const Label = React.forwardRef<
./src/components/ui/label.tsx:  React.ElementRef<typeof LabelPrimitive.Root>,
./src/components/ui/label.tsx:  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
./src/components/ui/label.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/label.tsx:  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
./src/components/ui/label.tsx:));
./src/components/ui/label.tsx:Label.displayName = LabelPrimitive.Root.displayName;
./src/components/ui/label.tsx:
./src/components/ui/label.tsx:export { Label };
./src/components/ui/List.tsx:'use client'
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:import { ReactNode } from 'react';
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:import { ChevronLeft, ChevronRight } from 'lucide-react';
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:interface ListProps<T> {
./src/components/ui/List.tsx:  items: T[];
./src/components/ui/List.tsx:  renderItem: (item: T) => ReactNode;
./src/components/ui/List.tsx:  keyExtractor: (item: T) => string;
./src/components/ui/List.tsx:  isLoading?: boolean;
./src/components/ui/List.tsx:  error?: Error | null;
./src/components/ui/List.tsx:  emptyMessage?: string;
./src/components/ui/List.tsx:  loadingItemCount?: number;
./src/components/ui/List.tsx:  renderLoading?: () => ReactNode;
./src/components/ui/List.tsx:  renderError?: (error: Error) => ReactNode;
./src/components/ui/List.tsx:  pagination?: {
./src/components/ui/List.tsx:    page: number;
./src/components/ui/List.tsx:    totalPages: number;
./src/components/ui/List.tsx:    onPageChange: (page: number) => void;
./src/components/ui/List.tsx:  };
./src/components/ui/List.tsx:  gridCols?: {
./src/components/ui/List.tsx:    default: number;
./src/components/ui/List.tsx:    md?: number;
./src/components/ui/List.tsx:    lg?: number;
./src/components/ui/List.tsx:  };
./src/components/ui/List.tsx:  className?: string;
./src/components/ui/List.tsx:}
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:export function List<T>({
./src/components/ui/List.tsx:  items,
./src/components/ui/List.tsx:  renderItem,
./src/components/ui/List.tsx:  keyExtractor,
./src/components/ui/List.tsx:  isLoading = false,
./src/components/ui/List.tsx:  error = null,
./src/components/ui/List.tsx:  emptyMessage = 'No items found.',
./src/components/ui/List.tsx:  loadingItemCount = 3,
./src/components/ui/List.tsx:  renderLoading,
./src/components/ui/List.tsx:  renderError,
./src/components/ui/List.tsx:  pagination,
./src/components/ui/List.tsx:  gridCols = { default: 1 },
./src/components/ui/List.tsx:  className = '',
./src/components/ui/List.tsx:}: ListProps<T>) {
./src/components/ui/List.tsx:  if (error) {
./src/components/ui/List.tsx:    if (renderError) {
./src/components/ui/List.tsx:      return renderError(error);
./src/components/ui/List.tsx:    }
./src/components/ui/List.tsx:    return (
./src/components/ui/List.tsx:      <div className="text-center py-8">
./src/components/ui/List.tsx:        <p className="text-red-500">{error.message}</p>
./src/components/ui/List.tsx:      </div>
./src/components/ui/List.tsx:    );
./src/components/ui/List.tsx:  }
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:  if (isLoading) {
./src/components/ui/List.tsx:    if (renderLoading) {
./src/components/ui/List.tsx:      return renderLoading();
./src/components/ui/List.tsx:    }
./src/components/ui/List.tsx:    return (
./src/components/ui/List.tsx:      <div
./src/components/ui/List.tsx:        className={`grid grid-cols-${gridCols.default} ${
./src/components/ui/List.tsx:          gridCols.md ? `md:grid-cols-${gridCols.md}` : ''
./src/components/ui/List.tsx:        } ${gridCols.lg ? `lg:grid-cols-${gridCols.lg}` : ''} gap-6`}
./src/components/ui/List.tsx:      >
./src/components/ui/List.tsx:        {[...Array(loadingItemCount)].map((_, i) => (
./src/components/ui/List.tsx:          <div key={i} className="animate-pulse">
./src/components/ui/List.tsx:            <div className="bg-gray-200 dark:bg-gray-700 h-48 rounded-lg mb-4"></div>
./src/components/ui/List.tsx:            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
./src/components/ui/List.tsx:            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
./src/components/ui/List.tsx:          </div>
./src/components/ui/List.tsx:        ))}
./src/components/ui/List.tsx:      </div>
./src/components/ui/List.tsx:    );
./src/components/ui/List.tsx:  }
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:  if (items.length === 0) {
./src/components/ui/List.tsx:    return (
./src/components/ui/List.tsx:      <div className="text-center py-8">
./src/components/ui/List.tsx:        <p className="text-gray-500 dark:text-gray-400">{emptyMessage}</p>
./src/components/ui/List.tsx:      </div>
./src/components/ui/List.tsx:    );
./src/components/ui/List.tsx:  }
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:  return (
./src/components/ui/List.tsx:    <div className={`space-y-8 ${className}`}>
./src/components/ui/List.tsx:      <div
./src/components/ui/List.tsx:        className={`grid grid-cols-${gridCols.default} ${
./src/components/ui/List.tsx:          gridCols.md ? `md:grid-cols-${gridCols.md}` : ''
./src/components/ui/List.tsx:        } ${gridCols.lg ? `lg:grid-cols-${gridCols.lg}` : ''} gap-6`}
./src/components/ui/List.tsx:      >
./src/components/ui/List.tsx:        {items.map((item) => (
./src/components/ui/List.tsx:          <div key={keyExtractor(item)}>{renderItem(item)}</div>
./src/components/ui/List.tsx:        ))}
./src/components/ui/List.tsx:      </div>
./src/components/ui/List.tsx:
./src/components/ui/List.tsx:      {pagination && pagination.totalPages > 1 && (
./src/components/ui/List.tsx:        <div className="flex justify-center items-center space-x-4">
./src/components/ui/List.tsx:          <button
./src/components/ui/List.tsx:            onClick={() => pagination.onPageChange(pagination.page - 1)}
./src/components/ui/List.tsx:            disabled={pagination.page === 1}
./src/components/ui/List.tsx:            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
./src/components/ui/List.tsx:          >
./src/components/ui/List.tsx:            <ChevronLeft className="w-5 h-5 text-gray-600 dark:text-gray-300" />
./src/components/ui/List.tsx:          </button>
./src/components/ui/List.tsx:          <span className="text-sm text-gray-600 dark:text-gray-300">
./src/components/ui/List.tsx:            Page {pagination.page} of {pagination.totalPages}
./src/components/ui/List.tsx:          </span>
./src/components/ui/List.tsx:          <button
./src/components/ui/List.tsx:            onClick={() => pagination.onPageChange(pagination.page + 1)}
./src/components/ui/List.tsx:            disabled={pagination.page === pagination.totalPages}
./src/components/ui/List.tsx:            className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
./src/components/ui/List.tsx:          >
./src/components/ui/List.tsx:            <ChevronRight className="w-5 h-5 text-gray-600 dark:text-gray-300" />
./src/components/ui/List.tsx:          </button>
./src/components/ui/List.tsx:        </div>
./src/components/ui/List.tsx:      )}
./src/components/ui/List.tsx:    </div>
./src/components/ui/List.tsx:  );
./src/components/ui/List.tsx:}
./src/components/ui/loading-spinner.tsx:import { cn } from '@/lib/utils';
./src/components/ui/loading-spinner.tsx:
./src/components/ui/loading-spinner.tsx:
./src/components/ui/loading-spinner.tsx:interface LoadingSpinnerProps extends React.HTMLAttributes<HTMLDivElement> {
./src/components/ui/loading-spinner.tsx:  size?: 'sm' | 'md' | 'lg';
./src/components/ui/loading-spinner.tsx:  className?: string;
./src/components/ui/loading-spinner.tsx:}
./src/components/ui/loading-spinner.tsx:
./src/components/ui/loading-spinner.tsx:export function LoadingSpinner({ 
./src/components/ui/loading-spinner.tsx:  size = 'md', 
./src/components/ui/loading-spinner.tsx:  className,
./src/components/ui/loading-spinner.tsx:  role = 'status',
./src/components/ui/loading-spinner.tsx:  ...props 
./src/components/ui/loading-spinner.tsx:}: LoadingSpinnerProps) {
./src/components/ui/loading-spinner.tsx:  const sizeClasses = {
./src/components/ui/loading-spinner.tsx:    sm: 'w-4 h-4',
./src/components/ui/loading-spinner.tsx:    md: 'w-6 h-6',
./src/components/ui/loading-spinner.tsx:    lg: 'w-8 h-8'
./src/components/ui/loading-spinner.tsx:  };
./src/components/ui/loading-spinner.tsx:
./src/components/ui/loading-spinner.tsx:  return (
./src/components/ui/loading-spinner.tsx:    <div
./src/components/ui/loading-spinner.tsx:      role={role}
./src/components/ui/loading-spinner.tsx:      className={cn(
./src/components/ui/loading-spinner.tsx:        'animate-spin rounded-full border-2 border-current border-t-transparent',
./src/components/ui/loading-spinner.tsx:        sizeClasses[size] || sizeClasses.md,
./src/components/ui/loading-spinner.tsx:        className
./src/components/ui/loading-spinner.tsx:      )}
./src/components/ui/loading-spinner.tsx:      {...props}
./src/components/ui/loading-spinner.tsx:    />
./src/components/ui/loading-spinner.tsx:  );
./src/components/ui/loading-spinner.tsx:}
./src/components/ui/select.tsx:'use client'
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:import * as React from 'react';
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:import * as SelectPrimitive from '@radix-ui/react-select';
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:import { Check, ChevronDown } from 'lucide-react';
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:import { cn } from '@/lib/utils';
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const Select = SelectPrimitive.Root;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectTrigger = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Trigger>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
./src/components/ui/select.tsx:>(({ className, children, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Trigger
./src/components/ui/select.tsx:    ref={ref}
./src/components/ui/select.tsx:    className={cn(
./src/components/ui/select.tsx:      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
./src/components/ui/select.tsx:      className
./src/components/ui/select.tsx:    )}
./src/components/ui/select.tsx:    {...props}
./src/components/ui/select.tsx:  >
./src/components/ui/select.tsx:    {children}
./src/components/ui/select.tsx:    <SelectPrimitive.Icon asChild>
./src/components/ui/select.tsx:      <ChevronDown className="h-4 w-4 opacity-50" />
./src/components/ui/select.tsx:    </SelectPrimitive.Icon>
./src/components/ui/select.tsx:  </SelectPrimitive.Trigger>
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectValue = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Value>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Value>
./src/components/ui/select.tsx:>(({ className, children, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Value ref={ref} className={cn('text-sm', className)} {...props}>
./src/components/ui/select.tsx:    {children}
./src/components/ui/select.tsx:  </SelectPrimitive.Value>
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectValue.displayName = SelectPrimitive.Value.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectContent = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Content>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
./src/components/ui/select.tsx:>(({ className, children, position = 'popper', ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Portal>
./src/components/ui/select.tsx:    <SelectPrimitive.Content
./src/components/ui/select.tsx:      ref={ref}
./src/components/ui/select.tsx:      className={cn(
./src/components/ui/select.tsx:        'relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
./src/components/ui/select.tsx:        position === 'popper' &&
./src/components/ui/select.tsx:          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
./src/components/ui/select.tsx:        className
./src/components/ui/select.tsx:      )}
./src/components/ui/select.tsx:      position={position}
./src/components/ui/select.tsx:      {...props}
./src/components/ui/select.tsx:    >
./src/components/ui/select.tsx:      <SelectPrimitive.Viewport
./src/components/ui/select.tsx:        className={cn(
./src/components/ui/select.tsx:          'p-1',
./src/components/ui/select.tsx:          position === 'popper' &&
./src/components/ui/select.tsx:            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
./src/components/ui/select.tsx:        )}
./src/components/ui/select.tsx:      >
./src/components/ui/select.tsx:        {children}
./src/components/ui/select.tsx:      </SelectPrimitive.Viewport>
./src/components/ui/select.tsx:    </SelectPrimitive.Content>
./src/components/ui/select.tsx:  </SelectPrimitive.Portal>
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectContent.displayName = SelectPrimitive.Content.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectLabel = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Label>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
./src/components/ui/select.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Label
./src/components/ui/select.tsx:    ref={ref}
./src/components/ui/select.tsx:    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}
./src/components/ui/select.tsx:    {...props}
./src/components/ui/select.tsx:  />
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectLabel.displayName = SelectPrimitive.Label.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectItem = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Item>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
./src/components/ui/select.tsx:>(({ className, children, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Item
./src/components/ui/select.tsx:    ref={ref}
./src/components/ui/select.tsx:    className={cn(
./src/components/ui/select.tsx:      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
./src/components/ui/select.tsx:      className
./src/components/ui/select.tsx:    )}
./src/components/ui/select.tsx:    {...props}
./src/components/ui/select.tsx:  >
./src/components/ui/select.tsx:    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
./src/components/ui/select.tsx:      <SelectPrimitive.ItemIndicator>
./src/components/ui/select.tsx:        <Check className="h-4 w-4" />
./src/components/ui/select.tsx:      </SelectPrimitive.ItemIndicator>
./src/components/ui/select.tsx:    </span>
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
./src/components/ui/select.tsx:  </SelectPrimitive.Item>
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectItem.displayName = SelectPrimitive.Item.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectGroup = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Group>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Group>
./src/components/ui/select.tsx:>(({ className, children, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Group
./src/components/ui/select.tsx:    ref={ref}
./src/components/ui/select.tsx:    className={cn('', className)}
./src/components/ui/select.tsx:    {...props}
./src/components/ui/select.tsx:  >
./src/components/ui/select.tsx:    {children}
./src/components/ui/select.tsx:  </SelectPrimitive.Group>
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectGroup.displayName = SelectPrimitive.Group.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:const SelectSeparator = React.forwardRef<
./src/components/ui/select.tsx:  React.ElementRef<typeof SelectPrimitive.Separator>,
./src/components/ui/select.tsx:  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
./src/components/ui/select.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/select.tsx:  <SelectPrimitive.Separator
./src/components/ui/select.tsx:    ref={ref}
./src/components/ui/select.tsx:    className={cn('-mx-1 my-1 h-px bg-muted', className)}
./src/components/ui/select.tsx:    {...props}
./src/components/ui/select.tsx:  />
./src/components/ui/select.tsx:));
./src/components/ui/select.tsx:SelectSeparator.displayName = SelectPrimitive.Separator.displayName;
./src/components/ui/select.tsx:
./src/components/ui/select.tsx:export {
./src/components/ui/select.tsx:  Select,
./src/components/ui/select.tsx:  SelectTrigger,
./src/components/ui/select.tsx:  SelectValue,
./src/components/ui/select.tsx:  SelectContent,
./src/components/ui/select.tsx:  SelectLabel,
./src/components/ui/select.tsx:  SelectItem,
./src/components/ui/select.tsx:  SelectSeparator,
./src/components/ui/select.tsx:  SelectGroup,
./src/components/ui/select.tsx:};
./src/components/ui/skeleton.tsx:import { cn } from "@/lib/utils"
./src/components/ui/skeleton.tsx:
./src/components/ui/skeleton.tsx:function Skeleton({
./src/components/ui/skeleton.tsx:  className,
./src/components/ui/skeleton.tsx:  ...props
./src/components/ui/skeleton.tsx:}: React.HTMLAttributes<HTMLDivElement>) {
./src/components/ui/skeleton.tsx:  return (
./src/components/ui/skeleton.tsx:    <div
./src/components/ui/skeleton.tsx:      className={cn("animate-pulse rounded-md bg-muted", className)}
./src/components/ui/skeleton.tsx:      {...props}
./src/components/ui/skeleton.tsx:    />
./src/components/ui/skeleton.tsx:  )
./src/components/ui/skeleton.tsx:}
./src/components/ui/skeleton.tsx:
./src/components/ui/skeleton.tsx:export { Skeleton } 
./src/components/ui/slider.tsx:'use client'
./src/components/ui/slider.tsx:
./src/components/ui/slider.tsx:import * as React from 'react'
./src/components/ui/slider.tsx:import * as SliderPrimitive from '@radix-ui/react-slider'
./src/components/ui/slider.tsx:
./src/components/ui/slider.tsx:import { cn } from '@/lib/utils'
./src/components/ui/slider.tsx:
./src/components/ui/slider.tsx:const Slider = React.forwardRef<
./src/components/ui/slider.tsx:  React.ElementRef<typeof SliderPrimitive.Root>,
./src/components/ui/slider.tsx:  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
./src/components/ui/slider.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/slider.tsx:  <SliderPrimitive.Root
./src/components/ui/slider.tsx:    ref={ref}
./src/components/ui/slider.tsx:    className={cn(
./src/components/ui/slider.tsx:      'relative flex w-full touch-none select-none items-center',
./src/components/ui/slider.tsx:      className
./src/components/ui/slider.tsx:    )}
./src/components/ui/slider.tsx:    {...props}
./src/components/ui/slider.tsx:  >
./src/components/ui/slider.tsx:    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-gray-100 dark:bg-gray-800">
./src/components/ui/slider.tsx:      <SliderPrimitive.Range className="absolute h-full bg-blue-600 dark:bg-blue-500" />
./src/components/ui/slider.tsx:    </SliderPrimitive.Track>
./src/components/ui/slider.tsx:    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-blue-600 bg-white ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-blue-500 dark:bg-gray-950 dark:ring-offset-gray-950 dark:focus-visible:ring-blue-800" />
./src/components/ui/slider.tsx:    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-blue-600 bg-white ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:border-blue-500 dark:bg-gray-950 dark:ring-offset-gray-950 dark:focus-visible:ring-blue-800" />
./src/components/ui/slider.tsx:  </SliderPrimitive.Root>
./src/components/ui/slider.tsx:))
./src/components/ui/slider.tsx:Slider.displayName = SliderPrimitive.Root.displayName
./src/components/ui/slider.tsx:
./src/components/ui/slider.tsx:export { Slider } 
./src/components/ui/StarRating.tsx: 
./src/components/ui/textarea.tsx:import * as React from 'react';
./src/components/ui/textarea.tsx:
./src/components/ui/textarea.tsx:import { cn } from '@/lib/utils';
./src/components/ui/textarea.tsx:
./src/components/ui/textarea.tsx:
./src/components/ui/textarea.tsx:export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
./src/components/ui/textarea.tsx:  error?: string;
./src/components/ui/textarea.tsx:}
./src/components/ui/textarea.tsx:
./src/components/ui/textarea.tsx:const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
./src/components/ui/textarea.tsx:  ({ className, error, ...props }, ref) => {
./src/components/ui/textarea.tsx:    return (
./src/components/ui/textarea.tsx:      <div className="space-y-1">
./src/components/ui/textarea.tsx:        <textarea
./src/components/ui/textarea.tsx:          className={cn(
./src/components/ui/textarea.tsx:            'flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
./src/components/ui/textarea.tsx:            error && 'border-red-500',
./src/components/ui/textarea.tsx:            className
./src/components/ui/textarea.tsx:          )}
./src/components/ui/textarea.tsx:          ref={ref}
./src/components/ui/textarea.tsx:          {...props}
./src/components/ui/textarea.tsx:        />
./src/components/ui/textarea.tsx:        {error && <p className="text-sm text-red-500">{error}</p>}
./src/components/ui/textarea.tsx:      </div>
./src/components/ui/textarea.tsx:    );
./src/components/ui/textarea.tsx:  }
./src/components/ui/textarea.tsx:);
./src/components/ui/textarea.tsx:Textarea.displayName = 'Textarea';
./src/components/ui/textarea.tsx:
./src/components/ui/textarea.tsx:export { Textarea };
./src/components/ui/toast.tsx:'use client'
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:import * as React from 'react'
./src/components/ui/toast.tsx:import * as ToastPrimitives from '@radix-ui/react-toast'
./src/components/ui/toast.tsx:import { cva, type VariantProps } from 'class-variance-authority'
./src/components/ui/toast.tsx:import { X } from 'lucide-react'
./src/components/ui/toast.tsx:import { cn } from '@/lib/utils'
./src/components/ui/toast.tsx:import { toast } from 'sonner'
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const ToastProvider = ToastPrimitives.Provider
./src/components/ui/toast.tsx:const ToastViewport = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Viewport>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
./src/components/ui/toast.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/toast.tsx:  <ToastPrimitives.Viewport
./src/components/ui/toast.tsx:    ref={ref}
./src/components/ui/toast.tsx:    className={cn(
./src/components/ui/toast.tsx:      'fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]',
./src/components/ui/toast.tsx:      className
./src/components/ui/toast.tsx:    )}
./src/components/ui/toast.tsx:    {...props}
./src/components/ui/toast.tsx:  />
./src/components/ui/toast.tsx:))
./src/components/ui/toast.tsx:ToastViewport.displayName = ToastPrimitives.Viewport.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const toastVariants = cva(
./src/components/ui/toast.tsx:  'group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full',
./src/components/ui/toast.tsx:  {
./src/components/ui/toast.tsx:    variants: {
./src/components/ui/toast.tsx:      variant: {
./src/components/ui/toast.tsx:        default: 'border bg-background text-foreground',
./src/components/ui/toast.tsx:        destructive:
./src/components/ui/toast.tsx:          'destructive group border-destructive bg-destructive text-destructive-foreground',
./src/components/ui/toast.tsx:      },
./src/components/ui/toast.tsx:    },
./src/components/ui/toast.tsx:    defaultVariants: {
./src/components/ui/toast.tsx:      variant: 'default',
./src/components/ui/toast.tsx:    },
./src/components/ui/toast.tsx:  }
./src/components/ui/toast.tsx:)
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const Toast = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Root>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
./src/components/ui/toast.tsx:    VariantProps<typeof toastVariants>
./src/components/ui/toast.tsx:>(({ className, variant, ...props }, ref) => {
./src/components/ui/toast.tsx:  return (
./src/components/ui/toast.tsx:    <ToastPrimitives.Root
./src/components/ui/toast.tsx:      ref={ref}
./src/components/ui/toast.tsx:      className={cn(toastVariants({ variant }), className)}
./src/components/ui/toast.tsx:      {...props}
./src/components/ui/toast.tsx:    />
./src/components/ui/toast.tsx:  )
./src/components/ui/toast.tsx:})
./src/components/ui/toast.tsx:Toast.displayName = ToastPrimitives.Root.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const ToastAction = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Action>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
./src/components/ui/toast.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/toast.tsx:  <ToastPrimitives.Action
./src/components/ui/toast.tsx:    ref={ref}
./src/components/ui/toast.tsx:    className={cn(
./src/components/ui/toast.tsx:      'inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive',
./src/components/ui/toast.tsx:      className
./src/components/ui/toast.tsx:    )}
./src/components/ui/toast.tsx:    {...props}
./src/components/ui/toast.tsx:  />
./src/components/ui/toast.tsx:))
./src/components/ui/toast.tsx:ToastAction.displayName = ToastPrimitives.Action.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const ToastClose = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Close>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
./src/components/ui/toast.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/toast.tsx:  <ToastPrimitives.Close
./src/components/ui/toast.tsx:    ref={ref}
./src/components/ui/toast.tsx:    className={cn(
./src/components/ui/toast.tsx:      'absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600',
./src/components/ui/toast.tsx:      className
./src/components/ui/toast.tsx:    )}
./src/components/ui/toast.tsx:    toast-close=""
./src/components/ui/toast.tsx:    {...props}
./src/components/ui/toast.tsx:  >
./src/components/ui/toast.tsx:    <X className="h-4 w-4" />
./src/components/ui/toast.tsx:  </ToastPrimitives.Close>
./src/components/ui/toast.tsx:))
./src/components/ui/toast.tsx:ToastClose.displayName = ToastPrimitives.Close.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const ToastTitle = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Title>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
./src/components/ui/toast.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/toast.tsx:  <ToastPrimitives.Title
./src/components/ui/toast.tsx:    ref={ref}
./src/components/ui/toast.tsx:    className={cn('text-sm font-semibold', className)}
./src/components/ui/toast.tsx:    {...props}
./src/components/ui/toast.tsx:  />
./src/components/ui/toast.tsx:))
./src/components/ui/toast.tsx:ToastTitle.displayName = ToastPrimitives.Title.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:const ToastDescription = React.forwardRef<
./src/components/ui/toast.tsx:  React.ElementRef<typeof ToastPrimitives.Description>,
./src/components/ui/toast.tsx:  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
./src/components/ui/toast.tsx:>(({ className, ...props }, ref) => (
./src/components/ui/toast.tsx:  <ToastPrimitives.Description
./src/components/ui/toast.tsx:    ref={ref}
./src/components/ui/toast.tsx:    className={cn('text-sm opacity-90', className)}
./src/components/ui/toast.tsx:    {...props}
./src/components/ui/toast.tsx:  />
./src/components/ui/toast.tsx:))
./src/components/ui/toast.tsx:ToastDescription.displayName = ToastPrimitives.Description.displayName
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>
./src/components/ui/toast.tsx:type ToastActionElement = React.ReactElement<typeof ToastAction>
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:export const useToast = () => {
./src/components/ui/toast.tsx:  return {
./src/components/ui/toast.tsx:    toast: (message: string, type: 'success' | 'error' = 'success') => {
./src/components/ui/toast.tsx:      if (type === 'success') {
./src/components/ui/toast.tsx:        toast.success(message)
./src/components/ui/toast.tsx:      } else {
./src/components/ui/toast.tsx:        toast.error(message)
./src/components/ui/toast.tsx:      }
./src/components/ui/toast.tsx:    }
./src/components/ui/toast.tsx:  }
./src/components/ui/toast.tsx:}
./src/components/ui/toast.tsx:
./src/components/ui/toast.tsx:export {
./src/components/ui/toast.tsx:  type ToastProps,
./src/components/ui/toast.tsx:  type ToastActionElement,
./src/components/ui/toast.tsx:  ToastProvider,
./src/components/ui/toast.tsx:  ToastViewport,
./src/components/ui/toast.tsx:  Toast,
./src/components/ui/toast.tsx:  ToastTitle,
./src/components/ui/toast.tsx:  ToastDescription,
./src/components/ui/toast.tsx:  ToastClose,
./src/components/ui/toast.tsx:  ToastAction,
./src/components/ui/toast.tsx:}
./src/components/ui/toaster.tsx:'use client'
./src/components/ui/toaster.tsx:
./src/components/ui/toaster.tsx:import {
./src/components/ui/toaster.tsx:  Toast,
./src/components/ui/toaster.tsx:  ToastClose,
./src/components/ui/toaster.tsx:  ToastDescription,
./src/components/ui/toaster.tsx:  ToastProvider,
./src/components/ui/toaster.tsx:  ToastTitle,
./src/components/ui/toaster.tsx:  ToastViewport,
./src/components/ui/toaster.tsx:} from "./toast"
./src/components/ui/toaster.tsx:import { useToast } from "./use-toast"
./src/components/ui/toaster.tsx:import type { ToasterToast } from "./use-toast"
./src/components/ui/toaster.tsx:
./src/components/ui/toaster.tsx:interface ToasterProps {
./src/components/ui/toaster.tsx:  position?: "top-right" | "bottom-right" | "top-left" | "bottom-left";
./src/components/ui/toaster.tsx:  duration?: number;
./src/components/ui/toaster.tsx:}
./src/components/ui/toaster.tsx:
./src/components/ui/toaster.tsx:export function Toaster({ position = "top-right", duration = 3000 }: ToasterProps) {
./src/components/ui/toaster.tsx:  const { toasts } = useToast()
./src/components/ui/toaster.tsx:
./src/components/ui/toaster.tsx:  return (
./src/components/ui/toaster.tsx:    <ToastProvider>
./src/components/ui/toaster.tsx:      <ToastViewport />
./src/components/ui/toaster.tsx:      {toasts.map(({ id, title, description, action, ...props }) => (
./src/components/ui/toaster.tsx:        <Toast key={id} duration={duration} {...props}>
./src/components/ui/toaster.tsx:          <div className="grid gap-1">
./src/components/ui/toaster.tsx:            {title && <ToastTitle>{title}</ToastTitle>}
./src/components/ui/toaster.tsx:            {description && <ToastDescription>{description}</ToastDescription>}
./src/components/ui/toaster.tsx:          </div>
./src/components/ui/toaster.tsx:          {action}
./src/components/ui/toaster.tsx:          <ToastClose />
./src/components/ui/toaster.tsx:        </Toast>
./src/components/ui/toaster.tsx:      ))}
./src/components/ui/toaster.tsx:    </ToastProvider>
./src/components/ui/toaster.tsx:  )
./src/components/ui/toaster.tsx:} 
./src/components/ui/use-toast.ts:import * as React from "react"
./src/components/ui/use-toast.ts:import { ToastActionElement, type ToastProps } from "./toast"
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:const TOAST_LIMIT = 3
./src/components/ui/use-toast.ts:const TOAST_REMOVE_DELAY = 3000
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:export type ToasterToast = ToastProps & {
./src/components/ui/use-toast.ts:  id: string
./src/components/ui/use-toast.ts:  title?: React.ReactNode
./src/components/ui/use-toast.ts:  description?: React.ReactNode
./src/components/ui/use-toast.ts:  action?: ToastActionElement
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:const actionTypes = {
./src/components/ui/use-toast.ts:  ADD_TOAST: "ADD_TOAST",
./src/components/ui/use-toast.ts:  UPDATE_TOAST: "UPDATE_TOAST",
./src/components/ui/use-toast.ts:  DISMISS_TOAST: "DISMISS_TOAST",
./src/components/ui/use-toast.ts:  REMOVE_TOAST: "REMOVE_TOAST",
./src/components/ui/use-toast.ts:} as const
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:let count = 0
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:function genId() {
./src/components/ui/use-toast.ts:  count = (count + 1) % Number.MAX_VALUE
./src/components/ui/use-toast.ts:  return count.toString()
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:type ActionType = typeof actionTypes
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:type Action =
./src/components/ui/use-toast.ts:  | {
./src/components/ui/use-toast.ts:      type: ActionType["ADD_TOAST"]
./src/components/ui/use-toast.ts:      toast: ToasterToast
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:  | {
./src/components/ui/use-toast.ts:      type: ActionType["UPDATE_TOAST"]
./src/components/ui/use-toast.ts:      toast: Partial<ToasterToast>
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:  | {
./src/components/ui/use-toast.ts:      type: ActionType["DISMISS_TOAST"]
./src/components/ui/use-toast.ts:      toastId?: ToasterToast["id"]
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:  | {
./src/components/ui/use-toast.ts:      type: ActionType["REMOVE_TOAST"]
./src/components/ui/use-toast.ts:      toastId?: ToasterToast["id"]
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:interface State {
./src/components/ui/use-toast.ts:  toasts: ToasterToast[]
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:const addToRemoveQueue = (toastId: string) => {
./src/components/ui/use-toast.ts:  if (toastTimeouts.has(toastId)) {
./src/components/ui/use-toast.ts:    return
./src/components/ui/use-toast.ts:  }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  const timeout = setTimeout(() => {
./src/components/ui/use-toast.ts:    toastTimeouts.delete(toastId)
./src/components/ui/use-toast.ts:    dispatch({
./src/components/ui/use-toast.ts:      type: "REMOVE_TOAST",
./src/components/ui/use-toast.ts:      toastId: toastId,
./src/components/ui/use-toast.ts:    })
./src/components/ui/use-toast.ts:  }, TOAST_REMOVE_DELAY)
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  toastTimeouts.set(toastId, timeout)
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:export const reducer = (state: State, action: Action): State => {
./src/components/ui/use-toast.ts:  switch (action.type) {
./src/components/ui/use-toast.ts:    case "ADD_TOAST":
./src/components/ui/use-toast.ts:      return {
./src/components/ui/use-toast.ts:        ...state,
./src/components/ui/use-toast.ts:        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:    case "UPDATE_TOAST":
./src/components/ui/use-toast.ts:      return {
./src/components/ui/use-toast.ts:        ...state,
./src/components/ui/use-toast.ts:        toasts: state.toasts.map((t) =>
./src/components/ui/use-toast.ts:          t.id === action.toast.id ? { ...t, ...action.toast } : t
./src/components/ui/use-toast.ts:        ),
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:    case "DISMISS_TOAST": {
./src/components/ui/use-toast.ts:      const { toastId } = action
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:      if (toastId) {
./src/components/ui/use-toast.ts:        addToRemoveQueue(toastId)
./src/components/ui/use-toast.ts:      } else {
./src/components/ui/use-toast.ts:        state.toasts.forEach((toast) => {
./src/components/ui/use-toast.ts:          addToRemoveQueue(toast.id)
./src/components/ui/use-toast.ts:        })
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:      return {
./src/components/ui/use-toast.ts:        ...state,
./src/components/ui/use-toast.ts:        toasts: state.toasts.map((t) =>
./src/components/ui/use-toast.ts:          t.id === toastId || toastId === undefined
./src/components/ui/use-toast.ts:            ? {
./src/components/ui/use-toast.ts:                ...t,
./src/components/ui/use-toast.ts:                open: false,
./src/components/ui/use-toast.ts:              }
./src/components/ui/use-toast.ts:            : t
./src/components/ui/use-toast.ts:        ),
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:    case "REMOVE_TOAST":
./src/components/ui/use-toast.ts:      if (action.toastId === undefined) {
./src/components/ui/use-toast.ts:        return {
./src/components/ui/use-toast.ts:          ...state,
./src/components/ui/use-toast.ts:          toasts: [],
./src/components/ui/use-toast.ts:        }
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:      return {
./src/components/ui/use-toast.ts:        ...state,
./src/components/ui/use-toast.ts:        toasts: state.toasts.filter((t) => t.id !== action.toastId),
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:  }
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:const listeners: Array<(state: State) => void> = []
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:let memoryState: State = { toasts: [] }
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:function dispatch(action: Action) {
./src/components/ui/use-toast.ts:  memoryState = reducer(memoryState, action)
./src/components/ui/use-toast.ts:  listeners.forEach((listener) => {
./src/components/ui/use-toast.ts:    listener(memoryState)
./src/components/ui/use-toast.ts:  })
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:interface Toast extends Omit<ToasterToast, "id"> {}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:function toast({ ...props }: Toast) {
./src/components/ui/use-toast.ts:  const id = genId()
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  const update = (props: ToasterToast) =>
./src/components/ui/use-toast.ts:    dispatch({
./src/components/ui/use-toast.ts:      type: "UPDATE_TOAST",
./src/components/ui/use-toast.ts:      toast: { ...props, id },
./src/components/ui/use-toast.ts:    })
./src/components/ui/use-toast.ts:  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  dispatch({
./src/components/ui/use-toast.ts:    type: "ADD_TOAST",
./src/components/ui/use-toast.ts:    toast: {
./src/components/ui/use-toast.ts:      ...props,
./src/components/ui/use-toast.ts:      id,
./src/components/ui/use-toast.ts:      open: true,
./src/components/ui/use-toast.ts:      onOpenChange: (open) => {
./src/components/ui/use-toast.ts:        if (!open) dismiss()
./src/components/ui/use-toast.ts:      },
./src/components/ui/use-toast.ts:    },
./src/components/ui/use-toast.ts:  })
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  return {
./src/components/ui/use-toast.ts:    id: id,
./src/components/ui/use-toast.ts:    dismiss,
./src/components/ui/use-toast.ts:    update,
./src/components/ui/use-toast.ts:  }
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:type ToasterToastState = {
./src/components/ui/use-toast.ts:  toasts: ToasterToast[]
./src/components/ui/use-toast.ts:  dismiss: (toastId?: string) => void
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:function useToast(): { toast: typeof toast } & ToasterToastState {
./src/components/ui/use-toast.ts:  const [state, setState] = React.useState<State>(memoryState)
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  React.useEffect(() => {
./src/components/ui/use-toast.ts:    listeners.push(setState)
./src/components/ui/use-toast.ts:    return () => {
./src/components/ui/use-toast.ts:      const index = listeners.indexOf(setState)
./src/components/ui/use-toast.ts:      if (index > -1) {
./src/components/ui/use-toast.ts:        listeners.splice(index, 1)
./src/components/ui/use-toast.ts:      }
./src/components/ui/use-toast.ts:    }
./src/components/ui/use-toast.ts:  }, [state])
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:  return {
./src/components/ui/use-toast.ts:    toast,
./src/components/ui/use-toast.ts:    ...state,
./src/components/ui/use-toast.ts:    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
./src/components/ui/use-toast.ts:  }
./src/components/ui/use-toast.ts:}
./src/components/ui/use-toast.ts:
./src/components/ui/use-toast.ts:export { useToast, toast } 
./src/constants.ts:/**
./src/constants.ts: * EMPLOYMENT_STATUSES
./src/constants.ts: * A list of common employment statuses used in employee reviews.
./src/constants.ts: */
./src/constants.ts:export const EMPLOYMENT_STATUSES = [
./src/constants.ts:  "Full-time",
./src/constants.ts:  "Part-time",
./src/constants.ts:  "Contract",
./src/constants.ts:  "Internship",
./src/constants.ts:  "Freelance",
./src/constants.ts:  "Other",
./src/constants.ts:]; 
./src/contexts/AuthContext.tsx:'use client'
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:import * as React from 'react';
./src/contexts/AuthContext.tsx:import { createContext, useContext, useEffect, useState, type FC, type ReactNode } from 'react';
./src/contexts/AuthContext.tsx:import { User, Session, AuthChangeEvent } from '@supabase/supabase-js';
./src/contexts/AuthContext.tsx:import { supabase } from '@/lib/supabaseClient';
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:interface AuthContextType {
./src/contexts/AuthContext.tsx:  user: User | null;
./src/contexts/AuthContext.tsx:  session: Session | null;
./src/contexts/AuthContext.tsx:  isLoading: boolean;
./src/contexts/AuthContext.tsx:  error: string | null;
./src/contexts/AuthContext.tsx:  isAdmin: boolean;
./src/contexts/AuthContext.tsx:  signIn: (email: string, password: string) => Promise<void>;
./src/contexts/AuthContext.tsx:  signInWithGoogle: () => Promise<void>;
./src/contexts/AuthContext.tsx:  signUp: (email: string, password: string) => Promise<{ 
./src/contexts/AuthContext.tsx:    error?: Error; 
./src/contexts/AuthContext.tsx:    data?: { 
./src/contexts/AuthContext.tsx:      user: User | null; 
./src/contexts/AuthContext.tsx:      session: Session | null; 
./src/contexts/AuthContext.tsx:    }; 
./src/contexts/AuthContext.tsx:  }>;
./src/contexts/AuthContext.tsx:  signOut: () => Promise<void>;
./src/contexts/AuthContext.tsx:}
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:const AuthContext = createContext<AuthContextType | undefined>(undefined);
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:export const AuthProvider: FC<{ children: ReactNode }> = ({ children }) => {
./src/contexts/AuthContext.tsx:  const [session, setSession] = useState<Session | null>(null);
./src/contexts/AuthContext.tsx:  const [user, setUser] = useState<User | null>(null);
./src/contexts/AuthContext.tsx:  const [isLoading, setIsLoading] = useState(true);
./src/contexts/AuthContext.tsx:  const [error, setError] = useState<string | null>(null);
./src/contexts/AuthContext.tsx:  const [isAdmin, setIsAdmin] = useState(false);
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  useEffect(() => {
./src/contexts/AuthContext.tsx:    // Check active session
./src/contexts/AuthContext.tsx:    supabase.auth.getSession().then(({ data: { session } }: { data: { session: Session | null } }) => {
./src/contexts/AuthContext.tsx:      setSession(session);
./src/contexts/AuthContext.tsx:      setUser(session?.user ?? null);
./src/contexts/AuthContext.tsx:      setIsLoading(false);
./src/contexts/AuthContext.tsx:    });
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:    // Listen for changes
./src/contexts/AuthContext.tsx:    const {
./src/contexts/AuthContext.tsx:      data: { subscription },
./src/contexts/AuthContext.tsx:    } = supabase.auth.onAuthStateChange((_event: AuthChangeEvent, session: Session | null) => {
./src/contexts/AuthContext.tsx:      setSession(session);
./src/contexts/AuthContext.tsx:      setUser(session?.user ?? null);
./src/contexts/AuthContext.tsx:      setIsLoading(false);
./src/contexts/AuthContext.tsx:    });
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:    return () => subscription.unsubscribe();
./src/contexts/AuthContext.tsx:  }, []);
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  useEffect(() => {
./src/contexts/AuthContext.tsx:    const checkAdminStatus = async () => {
./src/contexts/AuthContext.tsx:      try {
./src/contexts/AuthContext.tsx:        const { data: { user } } = await supabase.auth.getUser();
./src/contexts/AuthContext.tsx:        if (user) {
./src/contexts/AuthContext.tsx:          // Check if user is in admins table or has admin role
./src/contexts/AuthContext.tsx:          const { data: adminData } = await supabase
./src/contexts/AuthContext.tsx:            .from('admins')
./src/contexts/AuthContext.tsx:            .select('*')
./src/contexts/AuthContext.tsx:            .eq('user_id', user.id)
./src/contexts/AuthContext.tsx:            .single();
./src/contexts/AuthContext.tsx:          
./src/contexts/AuthContext.tsx:          setIsAdmin(!!adminData);
./src/contexts/AuthContext.tsx:        }
./src/contexts/AuthContext.tsx:      } catch (error) {
./src/contexts/AuthContext.tsx:        console.error('Error checking admin status:', error);
./src/contexts/AuthContext.tsx:      }
./src/contexts/AuthContext.tsx:    };
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:    checkAdminStatus();
./src/contexts/AuthContext.tsx:  }, []);
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  const signIn = async (email: string, password: string) => {
./src/contexts/AuthContext.tsx:    try {
./src/contexts/AuthContext.tsx:      const { error } = await supabase.auth.signInWithPassword({
./src/contexts/AuthContext.tsx:        email,
./src/contexts/AuthContext.tsx:        password,
./src/contexts/AuthContext.tsx:      });
./src/contexts/AuthContext.tsx:      if (error) throw error;
./src/contexts/AuthContext.tsx:    } catch (error) {
./src/contexts/AuthContext.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during sign in');
./src/contexts/AuthContext.tsx:    }
./src/contexts/AuthContext.tsx:  };
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  const signInWithGoogle = async () => {
./src/contexts/AuthContext.tsx:    try {
./src/contexts/AuthContext.tsx:      const { error } = await supabase.auth.signInWithOAuth({
./src/contexts/AuthContext.tsx:        provider: 'google',
./src/contexts/AuthContext.tsx:        options: {
./src/contexts/AuthContext.tsx:          redirectTo: `${window.location.origin}/auth/callback`
./src/contexts/AuthContext.tsx:        }
./src/contexts/AuthContext.tsx:      });
./src/contexts/AuthContext.tsx:      if (error) throw error;
./src/contexts/AuthContext.tsx:    } catch (error) {
./src/contexts/AuthContext.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during Google sign in');
./src/contexts/AuthContext.tsx:    }
./src/contexts/AuthContext.tsx:  };
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  const signUp = async (email: string, password: string) => {
./src/contexts/AuthContext.tsx:    try {
./src/contexts/AuthContext.tsx:      const { data, error } = await supabase.auth.signUp({
./src/contexts/AuthContext.tsx:        email,
./src/contexts/AuthContext.tsx:        password,
./src/contexts/AuthContext.tsx:      });
./src/contexts/AuthContext.tsx:      if (error) throw error;
./src/contexts/AuthContext.tsx:      return { data };
./src/contexts/AuthContext.tsx:    } catch (error) {
./src/contexts/AuthContext.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during sign up');
./src/contexts/AuthContext.tsx:      return { error: error instanceof Error ? error : new Error('An error occurred during sign up') };
./src/contexts/AuthContext.tsx:    }
./src/contexts/AuthContext.tsx:  };
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  const signOut = async () => {
./src/contexts/AuthContext.tsx:    try {
./src/contexts/AuthContext.tsx:      const { error } = await supabase.auth.signOut();
./src/contexts/AuthContext.tsx:      if (error) throw error;
./src/contexts/AuthContext.tsx:    } catch (error) {
./src/contexts/AuthContext.tsx:      setError(error instanceof Error ? error.message : 'An error occurred during sign out');
./src/contexts/AuthContext.tsx:    }
./src/contexts/AuthContext.tsx:  };
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:  return (
./src/contexts/AuthContext.tsx:    <AuthContext.Provider
./src/contexts/AuthContext.tsx:      value={{
./src/contexts/AuthContext.tsx:        user,
./src/contexts/AuthContext.tsx:        session,
./src/contexts/AuthContext.tsx:        isLoading,
./src/contexts/AuthContext.tsx:        error,
./src/contexts/AuthContext.tsx:        isAdmin,
./src/contexts/AuthContext.tsx:        signIn,
./src/contexts/AuthContext.tsx:        signInWithGoogle,
./src/contexts/AuthContext.tsx:        signUp,
./src/contexts/AuthContext.tsx:        signOut,
./src/contexts/AuthContext.tsx:      }}
./src/contexts/AuthContext.tsx:    >
./src/contexts/AuthContext.tsx:      {children}
./src/contexts/AuthContext.tsx:    </AuthContext.Provider>
./src/contexts/AuthContext.tsx:  );
./src/contexts/AuthContext.tsx:};
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:export const useAuth = () => {
./src/contexts/AuthContext.tsx:  const context = useContext(AuthContext);
./src/contexts/AuthContext.tsx:  if (context === undefined) {
./src/contexts/AuthContext.tsx:    throw new Error('useAuth must be used within an AuthProvider');
./src/contexts/AuthContext.tsx:  }
./src/contexts/AuthContext.tsx:  return context;
./src/contexts/AuthContext.tsx:};
./src/contexts/AuthContext.tsx:
./src/contexts/AuthContext.tsx:export default AuthContext;
./src/db/migrations/company_news.sql:-- Create company_news table optimized for Marketaux
./src/db/migrations/company_news.sql:CREATE TABLE IF NOT EXISTS company_news (
./src/db/migrations/company_news.sql:    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
./src/db/migrations/company_news.sql:    company_name TEXT NOT NULL,
./src/db/migrations/company_news.sql:    title TEXT NOT NULL,
./src/db/migrations/company_news.sql:    description TEXT,
./src/db/migrations/company_news.sql:    url TEXT,
./src/db/migrations/company_news.sql:    published_at TIMESTAMP WITH TIME ZONE,
./src/db/migrations/company_news.sql:    source TEXT,
./src/db/migrations/company_news.sql:    relevance_score FLOAT,
./src/db/migrations/company_news.sql:    cached_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
./src/db/migrations/company_news.sql:    
./src/db/migrations/company_news.sql:    -- Create a unique constraint to prevent duplicates
./src/db/migrations/company_news.sql:    UNIQUE(company_name, url)
./src/db/migrations/company_news.sql:);
./src/db/migrations/company_news.sql:
./src/db/migrations/company_news.sql:-- Create indexes for faster lookups
./src/db/migrations/company_news.sql:CREATE INDEX IF NOT EXISTS idx_company_news_company_name ON company_news(company_name);
./src/db/migrations/company_news.sql:CREATE INDEX IF NOT EXISTS idx_company_news_relevance ON company_news(relevance_score DESC);
./src/db/migrations/company_news.sql:CREATE INDEX IF NOT EXISTS idx_company_news_published_at ON company_news(published_at DESC); 
./src/env.mjs:import { createEnv } from "@t3-oss/env-nextjs";
./src/env.mjs:import { z } from "zod";
./src/env.mjs:
./src/env.mjs:export const env = createEnv({
./src/env.mjs:  client: {
./src/env.mjs:    NEXT_PUBLIC_SUPABASE_URL: z.string().min(1),
./src/env.mjs:    NEXT_PUBLIC_SUPABASE_ANON_KEY: z.string().min(1),
./src/env.mjs:    NEXT_PUBLIC_GEMINI_API_KEY: z.string().min(1),
./src/env.mjs:  },
./src/env.mjs:  runtimeEnv: {
./src/env.mjs:    NEXT_PUBLIC_SUPABASE_URL: process.env.NEXT_PUBLIC_SUPABASE_URL,
./src/env.mjs:    NEXT_PUBLIC_SUPABASE_ANON_KEY: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
./src/env.mjs:    NEXT_PUBLIC_GEMINI_API_KEY: process.env.NEXT_PUBLIC_GEMINI_API_KEY,
./src/env.mjs:  },
./src/env.mjs:}); 
./src/hooks/useAuth.ts:
./src/hooks/useAuth.ts:
./src/hooks/useAuth.ts:export { useAuth } from '@/contexts/AuthContext';
./src/hooks/useCompany.ts:import { useState, useEffect } from 'react';
./src/hooks/useCompany.ts:import { getCompany, getCompanies } from '@/lib/database';
./src/hooks/useCompany.ts:import type { 
./src/hooks/useCompany.ts:  Company, 
./src/hooks/useCompany.ts:  CompanyWithReviews, 
./src/hooks/useCompany.ts:  GetCompaniesOptions, 
./src/hooks/useCompany.ts:  DatabaseResult, 
./src/hooks/useCompany.ts:  JoinedCompany,
./src/hooks/useCompany.ts:  CompanyId 
./src/hooks/useCompany.ts:} from '@/types/database';
./src/hooks/useCompany.ts:import { supabase } from '@/lib/supabaseClient';
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:export type UseCompanyOptions = {
./src/hooks/useCompany.ts:  withReviews?: boolean;
./src/hooks/useCompany.ts:  withStats?: boolean;
./src/hooks/useCompany.ts:};
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:export type UseCompanyResult = {
./src/hooks/useCompany.ts:  company: JoinedCompany | null;
./src/hooks/useCompany.ts:  loading: boolean;
./src/hooks/useCompany.ts:  error: string | null;
./src/hooks/useCompany.ts:};
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:export type UseCompaniesResult = {
./src/hooks/useCompany.ts:  companies: JoinedCompany[];
./src/hooks/useCompany.ts:  totalCount: number;
./src/hooks/useCompany.ts:  loading: boolean;
./src/hooks/useCompany.ts:  error: string | null;
./src/hooks/useCompany.ts:};
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:export const useCompany = (
./src/hooks/useCompany.ts:  id: CompanyId | string | null,
./src/hooks/useCompany.ts:  options: UseCompanyOptions = {}
./src/hooks/useCompany.ts:): UseCompanyResult => {
./src/hooks/useCompany.ts:  const [company, setCompany] = useState<JoinedCompany | null>(null);
./src/hooks/useCompany.ts:  const [loading, setLoading] = useState(true);
./src/hooks/useCompany.ts:  const [error, setError] = useState<string | null>(null);
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:  useEffect(() => {
./src/hooks/useCompany.ts:    const fetchCompany = async () => {
./src/hooks/useCompany.ts:      if (!id) {
./src/hooks/useCompany.ts:        setLoading(false);
./src/hooks/useCompany.ts:        return;
./src/hooks/useCompany.ts:      }
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:      try {
./src/hooks/useCompany.ts:        const numericId = typeof id === 'string' ? parseInt(id, 10) : id;
./src/hooks/useCompany.ts:        const { data, error } = await supabase
./src/hooks/useCompany.ts:          .from('companies')
./src/hooks/useCompany.ts:          .select('*, reviews(*)')
./src/hooks/useCompany.ts:          .eq('id', numericId);
./src/hooks/useCompany.ts:        
./src/hooks/useCompany.ts:        if (error) {
./src/hooks/useCompany.ts:          setError(error.message || 'Failed to fetch company');
./src/hooks/useCompany.ts:          setCompany(null);
./src/hooks/useCompany.ts:        } else {
./src/hooks/useCompany.ts:          setCompany(data[0] as JoinedCompany);
./src/hooks/useCompany.ts:          setError(null);
./src/hooks/useCompany.ts:        }
./src/hooks/useCompany.ts:      } catch (err) {
./src/hooks/useCompany.ts:        setError('An unexpected error occurred');
./src/hooks/useCompany.ts:        setCompany(null);
./src/hooks/useCompany.ts:      } finally {
./src/hooks/useCompany.ts:        setLoading(false);
./src/hooks/useCompany.ts:      }
./src/hooks/useCompany.ts:    };
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:    fetchCompany();
./src/hooks/useCompany.ts:  }, [id, options.withReviews, options.withStats]);
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:  return { company, loading, error };
./src/hooks/useCompany.ts:};
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:export const useCompanies = (options: GetCompaniesOptions = {}): UseCompaniesResult => {
./src/hooks/useCompany.ts:  const [companies, setCompanies] = useState<JoinedCompany[]>([]);
./src/hooks/useCompany.ts:  const [totalCount, setTotalCount] = useState(0);
./src/hooks/useCompany.ts:  const [loading, setLoading] = useState(true);
./src/hooks/useCompany.ts:  const [error, setError] = useState<string | null>(null);
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:  useEffect(() => {
./src/hooks/useCompany.ts:    const fetchCompanies = async () => {
./src/hooks/useCompany.ts:      try {
./src/hooks/useCompany.ts:        const { data, error } = await supabase
./src/hooks/useCompany.ts:          .from('companies')
./src/hooks/useCompany.ts:          .select('*, reviews(*)');
./src/hooks/useCompany.ts:        if (error) {
./src/hooks/useCompany.ts:          setError(error.message || 'Failed to fetch companies');
./src/hooks/useCompany.ts:          setCompanies([]);
./src/hooks/useCompany.ts:        } else {
./src/hooks/useCompany.ts:          setCompanies(data as JoinedCompany[]);
./src/hooks/useCompany.ts:          setTotalCount(data.length);
./src/hooks/useCompany.ts:          setError(null);
./src/hooks/useCompany.ts:        }
./src/hooks/useCompany.ts:      } catch (err) {
./src/hooks/useCompany.ts:        setError('An unexpected error occurred');
./src/hooks/useCompany.ts:        setCompanies([]);
./src/hooks/useCompany.ts:      } finally {
./src/hooks/useCompany.ts:        setLoading(false);
./src/hooks/useCompany.ts:      }
./src/hooks/useCompany.ts:    };
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:    fetchCompanies();
./src/hooks/useCompany.ts:  }, [
./src/hooks/useCompany.ts:    options.page, 
./src/hooks/useCompany.ts:    options.limit, 
./src/hooks/useCompany.ts:    options.industry, 
./src/hooks/useCompany.ts:    options.location, 
./src/hooks/useCompany.ts:    options.search, 
./src/hooks/useCompany.ts:    options.orderBy, 
./src/hooks/useCompany.ts:    options.orderDirection,
./src/hooks/useCompany.ts:    options.withReviews,
./src/hooks/useCompany.ts:    options.withStats
./src/hooks/useCompany.ts:  ]);
./src/hooks/useCompany.ts:
./src/hooks/useCompany.ts:  return { companies, totalCount, loading, error };
./src/hooks/useCompany.ts:};
./src/hooks/useDebounce.ts:import { useState, useEffect } from 'react';
./src/hooks/useDebounce.ts:
./src/hooks/useDebounce.ts:
./src/hooks/useDebounce.ts:export function useDebounce<T>(value: T, delay: number): T {
./src/hooks/useDebounce.ts:  const [debouncedValue, setDebouncedValue] = useState<T>(value);
./src/hooks/useDebounce.ts:
./src/hooks/useDebounce.ts:  useEffect(() => {
./src/hooks/useDebounce.ts:    const timer = setTimeout(() => {
./src/hooks/useDebounce.ts:      setDebouncedValue(value);
./src/hooks/useDebounce.ts:    }, delay);
./src/hooks/useDebounce.ts:
./src/hooks/useDebounce.ts:    return () => {
./src/hooks/useDebounce.ts:      clearTimeout(timer);
./src/hooks/useDebounce.ts:    };
./src/hooks/useDebounce.ts:  }, [value, delay]);
./src/hooks/useDebounce.ts:
./src/hooks/useDebounce.ts:  return debouncedValue;
./src/hooks/useDebounce.ts:}
./src/hooks/useLikes.ts:import { ReviewLike } from '@/types';
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:import { useState, useEffect } from 'react';
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:import { createBrowserClient } from '@supabase/ssr';
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:export function useLikes(reviewId: number, userId?: string) {
./src/hooks/useLikes.ts:  const [isLiked, setIsLiked] = useState(false);
./src/hooks/useLikes.ts:  const [isLoading, setIsLoading] = useState(false);
./src/hooks/useLikes.ts:  const supabase = createBrowserClient(
./src/hooks/useLikes.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/hooks/useLikes.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
./src/hooks/useLikes.ts:  );
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:  useEffect(() => {
./src/hooks/useLikes.ts:    async function checkLikeStatus() {
./src/hooks/useLikes.ts:      if (!userId) return;
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:      const { data, error } = await supabase
./src/hooks/useLikes.ts:        .rpc('has_user_liked_review', {
./src/hooks/useLikes.ts:          p_user_id: userId,
./src/hooks/useLikes.ts:          p_review_id: reviewId
./src/hooks/useLikes.ts:        });
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:      if (!error) {
./src/hooks/useLikes.ts:        setIsLiked(!!data);
./src/hooks/useLikes.ts:      }
./src/hooks/useLikes.ts:    }
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:    checkLikeStatus();
./src/hooks/useLikes.ts:  }, [reviewId, userId, supabase]);
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:  const toggleLike = async () => {
./src/hooks/useLikes.ts:    if (!userId || isLoading) return;
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:    setIsLoading(true);
./src/hooks/useLikes.ts:    try {
./src/hooks/useLikes.ts:      if (isLiked) {
./src/hooks/useLikes.ts:        // Unlike
./src/hooks/useLikes.ts:        const { error } = await supabase
./src/hooks/useLikes.ts:          .from('review_likes')
./src/hooks/useLikes.ts:          .delete()
./src/hooks/useLikes.ts:          .eq('user_id', userId)
./src/hooks/useLikes.ts:          .eq('review_id', reviewId);
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:        if (!error) {
./src/hooks/useLikes.ts:          setIsLiked(false);
./src/hooks/useLikes.ts:        }
./src/hooks/useLikes.ts:      } else {
./src/hooks/useLikes.ts:        // Like
./src/hooks/useLikes.ts:        const { error } = await supabase
./src/hooks/useLikes.ts:          .from('review_likes')
./src/hooks/useLikes.ts:          .insert({
./src/hooks/useLikes.ts:            user_id: userId,
./src/hooks/useLikes.ts:            review_id: reviewId
./src/hooks/useLikes.ts:          });
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:        if (!error) {
./src/hooks/useLikes.ts:          setIsLiked(true);
./src/hooks/useLikes.ts:        }
./src/hooks/useLikes.ts:      }
./src/hooks/useLikes.ts:    } finally {
./src/hooks/useLikes.ts:      setIsLoading(false);
./src/hooks/useLikes.ts:    }
./src/hooks/useLikes.ts:  };
./src/hooks/useLikes.ts:
./src/hooks/useLikes.ts:  return {
./src/hooks/useLikes.ts:    isLiked,
./src/hooks/useLikes.ts:    isLoading,
./src/hooks/useLikes.ts:    toggleLike
./src/hooks/useLikes.ts:  };
./src/hooks/useLikes.ts:}
./src/hooks/useReviews.ts:import { useState, useEffect } from 'react';
./src/hooks/useReviews.ts:import { getReviews } from '@/lib/database';
./src/hooks/useReviews.ts:import type { 
./src/hooks/useReviews.ts:  Review, 
./src/hooks/useReviews.ts:  GetReviewsOptions, 
./src/hooks/useReviews.ts:  DatabaseResult, 
./src/hooks/useReviews.ts:  JoinedReview,
./src/hooks/useReviews.ts:  CompanyId,
./src/hooks/useReviews.ts:  UserId 
./src/hooks/useReviews.ts:} from '@/types/database';
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:export type UseReviewsResult = {
./src/hooks/useReviews.ts:  reviews: JoinedReview[] | null;
./src/hooks/useReviews.ts:  loading: boolean;
./src/hooks/useReviews.ts:  error: string | null;
./src/hooks/useReviews.ts:  totalCount?: number;
./src/hooks/useReviews.ts:};
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:export const useReviews = (options: GetReviewsOptions = {}): UseReviewsResult => {
./src/hooks/useReviews.ts:  const [reviews, setReviews] = useState<JoinedReview[] | null>(null);
./src/hooks/useReviews.ts:  const [totalCount, setTotalCount] = useState<number | undefined>(undefined);
./src/hooks/useReviews.ts:  const [loading, setLoading] = useState(true);
./src/hooks/useReviews.ts:  const [error, setError] = useState<string | null>(null);
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:  useEffect(() => {
./src/hooks/useReviews.ts:    const fetchReviews = async () => {
./src/hooks/useReviews.ts:      try {
./src/hooks/useReviews.ts:        // Convert string IDs to proper types if provided
./src/hooks/useReviews.ts:        const parsedOptions = {
./src/hooks/useReviews.ts:          ...options,
./src/hooks/useReviews.ts:          companyId: options.companyId ? 
./src/hooks/useReviews.ts:            (typeof options.companyId === 'string' ? parseInt(options.companyId, 10) : options.companyId) : 
./src/hooks/useReviews.ts:            undefined,
./src/hooks/useReviews.ts:        };
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:        const result = await getReviews(parsedOptions.companyId);
./src/hooks/useReviews.ts:        if (result.error) {
./src/hooks/useReviews.ts:          setError(result.error.message || 'Failed to fetch reviews');
./src/hooks/useReviews.ts:          setReviews(null);
./src/hooks/useReviews.ts:        } else {
./src/hooks/useReviews.ts:          setReviews(result.data);
./src/hooks/useReviews.ts:          setTotalCount(result.data?.length);
./src/hooks/useReviews.ts:          setError(null);
./src/hooks/useReviews.ts:        }
./src/hooks/useReviews.ts:      } catch (err) {
./src/hooks/useReviews.ts:        setError('An unexpected error occurred');
./src/hooks/useReviews.ts:        setReviews(null);
./src/hooks/useReviews.ts:      } finally {
./src/hooks/useReviews.ts:        setLoading(false);
./src/hooks/useReviews.ts:      }
./src/hooks/useReviews.ts:    };
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:    fetchReviews();
./src/hooks/useReviews.ts:  }, [
./src/hooks/useReviews.ts:    options.page, 
./src/hooks/useReviews.ts:    options.limit, 
./src/hooks/useReviews.ts:    options.status, 
./src/hooks/useReviews.ts:    options.companyId,
./src/hooks/useReviews.ts:    options.userId,
./src/hooks/useReviews.ts:    options.orderBy, 
./src/hooks/useReviews.ts:    options.orderDirection,
./src/hooks/useReviews.ts:    options.withCompany,
./src/hooks/useReviews.ts:    options.withLikes
./src/hooks/useReviews.ts:  ]);
./src/hooks/useReviews.ts:
./src/hooks/useReviews.ts:  return { reviews, loading, error, totalCount };
./src/hooks/useReviews.ts:};
./src/lib/api-test.ts:import fetch from 'node-fetch';
./src/lib/api-test.ts:import dotenv from 'dotenv';
./src/lib/api-test.ts:import fs from 'fs/promises';
./src/lib/api-test.ts:
./src/lib/api-test.ts:dotenv.config();
./src/lib/api-test.ts:
./src/lib/api-test.ts:interface ApiResponse {
./src/lib/api-test.ts:  api: string;
./src/lib/api-test.ts:  status: 'success' | 'error';
./src/lib/api-test.ts:  data?: any;
./src/lib/api-test.ts:  error?: string;
./src/lib/api-test.ts:  timestamp: string;
./src/lib/api-test.ts:  searchTerm?: string;
./src/lib/api-test.ts:}
./src/lib/api-test.ts:
./src/lib/api-test.ts:// Company identifiers and search terms
./src/lib/api-test.ts:const SEARCH_TERMS = {
./src/lib/api-test.ts:  // Keep company identifiers for comprehensive coverage
./src/lib/api-test.ts:  company: ['BZAM', 'BZAM Ltd', 'The Green Organic Dutchman'],
./src/lib/api-test.ts:  // Employment-related terms for filtering
./src/lib/api-test.ts:  employment: ['employee', 'staff', 'workforce', 'layoff', 'hiring', 'jobs']
./src/lib/api-test.ts:};
./src/lib/api-test.ts:
./src/lib/api-test.ts:// Delay between API calls to respect rate limits
./src/lib/api-test.ts:const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));
./src/lib/api-test.ts:
./src/lib/api-test.ts:// API response interfaces
./src/lib/api-test.ts:interface MarketauxArticle {
./src/lib/api-test.ts:  title: string;
./src/lib/api-test.ts:  description: string;
./src/lib/api-test.ts:  snippet: string;
./src/lib/api-test.ts:  url: string;
./src/lib/api-test.ts:  published_at: string;
./src/lib/api-test.ts:  source: string;
./src/lib/api-test.ts:}
./src/lib/api-test.ts:
./src/lib/api-test.ts:interface MarketauxResponse {
./src/lib/api-test.ts:  meta?: {
./src/lib/api-test.ts:    found: number;
./src/lib/api-test.ts:    returned: number;
./src/lib/api-test.ts:    limit: number;
./src/lib/api-test.ts:    page: number;
./src/lib/api-test.ts:  };
./src/lib/api-test.ts:  data: MarketauxArticle[];
./src/lib/api-test.ts:}
./src/lib/api-test.ts:
./src/lib/api-test.ts:async function testMarketaux(term: string) {
./src/lib/api-test.ts:  try {
./src/lib/api-test.ts:    console.log(`Testing Marketaux with ${term}...`);
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    // Format date as YYYY-MM-DD
./src/lib/api-test.ts:    const sixMonthsAgo = new Date();
./src/lib/api-test.ts:    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
./src/lib/api-test.ts:    const publishedAfter = sixMonthsAgo.toISOString().split('T')[0];
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    // Use exact parameters that worked before
./src/lib/api-test.ts:    const response = await fetch(
./src/lib/api-test.ts:      `https://api.marketaux.com/v1/news/all?` +
./src/lib/api-test.ts:      new URLSearchParams({
./src/lib/api-test.ts:        search: term,
./src/lib/api-test.ts:        filter_entities: 'true',  // This worked before
./src/lib/api-test.ts:        language: 'en',
./src/lib/api-test.ts:        limit: '3',
./src/lib/api-test.ts:        api_token: process.env.MARKETAUX_KEY || ''
./src/lib/api-test.ts:      })
./src/lib/api-test.ts:    );
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    if (!response.ok) {
./src/lib/api-test.ts:      const errorText = await response.text();
./src/lib/api-test.ts:      throw new Error(`HTTP error! status: ${response.status}, body: ${errorText}`);
./src/lib/api-test.ts:    }
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    const data = await response.json() as MarketauxResponse;
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    // Log full response for debugging
./src/lib/api-test.ts:    console.log('Marketaux raw response:', JSON.stringify(data, null, 2));
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    return {
./src/lib/api-test.ts:      api: 'Marketaux',
./src/lib/api-test.ts:      status: 'success',
./src/lib/api-test.ts:      data,
./src/lib/api-test.ts:      timestamp: new Date().toISOString(),
./src/lib/api-test.ts:      searchTerm: term
./src/lib/api-test.ts:    } as ApiResponse;
./src/lib/api-test.ts:  } catch (error: any) {
./src/lib/api-test.ts:    console.error(`Marketaux API error for ${term}:`, error);
./src/lib/api-test.ts:    return {
./src/lib/api-test.ts:      api: 'Marketaux',
./src/lib/api-test.ts:      status: 'error',
./src/lib/api-test.ts:      error: error?.message || 'Unknown error',
./src/lib/api-test.ts:      timestamp: new Date().toISOString(),
./src/lib/api-test.ts:      searchTerm: term
./src/lib/api-test.ts:    } as ApiResponse;
./src/lib/api-test.ts:  }
./src/lib/api-test.ts:}
./src/lib/api-test.ts:
./src/lib/api-test.ts:async function runTests() {
./src/lib/api-test.ts:  console.log('Starting company news search...');
./src/lib/api-test.ts:  const allResults: ApiResponse[] = [];
./src/lib/api-test.ts:  
./src/lib/api-test.ts:  // Use just company name
./src/lib/api-test.ts:  const term = 'BZAM';
./src/lib/api-test.ts:  
./src/lib/api-test.ts:  // Test Marketaux
./src/lib/api-test.ts:  const marketauxResult = await testMarketaux(term);
./src/lib/api-test.ts:  allResults.push(marketauxResult);
./src/lib/api-test.ts:
./src/lib/api-test.ts:  // Format results
./src/lib/api-test.ts:  let output = 'BZAM News Search Results\n';
./src/lib/api-test.ts:  output += '================================\n\n';
./src/lib/api-test.ts:  output += `Search Term: ${term}\n`;
./src/lib/api-test.ts:  output += `Search Time: ${new Date().toLocaleString()}\n\n`;
./src/lib/api-test.ts:  
./src/lib/api-test.ts:  // Output results
./src/lib/api-test.ts:  for (const result of allResults) {
./src/lib/api-test.ts:    output += `API: ${result.api}\n`;
./src/lib/api-test.ts:    output += '------------------------\n';
./src/lib/api-test.ts:    
./src/lib/api-test.ts:    if (result.error) {
./src/lib/api-test.ts:      output += `Error: ${result.error}\n`;
./src/lib/api-test.ts:    } else if (result.data) {
./src/lib/api-test.ts:      const articles = result.data.data;
./src/lib/api-test.ts:      const totalFound = result.data.meta?.found || 0;
./src/lib/api-test.ts:      
./src/lib/api-test.ts:      output += `Total articles available: ${totalFound}\n`;
./src/lib/api-test.ts:      output += `Articles in this batch: ${articles.length}\n\n`;
./src/lib/api-test.ts:      
./src/lib/api-test.ts:      if (articles.length > 0) {
./src/lib/api-test.ts:        output += 'Articles:\n';
./src/lib/api-test.ts:        articles.forEach((article: MarketauxArticle, index: number) => {
./src/lib/api-test.ts:          output += `\n[${index + 1}] `;
./src/lib/api-test.ts:          output += `${article.title}\n`;
./src/lib/api-test.ts:          output += `Published: ${article.published_at}\n`;
./src/lib/api-test.ts:          output += `Source: ${article.source}\n`;
./src/lib/api-test.ts:          
./src/lib/api-test.ts:          // Check for employment-related content
./src/lib/api-test.ts:          const content = [
./src/lib/api-test.ts:            article.title,
./src/lib/api-test.ts:            article.description || '',
./src/lib/api-test.ts:            article.snippet || ''
./src/lib/api-test.ts:          ].join(' ').toLowerCase();
./src/lib/api-test.ts:          
./src/lib/api-test.ts:          const matchedTerms = SEARCH_TERMS.employment.filter(term => 
./src/lib/api-test.ts:            content.includes(term.toLowerCase())
./src/lib/api-test.ts:          );
./src/lib/api-test.ts:          
./src/lib/api-test.ts:          if (matchedTerms.length > 0) {
./src/lib/api-test.ts:            output += `Employment Terms Found: ${matchedTerms.join(', ')}\n`;
./src/lib/api-test.ts:          }
./src/lib/api-test.ts:          
./src/lib/api-test.ts:          output += `URL: ${article.url}\n`;
./src/lib/api-test.ts:          if (article.description) {
./src/lib/api-test.ts:            output += `Summary: ${article.description}\n`;
./src/lib/api-test.ts:          }
./src/lib/api-test.ts:          output += '\n';
./src/lib/api-test.ts:        });
./src/lib/api-test.ts:      }
./src/lib/api-test.ts:    }
./src/lib/api-test.ts:    output += '\n------------------------\n\n';
./src/lib/api-test.ts:  }
./src/lib/api-test.ts:
./src/lib/api-test.ts:  // Save results
./src/lib/api-test.ts:  const filename = `bzam-news-${new Date().toISOString().replace(/[:.]/g, '-')}.txt`;
./src/lib/api-test.ts:  await fs.writeFile(filename, output, 'utf8');
./src/lib/api-test.ts:  console.log(`Results saved to ${filename}`);
./src/lib/api-test.ts:  
./src/lib/api-test.ts:  return allResults;
./src/lib/api-test.ts:}
./src/lib/api-test.ts:
./src/lib/api-test.ts:// Run if called directly
./src/lib/api-test.ts:if (require.main === module) {
./src/lib/api-test.ts:  runTests().catch(console.error);
./src/lib/api-test.ts:} 
./src/lib/api-utils.ts:import { NextResponse } from 'next/server';
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:import { PostgrestError } from '@supabase/supabase-js';
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:export interface ApiError {
./src/lib/api-utils.ts:  message: string;
./src/lib/api-utils.ts:  code?: string;
./src/lib/api-utils.ts:  status: number;
./src/lib/api-utils.ts:  details?: unknown;
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:export class ApiException extends Error {
./src/lib/api-utils.ts:  constructor(
./src/lib/api-utils.ts:    public error: ApiError
./src/lib/api-utils.ts:  ) {
./src/lib/api-utils.ts:    super(error.message);
./src/lib/api-utils.ts:    this.name = 'ApiException';
./src/lib/api-utils.ts:  }
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:export function handleError(error: unknown) {
./src/lib/api-utils.ts:  console.error('API Error:', error);
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  // Handle known error types
./src/lib/api-utils.ts:  if (error instanceof ApiException) {
./src/lib/api-utils.ts:    return NextResponse.json(
./src/lib/api-utils.ts:      { error: error.error },
./src/lib/api-utils.ts:      { status: error.error.status }
./src/lib/api-utils.ts:    );
./src/lib/api-utils.ts:  }
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  // Handle Supabase errors
./src/lib/api-utils.ts:  if (isSupabaseError(error)) {
./src/lib/api-utils.ts:    return NextResponse.json(
./src/lib/api-utils.ts:      {
./src/lib/api-utils.ts:        error: {
./src/lib/api-utils.ts:          message: error.message,
./src/lib/api-utils.ts:          code: error.code,
./src/lib/api-utils.ts:          status: 400,
./src/lib/api-utils.ts:          details: error.details,
./src/lib/api-utils.ts:        },
./src/lib/api-utils.ts:      },
./src/lib/api-utils.ts:      { status: 400 }
./src/lib/api-utils.ts:    );
./src/lib/api-utils.ts:  }
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  // Handle validation errors
./src/lib/api-utils.ts:  if (isValidationError(error)) {
./src/lib/api-utils.ts:    return NextResponse.json(
./src/lib/api-utils.ts:      {
./src/lib/api-utils.ts:        error: {
./src/lib/api-utils.ts:          message: 'Validation error',
./src/lib/api-utils.ts:          code: 'VALIDATION_ERROR',
./src/lib/api-utils.ts:          status: 400,
./src/lib/api-utils.ts:          details: error.errors,
./src/lib/api-utils.ts:        },
./src/lib/api-utils.ts:      },
./src/lib/api-utils.ts:      { status: 400 }
./src/lib/api-utils.ts:    );
./src/lib/api-utils.ts:  }
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  // Handle unknown errors
./src/lib/api-utils.ts:  return NextResponse.json(
./src/lib/api-utils.ts:    {
./src/lib/api-utils.ts:      error: {
./src/lib/api-utils.ts:        message: 'Internal server error',
./src/lib/api-utils.ts:        code: 'INTERNAL_SERVER_ERROR',
./src/lib/api-utils.ts:        status: 500,
./src/lib/api-utils.ts:      },
./src/lib/api-utils.ts:    },
./src/lib/api-utils.ts:    { status: 500 }
./src/lib/api-utils.ts:  );
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:export function createApiError(
./src/lib/api-utils.ts:  message: string,
./src/lib/api-utils.ts:  code: string,
./src/lib/api-utils.ts:  status: number = 400,
./src/lib/api-utils.ts:  details?: unknown
./src/lib/api-utils.ts:): ApiError {
./src/lib/api-utils.ts:  return {
./src/lib/api-utils.ts:    message,
./src/lib/api-utils.ts:    code,
./src/lib/api-utils.ts:    status,
./src/lib/api-utils.ts:    details,
./src/lib/api-utils.ts:  };
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:// Type guards
./src/lib/api-utils.ts:function isSupabaseError(error: unknown): error is PostgrestError {
./src/lib/api-utils.ts:  return (
./src/lib/api-utils.ts:    typeof error === 'object' &&
./src/lib/api-utils.ts:    error !== null &&
./src/lib/api-utils.ts:    'message' in error &&
./src/lib/api-utils.ts:    'code' in error
./src/lib/api-utils.ts:  );
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:interface ValidationError {
./src/lib/api-utils.ts:  errors: Array<{ message: string; path: string[] }>;
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:function isValidationError(error: unknown): error is ValidationError {
./src/lib/api-utils.ts:  return (
./src/lib/api-utils.ts:    typeof error === 'object' &&
./src/lib/api-utils.ts:    error !== null &&
./src/lib/api-utils.ts:    'errors' in error &&
./src/lib/api-utils.ts:    Array.isArray((error as ValidationError).errors)
./src/lib/api-utils.ts:  );
./src/lib/api-utils.ts:}
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:// Common error factories
./src/lib/api-utils.ts:export const ApiErrors = {
./src/lib/api-utils.ts:  NotFound: (resource: string) =>
./src/lib/api-utils.ts:    new ApiException({
./src/lib/api-utils.ts:      message: `${resource} not found`,
./src/lib/api-utils.ts:      code: 'NOT_FOUND',
./src/lib/api-utils.ts:      status: 404,
./src/lib/api-utils.ts:    }),
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  Unauthorized: () =>
./src/lib/api-utils.ts:    new ApiException({
./src/lib/api-utils.ts:      message: 'Unauthorized',
./src/lib/api-utils.ts:      code: 'UNAUTHORIZED',
./src/lib/api-utils.ts:      status: 401,
./src/lib/api-utils.ts:    }),
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  Forbidden: () =>
./src/lib/api-utils.ts:    new ApiException({
./src/lib/api-utils.ts:      message: 'Forbidden',
./src/lib/api-utils.ts:      code: 'FORBIDDEN',
./src/lib/api-utils.ts:      status: 403,
./src/lib/api-utils.ts:    }),
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  BadRequest: (message: string, details?: unknown) =>
./src/lib/api-utils.ts:    new ApiException({
./src/lib/api-utils.ts:      message,
./src/lib/api-utils.ts:      code: 'BAD_REQUEST',
./src/lib/api-utils.ts:      status: 400,
./src/lib/api-utils.ts:      details,
./src/lib/api-utils.ts:    }),
./src/lib/api-utils.ts:
./src/lib/api-utils.ts:  ValidationError: (errors: Array<{ message: string; path: string[] }>) =>
./src/lib/api-utils.ts:    new ApiException({
./src/lib/api-utils.ts:      message: 'Validation error',
./src/lib/api-utils.ts:      code: 'VALIDATION_ERROR',
./src/lib/api-utils.ts:      status: 400,
./src/lib/api-utils.ts:      details: errors,
./src/lib/api-utils.ts:    }),
./src/lib/api-utils.ts:};
./src/lib/api.ts:
./src/lib/api.ts:
./src/lib/api.ts:// Create a centralized API handling
./src/lib/api.ts:export async function fetchData<T>(
./src/lib/api.ts:  query: Promise<{ data: T | null; error: any }>
./src/lib/api.ts:): Promise<{ data: T | null; error: Error | null }> {
./src/lib/api.ts:  try {
./src/lib/api.ts:    const { data, error } = await query;
./src/lib/api.ts:    if (error) throw error;
./src/lib/api.ts:    return { data, error: null };
./src/lib/api.ts:  } catch (error) {
./src/lib/api.ts:    console.error('API Error:', error);
./src/lib/api.ts:    return { data: null, error: error as Error };
./src/lib/api.ts:  }
./src/lib/api.ts:}
./src/lib/auth/withAuth.tsx:'use client'
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:import * as React from 'react';
./src/lib/auth/withAuth.tsx:import type { ComponentType } from 'react';
./src/lib/auth/withAuth.tsx:import { useRouter } from 'next/navigation';
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:import { useAuth } from '@/contexts/AuthContext';
./src/lib/auth/withAuth.tsx:import { LoadingSpinner } from '@/components/LoadingSpinner';
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:import { Role } from '@/types';
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:interface WithAuthProps {
./src/lib/auth/withAuth.tsx:  requiredRole?: string;
./src/lib/auth/withAuth.tsx:  redirectTo?: string;
./src/lib/auth/withAuth.tsx:}
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:export function withAuth<P extends object>(
./src/lib/auth/withAuth.tsx:  WrappedComponent: ComponentType<P>,
./src/lib/auth/withAuth.tsx:  options: { requiredRole?: string } = {}
./src/lib/auth/withAuth.tsx:) {
./src/lib/auth/withAuth.tsx:  return function ProtectedRoute(props: P) {
./src/lib/auth/withAuth.tsx:    const router = useRouter();
./src/lib/auth/withAuth.tsx:    const { user, isLoading } = useAuth();
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:    React.useEffect(() => {
./src/lib/auth/withAuth.tsx:      if (!isLoading && !user) {
./src/lib/auth/withAuth.tsx:        router.push('/login');
./src/lib/auth/withAuth.tsx:      }
./src/lib/auth/withAuth.tsx:    }, [user, isLoading, router]);
./src/lib/auth/withAuth.tsx:
./src/lib/auth/withAuth.tsx:    if (isLoading) return <LoadingSpinner />;
./src/lib/auth/withAuth.tsx:    
./src/lib/auth/withAuth.tsx:    return user ? <WrappedComponent {...props} /> : null;
./src/lib/auth/withAuth.tsx:  };
./src/lib/auth/withAuth.tsx:}
./src/lib/auth.ts: 
./src/lib/check-db.ts:import { supabase } from './supabaseClient';
./src/lib/check-db.ts:
./src/lib/check-db.ts:
./src/lib/check-db.ts:async function checkDatabaseSchema() {
./src/lib/check-db.ts:  // Check user metadata and roles
./src/lib/check-db.ts:  const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers();
./src/lib/check-db.ts:  console.log('User metadata test:', { 
./src/lib/check-db.ts:    users: users?.map(u => ({ id: u.id, metadata: u.user_metadata })),
./src/lib/check-db.ts:    error: usersError 
./src/lib/check-db.ts:  });
./src/lib/check-db.ts:
./src/lib/check-db.ts:  // Check companies table
./src/lib/check-db.ts:  const { data: companiesData, error: companiesError } = await supabase
./src/lib/check-db.ts:    .from('companies')
./src/lib/check-db.ts:    .select(`
./src/lib/check-db.ts:      id,
./src/lib/check-db.ts:      name,
./src/lib/check-db.ts:      description,
./src/lib/check-db.ts:      industry,
./src/lib/check-db.ts:      location,
./src/lib/check-db.ts:      website,
./src/lib/check-db.ts:      logo_url,
./src/lib/check-db.ts:      verification_status,
./src/lib/check-db.ts:      verified,
./src/lib/check-db.ts:      created_by,
./src/lib/check-db.ts:      created_at,
./src/lib/check-db.ts:      updated_at
./src/lib/check-db.ts:    `)
./src/lib/check-db.ts:    .limit(1);
./src/lib/check-db.ts:
./src/lib/check-db.ts:  console.log('Companies table:', { companiesData, companiesError });
./src/lib/check-db.ts:
./src/lib/check-db.ts:  // Check reviews table
./src/lib/check-db.ts:  const { data: reviewsData, error: reviewsError } = await supabase
./src/lib/check-db.ts:    .from('reviews')
./src/lib/check-db.ts:    .select('*')
./src/lib/check-db.ts:    .limit(1);
./src/lib/check-db.ts:
./src/lib/check-db.ts:  console.log('Reviews table:', { reviewsData, reviewsError });
./src/lib/check-db.ts:
./src/lib/check-db.ts:  // Check auth.users table
./src/lib/check-db.ts:  const { data: userData, error: userError } = await supabase.auth.getUser();
./src/lib/check-db.ts:  console.log('Auth user:', { userData, userError });
./src/lib/check-db.ts:}
./src/lib/check-db.ts:
./src/lib/check-db.ts:checkDatabaseSchema();
./src/lib/database.ts:import type { Database } from '@/types/supabase';
./src/lib/database.ts:import { PostgrestError } from '@supabase/supabase-js';
./src/lib/database.ts:import { supabase } from './supabaseClient';
./src/lib/database.ts:import {
./src/lib/database.ts:  Company,
./src/lib/database.ts:  CompanyInsert,
./src/lib/database.ts:  CompanyUpdate,
./src/lib/database.ts:  Review,
./src/lib/database.ts:  ReviewInsert,
./src/lib/database.ts:  ReviewUpdate,
./src/lib/database.ts:  CompanyWithReviews,
./src/lib/database.ts:} from '@/types';
./src/lib/database.ts:
./src/lib/database.ts:// Response types
./src/lib/database.ts:export interface DatabaseResponse<T> {
./src/lib/database.ts:  data: T | null;
./src/lib/database.ts:  error: DatabaseError | null;
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export interface ReviewLike {
./src/lib/database.ts:  id: number;
./src/lib/database.ts:  review_id: number;
./src/lib/database.ts:  user_id: string;
./src/lib/database.ts:  created_at: string;
./src/lib/database.ts:  liked: boolean;
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export interface DatabaseError {
./src/lib/database.ts:  message: string;
./src/lib/database.ts:  details?: unknown;
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export type DatabaseResult<T> = {
./src/lib/database.ts:  data?: T | null;
./src/lib/database.ts:  error: DatabaseError | null;
./src/lib/database.ts:};
./src/lib/database.ts:
./src/lib/database.ts:export type DatabaseOperation = 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'UPSERT' | 'RPC' | 'AUTH';
./src/lib/database.ts:export type TableName = keyof Database['public']['Tables'] | 'review_likes';
./src/lib/database.ts:export type ErrorLogDetails = {
./src/lib/database.ts:  operation: DatabaseOperation;
./src/lib/database.ts:  table: TableName;
./src/lib/database.ts:  error: Error;
./src/lib/database.ts:  details?: Record<string, any>;
./src/lib/database.ts:  user_id?: string;
./src/lib/database.ts:};
./src/lib/database.ts:
./src/lib/database.ts:// Helper function to ensure ID is a number
./src/lib/database.ts:function ensureNumericId(id: string | number): number {
./src/lib/database.ts:  return typeof id === 'string' ? parseInt(id, 10) : id;
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export const getCompanies = async () => {
./src/lib/database.ts:  const { data, error } = await supabase
./src/lib/database.ts:    .from('companies')
./src/lib/database.ts:    .select('*');
./src/lib/database.ts:  return { data, error };
./src/lib/database.ts:};
./src/lib/database.ts:
./src/lib/database.ts:export async function getCompany(id: number) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { data, error } = await supabase
./src/lib/database.ts:      .from('companies')
./src/lib/database.ts:      .select('*')
./src/lib/database.ts:      .eq('id', id)
./src/lib/database.ts:      .single();
./src/lib/database.ts:    
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'SELECT', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:    
./src/lib/database.ts:    return { data: data as Company, error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'SELECT', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function getReviews(companyId?: number) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const query = supabase
./src/lib/database.ts:      .from('reviews')
./src/lib/database.ts:      .select('*, company:companies(*)');
./src/lib/database.ts:
./src/lib/database.ts:    if (companyId) {
./src/lib/database.ts:      query.eq('company_id', companyId);
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    const { data, error } = await query;
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'SELECT', 'reviews', { company_id: companyId }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { data: data as (Review & { company: Company })[], error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'SELECT', 'reviews', { company_id: companyId }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function getReview(id: number) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { data, error } = await supabase
./src/lib/database.ts:      .from('reviews')
./src/lib/database.ts:      .select('*, company:companies(*)')
./src/lib/database.ts:      .eq('id', id)
./src/lib/database.ts:      .single();
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'SELECT', 'reviews', { review_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { data: data as Review & { company: Company }, error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'SELECT', 'reviews', { review_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function getLikes(reviewId: number, userId: string) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { data, error } = await supabase
./src/lib/database.ts:      .from('review_likes')
./src/lib/database.ts:      .select('*')
./src/lib/database.ts:      .eq('review_id', reviewId)
./src/lib/database.ts:      .eq('user_id', userId)
./src/lib/database.ts:      .single();
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'SELECT', 'review_likes', { review_id: reviewId, user_id: userId }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { data: data as ReviewLike, error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'SELECT', 'review_likes', { review_id: reviewId, user_id: userId }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function createLike(data: Omit<ReviewLike, 'id' | 'created_at'>) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('review_likes')
./src/lib/database.ts:      .insert([{
./src/lib/database.ts:        review_id: data.review_id,
./src/lib/database.ts:        user_id: data.user_id,
./src/lib/database.ts:        liked: data.liked,
./src/lib/database.ts:        created_at: new Date().toISOString()
./src/lib/database.ts:      }]);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'INSERT', 'review_likes', data) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'INSERT', 'review_likes', data) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function updateLike(id: number, data: Partial<Omit<ReviewLike, 'id' | 'created_at'>>) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('review_likes')
./src/lib/database.ts:      .update({
./src/lib/database.ts:        ...data,
./src/lib/database.ts:        created_at: new Date().toISOString()
./src/lib/database.ts:      })
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'UPDATE', 'review_likes', { id, ...data }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'UPDATE', 'review_likes', { id, ...data }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function deleteLike(id: number) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('review_likes')
./src/lib/database.ts:      .delete()
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'DELETE', 'review_likes', { id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'DELETE', 'review_likes', { id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export const createCompany = async (data: CompanyInsert) => {
./src/lib/database.ts:  const cleanData = {
./src/lib/database.ts:    ...data,
./src/lib/database.ts:    created_at: new Date().toISOString(),
./src/lib/database.ts:    updated_at: new Date().toISOString(),
./src/lib/database.ts:  };
./src/lib/database.ts:  
./src/lib/database.ts:  const { error } = await supabase
./src/lib/database.ts:    .from('companies')
./src/lib/database.ts:    .insert(cleanData);
./src/lib/database.ts:
./src/lib/database.ts:  return { error };
./src/lib/database.ts:};
./src/lib/database.ts:
./src/lib/database.ts:export async function updateCompany(id: number, data: CompanyUpdate) {
./src/lib/database.ts:  const { data: { user }, error: userError } = await supabase.auth.getUser();
./src/lib/database.ts:  
./src/lib/database.ts:  if (userError) {
./src/lib/database.ts:    return { error: handleDatabaseError(userError, 'AUTH', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  if (!user) {
./src/lib/database.ts:    return { error: handleDatabaseError(new Error('User must be authenticated to update a company'), 'AUTH', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  try {
./src/lib/database.ts:    // Check if user owns the company
./src/lib/database.ts:    const { data: existingCompany, error: existingError } = await supabase
./src/lib/database.ts:      .from('companies')
./src/lib/database.ts:      .select('created_by')
./src/lib/database.ts:      .eq('id', id)
./src/lib/database.ts:      .single();
./src/lib/database.ts:
./src/lib/database.ts:    if (existingError) {
./src/lib/database.ts:      return { error: handleDatabaseError(existingError, 'SELECT', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    if (!existingCompany) {
./src/lib/database.ts:      return { error: handleDatabaseError(new Error('Company not found'), 'UPDATE', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    if (existingCompany.created_by !== user.id) {
./src/lib/database.ts:      return { error: handleDatabaseError(new Error('You do not have permission to update this company'), 'AUTH', 'companies', { 
./src/lib/database.ts:        company_id: id,
./src/lib/database.ts:        user_id: user.id,
./src/lib/database.ts:        owner_id: existingCompany.created_by
./src/lib/database.ts:      })};
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('companies')
./src/lib/database.ts:      .update({
./src/lib/database.ts:        ...data,
./src/lib/database.ts:        updated_at: new Date().toISOString()
./src/lib/database.ts:      })
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'UPDATE', 'companies', { company_id: id, update_data: data }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'UPDATE', 'companies', { company_id: id, update_data: data }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function deleteCompany(id: number) {
./src/lib/database.ts:  const { data: { user }, error: userError } = await supabase.auth.getUser();
./src/lib/database.ts:  
./src/lib/database.ts:  if (userError) {
./src/lib/database.ts:    return { error: handleDatabaseError(userError, 'AUTH', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  if (!user) {
./src/lib/database.ts:    return { error: handleDatabaseError(new Error('User must be authenticated to delete a company'), 'AUTH', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  try {
./src/lib/database.ts:    // Check if user owns the company
./src/lib/database.ts:    const { data: existingCompany, error: existingError } = await supabase
./src/lib/database.ts:      .from('companies')
./src/lib/database.ts:      .select('created_by')
./src/lib/database.ts:      .eq('id', id)
./src/lib/database.ts:      .single();
./src/lib/database.ts:
./src/lib/database.ts:    if (existingError) {
./src/lib/database.ts:      return { error: handleDatabaseError(existingError, 'SELECT', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    if (!existingCompany) {
./src/lib/database.ts:      return { error: handleDatabaseError(new Error('Company not found'), 'DELETE', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    if (existingCompany.created_by !== user.id) {
./src/lib/database.ts:      return { error: handleDatabaseError(new Error('You do not have permission to delete this company'), 'AUTH', 'companies', { 
./src/lib/database.ts:        company_id: id,
./src/lib/database.ts:        user_id: user.id,
./src/lib/database.ts:        owner_id: existingCompany.created_by
./src/lib/database.ts:      })};
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('companies')
./src/lib/database.ts:      .delete()
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'DELETE', 'companies', { company_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'DELETE', 'companies', { company_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function createReview(data: ReviewInsert) {
./src/lib/database.ts:  const { data: { user }, error: userError } = await supabase.auth.getUser();
./src/lib/database.ts:  
./src/lib/database.ts:  if (userError) {
./src/lib/database.ts:    return { error: handleDatabaseError(userError, 'AUTH' as DatabaseOperation, 'reviews', data) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  if (!user) {
./src/lib/database.ts:    return { error: handleDatabaseError(new Error('User must be authenticated to create a review'), 'AUTH' as DatabaseOperation, 'reviews', data) };
./src/lib/database.ts:  }
./src/lib/database.ts:
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('reviews')
./src/lib/database.ts:      .insert([{ ...data, user_id: user.id }]);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'INSERT', 'reviews', data) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'INSERT', 'reviews', data) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function updateReview(id: number, data: ReviewUpdate) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('reviews')
./src/lib/database.ts:      .update(data)
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'UPDATE', 'reviews', { review_id: id, update_data: data }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'UPDATE', 'reviews', { review_id: id, update_data: data }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:export async function deleteReview(id: number) {
./src/lib/database.ts:  try {
./src/lib/database.ts:    const { error } = await supabase
./src/lib/database.ts:      .from('reviews')
./src/lib/database.ts:      .delete()
./src/lib/database.ts:      .eq('id', id);
./src/lib/database.ts:
./src/lib/database.ts:    if (error) {
./src/lib/database.ts:      return { error: handleDatabaseError(error, 'DELETE', 'reviews', { review_id: id }) };
./src/lib/database.ts:    }
./src/lib/database.ts:
./src/lib/database.ts:    return { error: null };
./src/lib/database.ts:  } catch (error) {
./src/lib/database.ts:    return { error: handleDatabaseError(error, 'DELETE', 'reviews', { review_id: id }) };
./src/lib/database.ts:  }
./src/lib/database.ts:}
./src/lib/database.ts:
./src/lib/database.ts:// Helper function to handle database errors
./src/lib/database.ts:const handleDatabaseError = async <T>(
./src/lib/database.ts:  error: any,
./src/lib/database.ts:  operation: DatabaseOperation,
./src/lib/database.ts:  table: TableName,
./src/lib/database.ts:  details?: Record<string, any>
./src/lib/database.ts:): Promise<DatabaseResult<T>> => {
./src/lib/database.ts:  const errorMessage = error?.message || error?.toString() || 'Unknown error';
./src/lib/database.ts:  
./src/lib/database.ts:  await dbLogError({
./src/lib/database.ts:    operation,
./src/lib/database.ts:    table,
./src/lib/database.ts:    error: new Error(errorMessage),
./src/lib/database.ts:    details,
./src/lib/database.ts:  });
./src/lib/database.ts:  
./src/lib/database.ts:  return {
./src/lib/database.ts:    data: null,
./src/lib/database.ts:    error: new Error(errorMessage),
./src/lib/database.ts:  };
./src/lib/database.ts:};
./src/lib/database.ts:
./src/lib/database.ts:// Update the error logging functions to use the correct operation type
./src/lib/database.ts:export const dbLogError = async (details: ErrorLogDetails) => {
./src/lib/database.ts:  const { operation, table, error, details: errorDetails, user_id } = details;
./src/lib/database.ts:  
./src/lib/database.ts:  try {
./src/lib/database.ts:    await supabase.from('error_logs').insert({
./src/lib/database.ts:      error_message: error.message,
./src/lib/database.ts:      error_code: operation,
./src/lib/database.ts:      metadata: errorDetails,
./src/lib/database.ts:      user_id,
./src/lib/database.ts:      error_stack: errorDetails?.stack as string
./src/lib/database.ts:    });
./src/lib/database.ts:  } catch (err) {
./src/lib/database.ts:    console.error('Failed to log error:', err);
./src/lib/database.ts:  }
./src/lib/database.ts:};
./src/lib/errorHandling.ts:import { supabase } from './supabaseClient';
./src/lib/errorHandling.ts:import type { Database } from '@/types/supabase';
./src/lib/errorHandling.ts:
./src/lib/errorHandling.ts:type ErrorLog = Database['public']['Tables']['error_logs']['Insert'];
./src/lib/errorHandling.ts:
./src/lib/errorHandling.ts:export const logError = async (details: ErrorLog) => {
./src/lib/errorHandling.ts:  try {
./src/lib/errorHandling.ts:    const { error } = await supabase.from('error_logs').insert([{
./src/lib/errorHandling.ts:      ...details,
./src/lib/errorHandling.ts:      created_at: new Date().toISOString()
./src/lib/errorHandling.ts:    }]);
./src/lib/errorHandling.ts:    
./src/lib/errorHandling.ts:    if (error) {
./src/lib/errorHandling.ts:      console.error('Error logging error:', error);
./src/lib/errorHandling.ts:      // Add fallback logging if needed
./src/lib/errorHandling.ts:    }
./src/lib/errorHandling.ts:  } catch (err) {
./src/lib/errorHandling.ts:    console.error('Failed to log error:', err);
./src/lib/errorHandling.ts:  }
./src/lib/errorHandling.ts:}; 
./src/lib/marketauxApi.ts:import { supabase } from './supabaseClient';
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:export interface MarketauxArticle {
./src/lib/marketauxApi.ts:  title: string;
./src/lib/marketauxApi.ts:  description: string;
./src/lib/marketauxApi.ts:  url: string;
./src/lib/marketauxApi.ts:  published_at: string;
./src/lib/marketauxApi.ts:  source: string;
./src/lib/marketauxApi.ts:  relevance_score?: number;
./src/lib/marketauxApi.ts:}
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:interface MarketauxResponse {
./src/lib/marketauxApi.ts:  meta?: {
./src/lib/marketauxApi.ts:    found: number;
./src/lib/marketauxApi.ts:    returned: number;
./src/lib/marketauxApi.ts:    limit: number;
./src/lib/marketauxApi.ts:  };
./src/lib/marketauxApi.ts:  data: {
./src/lib/marketauxApi.ts:    title: string;
./src/lib/marketauxApi.ts:    description: string;
./src/lib/marketauxApi.ts:    url: string;
./src/lib/marketauxApi.ts:    published_at: string;
./src/lib/marketauxApi.ts:    source: string;
./src/lib/marketauxApi.ts:    relevance_score?: number;
./src/lib/marketauxApi.ts:  }[];
./src/lib/marketauxApi.ts:}
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:/**
./src/lib/marketauxApi.ts: * Fetches news articles for a company from Marketaux API with persistent caching
./src/lib/marketauxApi.ts: */
./src/lib/marketauxApi.ts:export async function fetchCompanyNews(companyName: string, limit: number = 3): Promise<MarketauxArticle[]> {
./src/lib/marketauxApi.ts:  try {
./src/lib/marketauxApi.ts:    console.log(`Fetching news for ${companyName}...`);
./src/lib/marketauxApi.ts:    
./src/lib/marketauxApi.ts:    // First check cache
./src/lib/marketauxApi.ts:    const { data: cachedNews } = await supabase
./src/lib/marketauxApi.ts:      .from('company_news')
./src/lib/marketauxApi.ts:      .select('*')
./src/lib/marketauxApi.ts:      .eq('company_name', companyName)
./src/lib/marketauxApi.ts:      .order('relevance_score', { ascending: false })
./src/lib/marketauxApi.ts:      .limit(limit);
./src/lib/marketauxApi.ts:      
./src/lib/marketauxApi.ts:    // If we have cached results, return them
./src/lib/marketauxApi.ts:    if (cachedNews && cachedNews.length > 0) {
./src/lib/marketauxApi.ts:      console.log(`Found ${cachedNews.length} cached articles for ${companyName}`);
./src/lib/marketauxApi.ts:      return cachedNews.map(article => ({
./src/lib/marketauxApi.ts:        title: article.title,
./src/lib/marketauxApi.ts:        description: article.description,
./src/lib/marketauxApi.ts:        url: article.url,
./src/lib/marketauxApi.ts:        published_at: article.published_at,
./src/lib/marketauxApi.ts:        source: article.source,
./src/lib/marketauxApi.ts:        relevance_score: article.relevance_score
./src/lib/marketauxApi.ts:      }));
./src/lib/marketauxApi.ts:    }
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    // If no cache, fetch from Marketaux
./src/lib/marketauxApi.ts:    console.log('No cache found, fetching from Marketaux...');
./src/lib/marketauxApi.ts:    const response = await fetch(
./src/lib/marketauxApi.ts:      `https://api.marketaux.com/v1/news/all?` +
./src/lib/marketauxApi.ts:      new URLSearchParams({
./src/lib/marketauxApi.ts:        search: companyName,
./src/lib/marketauxApi.ts:        filter_entities: 'true',
./src/lib/marketauxApi.ts:        language: 'en',
./src/lib/marketauxApi.ts:        limit: limit.toString(),
./src/lib/marketauxApi.ts:        api_token: process.env.MARKETAUX_KEY || ''
./src/lib/marketauxApi.ts:      })
./src/lib/marketauxApi.ts:    );
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    if (!response.ok) {
./src/lib/marketauxApi.ts:      throw new Error(`Marketaux API error: ${response.status}`);
./src/lib/marketauxApi.ts:    }
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    const data = await response.json() as MarketauxResponse;
./src/lib/marketauxApi.ts:    
./src/lib/marketauxApi.ts:    if (!data.data || data.data.length === 0) {
./src/lib/marketauxApi.ts:      console.log('No articles found from Marketaux');
./src/lib/marketauxApi.ts:      return [];
./src/lib/marketauxApi.ts:    }
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    // Transform articles
./src/lib/marketauxApi.ts:    const articles = data.data.map(article => ({
./src/lib/marketauxApi.ts:      title: article.title,
./src/lib/marketauxApi.ts:      description: article.description,
./src/lib/marketauxApi.ts:      url: article.url,
./src/lib/marketauxApi.ts:      published_at: article.published_at,
./src/lib/marketauxApi.ts:      source: article.source,
./src/lib/marketauxApi.ts:      relevance_score: article.relevance_score
./src/lib/marketauxApi.ts:    }));
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    // Store in cache
./src/lib/marketauxApi.ts:    const { error: insertError } = await supabase
./src/lib/marketauxApi.ts:      .from('company_news')
./src/lib/marketauxApi.ts:      .upsert(
./src/lib/marketauxApi.ts:        articles.map(article => ({
./src/lib/marketauxApi.ts:          company_name: companyName,
./src/lib/marketauxApi.ts:          ...article,
./src/lib/marketauxApi.ts:          cached_at: new Date().toISOString()
./src/lib/marketauxApi.ts:        })),
./src/lib/marketauxApi.ts:        { onConflict: 'company_name,url' }
./src/lib/marketauxApi.ts:      );
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    if (insertError) {
./src/lib/marketauxApi.ts:      console.error('Error caching articles:', insertError);
./src/lib/marketauxApi.ts:    } else {
./src/lib/marketauxApi.ts:      console.log(`Cached ${articles.length} new articles for ${companyName}`);
./src/lib/marketauxApi.ts:    }
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:    return articles;
./src/lib/marketauxApi.ts:  } catch (error) {
./src/lib/marketauxApi.ts:    console.error('Error fetching company news:', error);
./src/lib/marketauxApi.ts:    return [];
./src/lib/marketauxApi.ts:  }
./src/lib/marketauxApi.ts:}
./src/lib/marketauxApi.ts:
./src/lib/marketauxApi.ts:/**
./src/lib/marketauxApi.ts: * Bulk fetch news for multiple companies
./src/lib/marketauxApi.ts: */
./src/lib/marketauxApi.ts:export async function fetchNewsForCompanies(
./src/lib/marketauxApi.ts:  companies: string[],
./src/lib/marketauxApi.ts:  limit: number = 3
./src/lib/marketauxApi.ts:): Promise<{ [company: string]: MarketauxArticle[] }> {
./src/lib/marketauxApi.ts:  const results: { [company: string]: MarketauxArticle[] } = {};
./src/lib/marketauxApi.ts:  
./src/lib/marketauxApi.ts:  for (const company of companies) {
./src/lib/marketauxApi.ts:    results[company] = await fetchCompanyNews(company, limit);
./src/lib/marketauxApi.ts:  }
./src/lib/marketauxApi.ts:  
./src/lib/marketauxApi.ts:  return results;
./src/lib/marketauxApi.ts:} 
./src/lib/schemas.ts:import { z } from 'zod';
./src/lib/schemas.ts:import type { CompanySize, EmploymentStatus, ReviewStatus, CompanyIndustry } from '@/types/database';
./src/lib/schemas.ts:
./src/lib/schemas.ts:// URL validation regex
./src/lib/schemas.ts:const URL_REGEX = /^(https?:\/\/)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*\/?$/;
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Enums
./src/lib/schemas.ts:export const employmentStatusEnum = z.enum(['Full-time', 'Part-time', 'Contract', 'Intern']) satisfies z.ZodType<EmploymentStatus>;
./src/lib/schemas.ts:export const reviewStatusEnum = z.enum(['pending', 'approved', 'rejected']) satisfies z.ZodType<ReviewStatus>;
./src/lib/schemas.ts:export const companySizeEnum = z.enum(['Small', 'Medium', 'Large', 'Enterprise', 'Startup']) satisfies z.ZodType<CompanySize>;
./src/lib/schemas.ts:export const rateLimitTypeEnum = z.enum(['ip', 'user']);
./src/lib/schemas.ts:
./src/lib/schemas.ts:// URL validation regex (matches our database constraint)
./src/lib/schemas.ts:const urlRegex = /^https?:\/\/([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/[a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=]*)?$/;
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Validation Messages
./src/lib/schemas.ts:export const ERROR_MESSAGES = {
./src/lib/schemas.ts:  required: 'This field is required',
./src/lib/schemas.ts:  email: 'Please enter a valid email address',
./src/lib/schemas.ts:  url: 'Please enter a valid website URL',
./src/lib/schemas.ts:  min: (field: string, length: number) => `${field} must be at least ${length} characters`,
./src/lib/schemas.ts:  max: (field: string, length: number) => `${field} must be less than ${length} characters`,
./src/lib/schemas.ts:  rating: 'Rating must be between 1 and 5 stars',
./src/lib/schemas.ts:  invalidEnum: (field: string, options: readonly string[]) => 
./src/lib/schemas.ts:    `${field} must be one of: ${options.join(', ')}`,
./src/lib/schemas.ts:  name: 'Company name must be between 2 and 100 characters',
./src/lib/schemas.ts:  website: 'Please enter a valid URL',
./src/lib/schemas.ts:  industry: 'Please select an industry',
./src/lib/schemas.ts:  location: 'Location must be between 2 and 150 characters',
./src/lib/schemas.ts:  title: 'Title must be between 3 and 255 characters',
./src/lib/schemas.ts:  content: 'Review must be at least 10 characters',
./src/lib/schemas.ts:  position: 'Position must be between 2 and 255 characters'
./src/lib/schemas.ts:};
./src/lib/schemas.ts:
./src/lib/schemas.ts:export const urlSchema = z.string().url().or(z.literal(''));
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Company schema
./src/lib/schemas.ts:export const companySchema = z.object({
./src/lib/schemas.ts:  name: z.string().min(2, 'Company name must be at least 2 characters'),
./src/lib/schemas.ts:  industry: z.enum(['Technology', 'Healthcare', 'Education', 'Finance', 'Manufacturing', 'Retail', 'Other']),
./src/lib/schemas.ts:  location: z.string().min(2, 'Location must be at least 2 characters'),
./src/lib/schemas.ts:  website: urlSchema,
./src/lib/schemas.ts:  logo_url: urlSchema,
./src/lib/schemas.ts:  description: z.string().optional(),
./src/lib/schemas.ts:  size: z.enum(['Small', 'Medium', 'Large', 'Enterprise', 'Startup']).optional(),
./src/lib/schemas.ts:  ceo: z.string().optional(),
./src/lib/schemas.ts:  company_values: z.string().optional(),
./src/lib/schemas.ts:  benefits: z.string().optional()
./src/lib/schemas.ts:});
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Review schema
./src/lib/schemas.ts:export const reviewSchema = z.object({
./src/lib/schemas.ts:  title: z.string().min(3, 'Title must be at least 3 characters'),
./src/lib/schemas.ts:  rating: z.number().min(1).max(5),
./src/lib/schemas.ts:  pros: z.string().min(10, 'Pros must be at least 10 characters'),
./src/lib/schemas.ts:  cons: z.string().min(10, 'Cons must be at least 10 characters'),
./src/lib/schemas.ts:  position: z.string().optional(),
./src/lib/schemas.ts:  employment_status: z.enum(['Full-time', 'Part-time', 'Contract', 'Intern']).optional(),
./src/lib/schemas.ts:  is_current_employee: z.boolean().optional(),
./src/lib/schemas.ts:  company_id: z.number()
./src/lib/schemas.ts:});
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Validation Utilities
./src/lib/schemas.ts:export const validateForm = async <T extends z.ZodSchema>(
./src/lib/schemas.ts:  schema: T,
./src/lib/schemas.ts:  data: unknown
./src/lib/schemas.ts:): Promise<{ success: boolean; data?: z.infer<T>; errors?: z.ZodError }> => {
./src/lib/schemas.ts:  try {
./src/lib/schemas.ts:    const validData = await schema.parseAsync(data);
./src/lib/schemas.ts:    return { success: true, data: validData };
./src/lib/schemas.ts:  } catch (error) {
./src/lib/schemas.ts:    if (error instanceof z.ZodError) {
./src/lib/schemas.ts:      return { success: false, errors: error };
./src/lib/schemas.ts:    }
./src/lib/schemas.ts:    throw error;
./src/lib/schemas.ts:  }
./src/lib/schemas.ts:};
./src/lib/schemas.ts:
./src/lib/schemas.ts:// Form data types
./src/lib/schemas.ts:export type CompanyFormData = z.infer<typeof companySchema>;
./src/lib/schemas.ts:export type ReviewFormData = z.infer<typeof reviewSchema>;
./src/lib/supabase-server.ts:import { cookies } from 'next/headers'
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr'
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:import type { Database } from '@/types/supabase'
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:export { createServerClient }
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:export const createServerSupabase = async () => {
./src/lib/supabase-server.ts:  return createServerClient<Database>(
./src/lib/supabase-server.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/lib/supabase-server.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/lib/supabase-server.ts:    {
./src/lib/supabase-server.ts:      cookies: {
./src/lib/supabase-server.ts:        async get(name: string) {
./src/lib/supabase-server.ts:          const cookieStore = await cookies()
./src/lib/supabase-server.ts:          return cookieStore.get(name)?.value
./src/lib/supabase-server.ts:        },
./src/lib/supabase-server.ts:        async set(name: string, value: string, options: CookieOptions) {
./src/lib/supabase-server.ts:          const cookieStore = await cookies()
./src/lib/supabase-server.ts:          cookieStore.set({ name, value, ...options })
./src/lib/supabase-server.ts:        },
./src/lib/supabase-server.ts:        async remove(name: string, options: CookieOptions) {
./src/lib/supabase-server.ts:          const cookieStore = await cookies()
./src/lib/supabase-server.ts:          cookieStore.delete({ name, ...options })
./src/lib/supabase-server.ts:        }
./src/lib/supabase-server.ts:      }
./src/lib/supabase-server.ts:    }
./src/lib/supabase-server.ts:  )
./src/lib/supabase-server.ts:}
./src/lib/supabase-server.ts:
./src/lib/supabase-server.ts:// Server-side database queries
./src/lib/supabase-server.ts:export const serverQuery = {
./src/lib/supabase-server.ts:  companies: {
./src/lib/supabase-server.ts:    getAll: async () => {
./src/lib/supabase-server.ts:      const supabase = await createServerSupabase()
./src/lib/supabase-server.ts:      return supabase
./src/lib/supabase-server.ts:        .from('companies')
./src/lib/supabase-server.ts:        .select('*')
./src/lib/supabase-server.ts:        .order('created_at', { ascending: false })
./src/lib/supabase-server.ts:    },
./src/lib/supabase-server.ts:    getById: async (id: string) => {
./src/lib/supabase-server.ts:      const supabase = await createServerSupabase()
./src/lib/supabase-server.ts:      return supabase
./src/lib/supabase-server.ts:        .from('companies')
./src/lib/supabase-server.ts:        .select('*')
./src/lib/supabase-server.ts:        .eq('id', parseInt(id, 10))
./src/lib/supabase-server.ts:        .single()
./src/lib/supabase-server.ts:    }
./src/lib/supabase-server.ts:  },
./src/lib/supabase-server.ts:  reviews: {
./src/lib/supabase-server.ts:    getAll: async () => {
./src/lib/supabase-server.ts:      const supabase = await createServerSupabase()
./src/lib/supabase-server.ts:      return supabase
./src/lib/supabase-server.ts:        .from('reviews')
./src/lib/supabase-server.ts:        .select('*, companies(*)')
./src/lib/supabase-server.ts:        .order('created_at', { ascending: false })
./src/lib/supabase-server.ts:    },
./src/lib/supabase-server.ts:    getPending: async () => {
./src/lib/supabase-server.ts:      const supabase = await createServerSupabase()
./src/lib/supabase-server.ts:      return supabase
./src/lib/supabase-server.ts:        .from('reviews')
./src/lib/supabase-server.ts:        .select('*, companies(*)')
./src/lib/supabase-server.ts:        .eq('status', 'pending')
./src/lib/supabase-server.ts:        .order('created_at', { ascending: false })
./src/lib/supabase-server.ts:    }
./src/lib/supabase-server.ts:  }
./src/lib/supabase-server.ts:}
./src/lib/supabaseClient.ts:import { createClient as createSupabaseClient } from '@supabase/supabase-js'
./src/lib/supabaseClient.ts:import type { Database } from '@/types/supabase'
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:import { CompanyFormData, ReviewFormData } from './schemas';
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';
./src/lib/supabaseClient.ts:const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:// Initialize the Supabase client directly
./src/lib/supabaseClient.ts:export const supabase = createSupabaseClient(supabaseUrl, supabaseAnonKey, {
./src/lib/supabaseClient.ts:  global: {
./src/lib/supabaseClient.ts:    fetch: (input, init) => fetch(input, { ...init, next: { revalidate: 3600 } })
./src/lib/supabaseClient.ts:  }
./src/lib/supabaseClient.ts:})
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:export const handleSupabaseError = (error: unknown): string => {
./src/lib/supabaseClient.ts:  if (error instanceof Error) return error.message;
./src/lib/supabaseClient.ts:  if (typeof error === 'string') return error;
./src/lib/supabaseClient.ts:  return 'An unknown error occurred';
./src/lib/supabaseClient.ts:};
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:// Type-safe database queries
./src/lib/supabaseClient.ts:export const dbQuery = {
./src/lib/supabaseClient.ts:  companies: {
./src/lib/supabaseClient.ts:    create: async (data: Database['public']['Tables']['companies']['Insert'], userId: string) => {
./src/lib/supabaseClient.ts:      return supabase
./src/lib/supabaseClient.ts:        .from('companies')
./src/lib/supabaseClient.ts:        .insert({
./src/lib/supabaseClient.ts:          ...data,
./src/lib/supabaseClient.ts:          created_by: userId,
./src/lib/supabaseClient.ts:          created_at: new Date().toISOString(),
./src/lib/supabaseClient.ts:          updated_at: new Date().toISOString()
./src/lib/supabaseClient.ts:        })
./src/lib/supabaseClient.ts:        .select()
./src/lib/supabaseClient.ts:        .single()
./src/lib/supabaseClient.ts:    },
./src/lib/supabaseClient.ts:    update: async (id: number, data: Database['public']['Tables']['companies']['Update']) => {
./src/lib/supabaseClient.ts:      return supabase
./src/lib/supabaseClient.ts:        .from('companies')
./src/lib/supabaseClient.ts:        .update({
./src/lib/supabaseClient.ts:          ...data,
./src/lib/supabaseClient.ts:          updated_at: new Date().toISOString()
./src/lib/supabaseClient.ts:        })
./src/lib/supabaseClient.ts:        .eq('id', id)
./src/lib/supabaseClient.ts:    }
./src/lib/supabaseClient.ts:  },
./src/lib/supabaseClient.ts:  reviews: {
./src/lib/supabaseClient.ts:    create: async (data: Database['public']['Tables']['reviews']['Insert']) => {
./src/lib/supabaseClient.ts:      return supabase
./src/lib/supabaseClient.ts:        .from('reviews')
./src/lib/supabaseClient.ts:        .insert(data)
./src/lib/supabaseClient.ts:        .select()
./src/lib/supabaseClient.ts:        .single()
./src/lib/supabaseClient.ts:    },
./src/lib/supabaseClient.ts:    update: async (id: number, data: Database['public']['Tables']['reviews']['Update'], userId: string) => {
./src/lib/supabaseClient.ts:      return supabase
./src/lib/supabaseClient.ts:        .from('reviews')
./src/lib/supabaseClient.ts:        .update(data)
./src/lib/supabaseClient.ts:        .eq('id', id)
./src/lib/supabaseClient.ts:        .eq('reviewer_id', userId) // Ensure user can only update their own reviews
./src/lib/supabaseClient.ts:    }
./src/lib/supabaseClient.ts:  }
./src/lib/supabaseClient.ts:};
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:export const createClient = () => {
./src/lib/supabaseClient.ts:  return createSupabaseClient(supabaseUrl, supabaseAnonKey);
./src/lib/supabaseClient.ts:};
./src/lib/supabaseClient.ts:
./src/lib/supabaseClient.ts:export default createClient;
./src/lib/supabaseServer.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr';
./src/lib/supabaseServer.ts:import { cookies } from 'next/headers';
./src/lib/supabaseServer.ts:
./src/lib/supabaseServer.ts:import type { Database } from '@/types/supabase';
./src/lib/supabaseServer.ts:
./src/lib/supabaseServer.ts:const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
./src/lib/supabaseServer.ts:const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
./src/lib/supabaseServer.ts:
./src/lib/supabaseServer.ts:if (!supabaseUrl || !supabaseAnonKey) {
./src/lib/supabaseServer.ts:  throw new Error(
./src/lib/supabaseServer.ts:    'Missing environment variables: NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY must be defined'
./src/lib/supabaseServer.ts:  );
./src/lib/supabaseServer.ts:}
./src/lib/supabaseServer.ts:
./src/lib/supabaseServer.ts:export function createServerSupabaseClient() {
./src/lib/supabaseServer.ts:  const cookieStore = cookies();
./src/lib/supabaseServer.ts:
./src/lib/supabaseServer.ts:  return createServerClient<Database>(
./src/lib/supabaseServer.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/lib/supabaseServer.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/lib/supabaseServer.ts:    {
./src/lib/supabaseServer.ts:      cookies: {
./src/lib/supabaseServer.ts:        get(name: string) {
./src/lib/supabaseServer.ts:          return cookieStore.get(name)?.value;
./src/lib/supabaseServer.ts:        },
./src/lib/supabaseServer.ts:        set(name: string, value: string, options: CookieOptions) {
./src/lib/supabaseServer.ts:          try {
./src/lib/supabaseServer.ts:            cookieStore.set({ name, value, ...options });
./src/lib/supabaseServer.ts:          } catch (error) {
./src/lib/supabaseServer.ts:            // Handle cookies in edge functions
./src/lib/supabaseServer.ts:          }
./src/lib/supabaseServer.ts:        },
./src/lib/supabaseServer.ts:        remove(name: string, options: CookieOptions) {
./src/lib/supabaseServer.ts:          try {
./src/lib/supabaseServer.ts:            cookieStore.set({ name, value: '', ...options });
./src/lib/supabaseServer.ts:          } catch (error) {
./src/lib/supabaseServer.ts:            // Handle cookies in edge functions
./src/lib/supabaseServer.ts:          }
./src/lib/supabaseServer.ts:        },
./src/lib/supabaseServer.ts:      },
./src/lib/supabaseServer.ts:    }
./src/lib/supabaseServer.ts:  );
./src/lib/supabaseServer.ts:} 
./src/lib/utils.ts:import { type ClassValue, clsx } from 'clsx';
./src/lib/utils.ts:import { twMerge } from 'tailwind-merge';
./src/lib/utils.ts:
./src/lib/utils.ts:export function cn(...inputs: ClassValue[]) {
./src/lib/utils.ts:  return twMerge(clsx(inputs));
./src/lib/utils.ts:}
./src/lib/utils.ts:
./src/lib/utils.ts:export function formatDate(date: string | Date): string {
./src/lib/utils.ts:  const d = new Date(date);
./src/lib/utils.ts:  return d.toLocaleDateString();
./src/lib/utils.ts:}
./src/lib/validation.ts:import { z } from 'zod'
./src/lib/validation.ts:
./src/lib/validation.ts:export const CompanyReviewSchema = z.object({
./src/lib/validation.ts:  rating: z.number()
./src/lib/validation.ts:    .min(1, 'Rating must be at least 1')
./src/lib/validation.ts:    .max(5, 'Rating cannot exceed 5'),
./src/lib/validation.ts:  comment: z.string()
./src/lib/validation.ts:    .min(10, 'Comment must be at least 10 characters')
./src/lib/validation.ts:    .max(500, 'Comment cannot exceed 500 characters')
./src/lib/validation.ts:    .trim(),
./src/lib/validation.ts:  companyId: z.number().positive('Company ID is required'),
./src/lib/validation.ts:  reviewerId: z.string().uuid('Invalid reviewer ID')
./src/lib/validation.ts:})
./src/lib/validation.ts:
./src/lib/validation.ts:export type CompanyReview = z.infer<typeof CompanyReviewSchema>
./src/lib/validation.ts:
./src/lib/validation.ts:// Add validation helper
./src/lib/validation.ts:export const validateReview = (data: unknown): CompanyReview => {
./src/lib/validation.ts:  return CompanyReviewSchema.parse(data)
./src/lib/validation.ts:} 
./src/lib/validations/review.ts:import * as z from 'zod';
./src/lib/validations/review.ts:import type { Database } from '@/types/supabase';
./src/lib/validations/review.ts:
./src/lib/validations/review.ts:type Review = Database['public']['Tables']['reviews']['Row'];
./src/lib/validations/review.ts:
./src/lib/validations/review.ts:export const reviewSchema = z.object({
./src/lib/validations/review.ts:  rating: z.number().min(1).max(5),
./src/lib/validations/review.ts:  title: z.string().min(3).max(255),
./src/lib/validations/review.ts:  content: z.string().min(10),
./src/lib/validations/review.ts:  pros: z.string().min(3).optional(),
./src/lib/validations/review.ts:  cons: z.string().min(3).optional(),
./src/lib/validations/review.ts:  position: z.string().min(2).max(255),
./src/lib/validations/review.ts:  employment_status: z.enum(['Full-time', 'Part-time', 'Contract', 'Intern']),
./src/lib/validations/review.ts:  is_current_employee: z.boolean(),
./src/lib/validations/review.ts:  company_id: z.number()
./src/lib/validations/review.ts:});
./src/lib/validations/review.ts:
./src/lib/validations/review.ts:export type ReviewFormData = z.infer<typeof reviewSchema>;
./src/middleware.ts:import { NextResponse } from 'next/server';
./src/middleware.ts:import type { NextRequest } from 'next/server';
./src/middleware.ts:
./src/middleware.ts:
./src/middleware.ts:import { createServerClient, type CookieOptions } from '@supabase/ssr';
./src/middleware.ts:
./src/middleware.ts:/**
./src/middleware.ts: * src/middleware.ts
./src/middleware.ts: * Next.js middleware for route protection and authentication
./src/middleware.ts: * Handles route protection and role-based access using Supabase user metadata
./src/middleware.ts: */
./src/middleware.ts:
./src/middleware.ts:
./src/middleware.ts:
./src/middleware.ts:
./src/middleware.ts:export async function middleware(req: NextRequest) {
./src/middleware.ts:  const res = NextResponse.next();
./src/middleware.ts:  
./src/middleware.ts:  const supabase = createServerClient(
./src/middleware.ts:    process.env.NEXT_PUBLIC_SUPABASE_URL!,
./src/middleware.ts:    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
./src/middleware.ts:    {
./src/middleware.ts:      cookies: {
./src/middleware.ts:        get(name: string) {
./src/middleware.ts:          return req.cookies.get(name)?.value;
./src/middleware.ts:        },
./src/middleware.ts:        set(name: string, value: string, options: CookieOptions) {
./src/middleware.ts:          res.cookies.set({
./src/middleware.ts:            name,
./src/middleware.ts:            value,
./src/middleware.ts:            ...options,
./src/middleware.ts:          });
./src/middleware.ts:        },
./src/middleware.ts:        remove(name: string, options: CookieOptions) {
./src/middleware.ts:          res.cookies.set({
./src/middleware.ts:            name,
./src/middleware.ts:            value: '',
./src/middleware.ts:            ...options,
./src/middleware.ts:          });
./src/middleware.ts:        },
./src/middleware.ts:      },
./src/middleware.ts:    }
./src/middleware.ts:  );
./src/middleware.ts:
./src/middleware.ts:  const {
./src/middleware.ts:    data: { session },
./src/middleware.ts:  } = await supabase.auth.getSession();
./src/middleware.ts:
./src/middleware.ts:  // Protected routes that require authentication
./src/middleware.ts:  const protectedPaths = [
./src/middleware.ts:    '/dashboard',
./src/middleware.ts:    '/profile',
./src/middleware.ts:    '/settings',
./src/middleware.ts:    '/admin',
./src/middleware.ts:    '/api/protected',
./src/middleware.ts:  ];
./src/middleware.ts:
./src/middleware.ts:  // Routes that require admin role
./src/middleware.ts:  const adminPaths = [
./src/middleware.ts:    '/admin/users',
./src/middleware.ts:    '/admin/reviews',
./src/middleware.ts:    '/admin/companies',
./src/middleware.ts:    '/admin/analytics'
./src/middleware.ts:  ];
./src/middleware.ts:  
./src/middleware.ts:  const isProtectedPath = protectedPaths.some(path => req.nextUrl.pathname.startsWith(path));
./src/middleware.ts:  const isAdminPath = adminPaths.some(path => req.nextUrl.pathname.startsWith(path));
./src/middleware.ts:
./src/middleware.ts:  // Check authentication for protected routes
./src/middleware.ts:  if (isProtectedPath || isAdminPath) {
./src/middleware.ts:    if (!session) {
./src/middleware.ts:      const redirectUrl = new URL('/auth/login', req.url);
./src/middleware.ts:      redirectUrl.searchParams.set('redirectTo', req.nextUrl.pathname);
./src/middleware.ts:      return NextResponse.redirect(redirectUrl);
./src/middleware.ts:    }
./src/middleware.ts:    // Check admin role for admin routes
./src/middleware.ts:    if (isAdminPath && session.user.user_metadata?.role !== 'admin') {
./src/middleware.ts:      return NextResponse.redirect(new URL('/', req.url));
./src/middleware.ts:    }
./src/middleware.ts:  }
./src/middleware.ts:
./src/middleware.ts:  return res;
./src/middleware.ts:}
./src/middleware.ts:
./src/middleware.ts:export const config = {
./src/middleware.ts:  matcher: [
./src/middleware.ts:    '/reviews/new/:path*',
./src/middleware.ts:    '/reviews/edit/:path*',
./src/middleware.ts:    '/profile/:path*',
./src/middleware.ts:    '/account/:path*',
./src/middleware.ts:    '/companies/new/:path*',
./src/middleware.ts:    '/companies/edit/:path*',
./src/middleware.ts:    '/admin/:path*'
./src/middleware.ts:  ],
./src/middleware.ts:};
./src/pages/_document.tsx:import { Html, Head, Main, NextScript } from 'next/document'
./src/pages/_document.tsx:
./src/pages/_document.tsx:
./src/pages/_document.tsx:export default function Document() {
./src/pages/_document.tsx:  return (
./src/pages/_document.tsx:    <Html lang="en">
./src/pages/_document.tsx:      <Head />
./src/pages/_document.tsx:      <body>
./src/pages/_document.tsx:        <Main />
./src/pages/_document.tsx:        <NextScript />
./src/pages/_document.tsx:      </body>
./src/pages/_document.tsx:    </Html>
./src/pages/_document.tsx:  )
./src/pages/_document.tsx:}
./src/schema.sql:| table_name   | column_name         | data_type                | is_nullable | column_default               |
./src/schema.sql:| ------------ | ------------------- | ------------------------ | ----------- | ---------------------------- |
./src/schema.sql:| companies    | id                  | bigint                   | NO          |                              |
./src/schema.sql:| companies    | name                | character varying        | NO          |                              |
./src/schema.sql:| companies    | description         | text                     | YES         |                              |
./src/schema.sql:| companies    | industry            | character varying        | YES         |                              |
./src/schema.sql:| companies    | location            | character varying        | YES         |                              |
./src/schema.sql:| companies    | website             | character varying        | YES         |                              |
./src/schema.sql:| companies    | logo_url            | text                     | YES         |                              |
./src/schema.sql:| companies    | verification_status | character varying        | YES         | 'pending'::character varying |
./src/schema.sql:| companies    | verified            | boolean                  | YES         | false                        |
./src/schema.sql:| companies    | created_by          | uuid                     | YES         |                              |
./src/schema.sql:| companies    | created_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| companies    | updated_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| company_news | id                  | uuid                     | NO          | uuid_generate_v4()           |
./src/schema.sql:| company_news | company_name        | text                     | NO          |                              |
./src/schema.sql:| company_news | title               | text                     | NO          |                              |
./src/schema.sql:| company_news | description         | text                     | YES         |                              |
./src/schema.sql:| company_news | url                 | text                     | YES         |                              |
./src/schema.sql:| company_news | published_at        | timestamp with time zone | YES         |                              |
./src/schema.sql:| company_news | source              | text                     | YES         |                              |
./src/schema.sql:| company_news | relevance_score     | double precision         | YES         |                              |
./src/schema.sql:| company_news | cached_at           | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| profiles     | id                  | uuid                     | NO          |                              |
./src/schema.sql:| profiles     | created_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| profiles     | updated_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| profiles     | username            | text                     | YES         |                              |
./src/schema.sql:| profiles     | avatar_url          | text                     | YES         |                              |
./src/schema.sql:| profiles     | website             | text                     | YES         |                              |
./src/schema.sql:| reviews      | id                  | bigint                   | NO          |                              |
./src/schema.sql:| reviews      | company_id          | bigint                   | YES         |                              |
./src/schema.sql:| reviews      | user_id             | uuid                     | YES         |                              |
./src/schema.sql:| reviews      | title               | character varying        | NO          |                              |
./src/schema.sql:| reviews      | rating              | integer                  | YES         |                              |
./src/schema.sql:| reviews      | pros                | text                     | NO          |                              |
./src/schema.sql:| reviews      | cons                | text                     | NO          |                              |
./src/schema.sql:| reviews      | employment_status   | character varying        | YES         |                              |
./src/schema.sql:| reviews      | position            | character varying        | YES         |                              |
./src/schema.sql:| reviews      | is_current_employee | boolean                  | YES         |                              |
./src/schema.sql:| reviews      | reviewer_name       | character varying        | YES         |                              |
./src/schema.sql:| reviews      | reviewer_email      | character varying        | YES         |                              |
./src/schema.sql:| reviews      | status              | character varying        | YES         | 'pending'::character varying |
./src/schema.sql:| reviews      | created_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| reviews      | updated_at          | timestamp with time zone | YES         | now()                        |
./src/schema.sql:| reviews      | reviewer_id         | uuid                     | YES         |                              |
./src/styles/globals.css::root {
./src/styles/globals.css:  --radius: 0.5rem;
./src/styles/globals.css:  --primary: 220, 98%, 61%;
./src/styles/globals.css:  --primary-foreground: 0, 0%, 100%;
./src/styles/globals.css:  --secondary: 215, 100%, 72%;
./src/styles/globals.css:  --secondary-foreground: 0, 0%, 100%;
./src/styles/globals.css:  --destructive: 0, 84%, 67%;
./src/styles/globals.css:  --destructive-foreground: 0, 0%, 100%;
./src/styles/globals.css:  --muted: 220, 15%, 55%;
./src/styles/globals.css:  --muted-foreground: 0, 0%, 100%;
./src/styles/globals.css:  --accent: 15, 100%, 70%;
./src/styles/globals.css:  --accent-foreground: 0, 0%, 100%;
./src/styles/globals.css:  --popover: 0, 0%, 100%;
./src/styles/globals.css:  --popover-foreground: 0, 0%, 0%;
./src/styles/globals.css:  --card: 0, 0%, 100%;
./src/styles/globals.css:  --card-foreground: 0, 0%, 0%;
./src/styles/globals.css:  /* Add other variables as needed */
./src/styles/globals.css:}
./src/styles/globals.css:
./src/styles/globals.css:/* Include Tailwind directives */
./src/styles/globals.css:@tailwind base;
./src/styles/globals.css:@tailwind components;
./src/styles/globals.css:@tailwind utilities; 
./src/tests/openrouter-test.ts:import dotenv from 'dotenv';
./src/tests/openrouter-test.ts:import axios from 'axios';
./src/tests/openrouter-test.ts:import { parseStringPromise } from 'xml2js';
./src/tests/openrouter-test.ts:dotenv.config();
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:async function fetchRSSFeed(url: string) {
./src/tests/openrouter-test.ts:  try {
./src/tests/openrouter-test.ts:    const response = await axios.get(url);
./src/tests/openrouter-test.ts:    const result = await parseStringPromise(response.data);
./src/tests/openrouter-test.ts:    return result.rss.channel[0].item.slice(0, 10); // Get top 10 articles
./src/tests/openrouter-test.ts:  } catch (error) {
./src/tests/openrouter-test.ts:    console.error(`Error fetching RSS feed from ${url}:`, error);
./src/tests/openrouter-test.ts:    return [];
./src/tests/openrouter-test.ts:  }
./src/tests/openrouter-test.ts:}
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:async function fetchTechNews() {
./src/tests/openrouter-test.ts:  try {
./src/tests/openrouter-test.ts:    // Using TechCrunch's AI RSS feed
./src/tests/openrouter-test.ts:    const techcrunchNews = await fetchRSSFeed('https://techcrunch.com/tag/artificial-intelligence/feed/');
./src/tests/openrouter-test.ts:    
./src/tests/openrouter-test.ts:    // Format the news articles
./src/tests/openrouter-test.ts:    const articles = techcrunchNews.map((item: any) => ({
./src/tests/openrouter-test.ts:      title: item.title[0],
./src/tests/openrouter-test.ts:      description: item.description[0].replace(/<[^>]*>/g, ''), // Remove HTML tags
./src/tests/openrouter-test.ts:      link: item.link[0],
./src/tests/openrouter-test.ts:      pubDate: item.pubDate[0]
./src/tests/openrouter-test.ts:    }));
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:    return articles;
./src/tests/openrouter-test.ts:  } catch (error) {
./src/tests/openrouter-test.ts:    console.error('Error fetching tech news:', error);
./src/tests/openrouter-test.ts:    return [];
./src/tests/openrouter-test.ts:  }
./src/tests/openrouter-test.ts:}
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:async function displayTechNews() {
./src/tests/openrouter-test.ts:  try {
./src/tests/openrouter-test.ts:    console.log('Fetching recent AI news from TechCrunch...\n');
./src/tests/openrouter-test.ts:    const newsArticles = await fetchTechNews();
./src/tests/openrouter-test.ts:    
./src/tests/openrouter-test.ts:    if (newsArticles.length === 0) {
./src/tests/openrouter-test.ts:      console.log('No news articles found. There might be an issue with the RSS feed.');
./src/tests/openrouter-test.ts:      return;
./src/tests/openrouter-test.ts:    }
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:    console.log('Recent AI News Articles from TechCrunch:');
./src/tests/openrouter-test.ts:    console.log('--------------------------------------');
./src/tests/openrouter-test.ts:    newsArticles.forEach((article: any, index: number) => {
./src/tests/openrouter-test.ts:      console.log(`${index + 1}. ${article.title}`);
./src/tests/openrouter-test.ts:      console.log(`   Published: ${article.pubDate}`);
./src/tests/openrouter-test.ts:      console.log(`   Summary: ${article.description}`);
./src/tests/openrouter-test.ts:      console.log(`   Link: ${article.link}\n`);
./src/tests/openrouter-test.ts:    });
./src/tests/openrouter-test.ts:    
./src/tests/openrouter-test.ts:    return newsArticles;
./src/tests/openrouter-test.ts:  } catch (error) {
./src/tests/openrouter-test.ts:    console.error('Error fetching news:', error);
./src/tests/openrouter-test.ts:    if (error instanceof Error) {
./src/tests/openrouter-test.ts:      console.error('Error details:', error.message);
./src/tests/openrouter-test.ts:    }
./src/tests/openrouter-test.ts:    return [];
./src/tests/openrouter-test.ts:  }
./src/tests/openrouter-test.ts:}
./src/tests/openrouter-test.ts:
./src/tests/openrouter-test.ts:// Run the news fetcher
./src/tests/openrouter-test.ts:displayTechNews(); 
./src/types/auth.ts:import { User, Session } from '@supabase/supabase-js';
./src/types/auth.ts:
./src/types/auth.ts:
./src/types/auth.ts:export interface AuthState {
./src/types/auth.ts:  user: User | null;
./src/types/auth.ts:  isLoading: boolean;
./src/types/auth.ts:  error: AuthError | null;
./src/types/auth.ts:}
./src/types/auth.ts:
./src/types/auth.ts:export interface AuthError {
./src/types/auth.ts:  message: string;
./src/types/auth.ts:  status: number;
./src/types/auth.ts:}
./src/types/auth.ts:
./src/types/auth.ts:export interface AuthResponse {
./src/types/auth.ts:  data: {
./src/types/auth.ts:    user: User | null;
./src/types/auth.ts:    session: Session | null;
./src/types/auth.ts:  } | null;
./src/types/auth.ts:  error: AuthError | null;
./src/types/auth.ts:}
./src/types/database.ts:import type { PostgrestError } from '@supabase/supabase-js';
./src/types/database.ts:
./src/types/database.ts:// Enums
./src/types/database.ts:export type CompanyIndustry = 'Technology' | 'Healthcare' | 'Education' | 'Finance' | 'Manufacturing' | 'Retail' | 'Other';
./src/types/database.ts:export type CompanySize = 'Small' | 'Medium' | 'Large' | 'Enterprise' | 'Startup';
./src/types/database.ts:export type VerificationStatus = 'pending' | 'rejected' | 'verified';
./src/types/database.ts:export type EmploymentStatus = 'Full-time' | 'Part-time' | 'Contract' | 'Intern';
./src/types/database.ts:export type ReviewStatus = 'pending' | 'approved' | 'rejected';
./src/types/database.ts:export type RateLimitType = 'ip' | 'user';
./src/types/database.ts:export type DatabaseOperation = 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'UPSERT' | 'RPC';
./src/types/database.ts:
./src/types/database.ts:// Database schema
./src/types/database.ts:export interface Database {
./src/types/database.ts:  public: {
./src/types/database.ts:    Tables: {
./src/types/database.ts:      companies: {
./src/types/database.ts:        Row: {
./src/types/database.ts:          id: number;
./src/types/database.ts:          name: string;
./src/types/database.ts:          industry: CompanyIndustry | null;
./src/types/database.ts:          location: string | null;
./src/types/database.ts:          website: string | null;
./src/types/database.ts:          logo_url: string | null;
./src/types/database.ts:          description: string | null;
./src/types/database.ts:          size: CompanySize | null;
./src/types/database.ts:          ceo: string | null;
./src/types/database.ts:          company_values: string | null;
./src/types/database.ts:          benefits: string | null;
./src/types/database.ts:          created_at: string | null;
./src/types/database.ts:          created_by: string | null;
./src/types/database.ts:          updated_at: string | null;
./src/types/database.ts:          verification_status: VerificationStatus | null;
./src/types/database.ts:          verified: boolean | null;
./src/types/database.ts:        };
./src/types/database.ts:        Insert: Omit<Database['public']['Tables']['companies']['Row'], 'id'>;
./src/types/database.ts:        Update: Partial<Database['public']['Tables']['companies']['Row']>;
./src/types/database.ts:        Relationships: [];
./src/types/database.ts:      };
./src/types/database.ts:      reviews: {
./src/types/database.ts:        Row: {
./src/types/database.ts:          id: number;
./src/types/database.ts:          company_id: number | null;
./src/types/database.ts:          user_id: string | null;
./src/types/database.ts:          rating: number;
./src/types/database.ts:          title: string;
./src/types/database.ts:          pros: string;
./src/types/database.ts:          cons: string;
./src/types/database.ts:          position: string | null;
./src/types/database.ts:          employment_status: EmploymentStatus | null;
./src/types/database.ts:          is_current_employee: boolean | null;
./src/types/database.ts:          created_at: string | null;
./src/types/database.ts:          updated_at: string | null;
./src/types/database.ts:          content: string | null;
./src/types/database.ts:        };
./src/types/database.ts:        Insert: Omit<Database['public']['Tables']['reviews']['Row'], 'id'>;
./src/types/database.ts:        Update: Partial<Database['public']['Tables']['reviews']['Row']>;
./src/types/database.ts:        Relationships: [
./src/types/database.ts:          {
./src/types/database.ts:            foreignKeyName: 'reviews_company_id_fkey';
./src/types/database.ts:            columns: ['company_id'];
./src/types/database.ts:            referencedRelation: 'companies';
./src/types/database.ts:            referencedColumns: ['id'];
./src/types/database.ts:          }
./src/types/database.ts:        ];
./src/types/database.ts:      };
./src/types/database.ts:      review_likes: {
./src/types/database.ts:        Row: {
./src/types/database.ts:          id: number;
./src/types/database.ts:          review_id: number;
./src/types/database.ts:          user_id: string;
./src/types/database.ts:          created_at: string;
./src/types/database.ts:        };
./src/types/database.ts:        Insert: Omit<Database['public']['Tables']['review_likes']['Row'], 'id' | 'created_at'>;
./src/types/database.ts:        Update: Partial<Database['public']['Tables']['review_likes']['Row']>;
./src/types/database.ts:        Relationships: [
./src/types/database.ts:          {
./src/types/database.ts:            foreignKeyName: 'review_likes_review_id_fkey';
./src/types/database.ts:            columns: ['review_id'];
./src/types/database.ts:            referencedRelation: 'reviews';
./src/types/database.ts:            referencedColumns: ['id'];
./src/types/database.ts:          }
./src/types/database.ts:        ];
./src/types/database.ts:      };
./src/types/database.ts:      profiles: {
./src/types/database.ts:        Row: {
./src/types/database.ts:          id: string;
./src/types/database.ts:          email: string | null;
./src/types/database.ts:          full_name: string | null;
./src/types/database.ts:          avatar_url: string | null;
./src/types/database.ts:          created_at: string | null;
./src/types/database.ts:          updated_at: string | null;
./src/types/database.ts:        };
./src/types/database.ts:        Insert: Omit<Database['public']['Tables']['profiles']['Row'], 'id' | 'created_at' | 'updated_at'>;
./src/types/database.ts:        Update: Partial<Database['public']['Tables']['profiles']['Row']>;
./src/types/database.ts:        Relationships: [
./src/types/database.ts:          {
./src/types/database.ts:            foreignKeyName: 'profiles_id_fkey';
./src/types/database.ts:            columns: ['id'];
./src/types/database.ts:            referencedRelation: 'users';
./src/types/database.ts:            referencedColumns: ['id'];
./src/types/database.ts:          }
./src/types/database.ts:        ];
./src/types/database.ts:      };
./src/types/database.ts:      error_logs: {
./src/types/database.ts:        Row: {
./src/types/database.ts:          id: number;
./src/types/database.ts:          error_message: string;
./src/types/database.ts:          error_stack: string | null;
./src/types/database.ts:          error_code: string | null;
./src/types/database.ts:          created_at: string;
./src/types/database.ts:          user_id: string | null;
./src/types/database.ts:          metadata: Record<string, any> | null;
./src/types/database.ts:        };
./src/types/database.ts:        Insert: Omit<Database['public']['Tables']['error_logs']['Row'], 'id' | 'created_at'>;
./src/types/database.ts:        Update: Partial<Database['public']['Tables']['error_logs']['Row']>;
./src/types/database.ts:        Relationships: [];
./src/types/database.ts:      };
./src/types/database.ts:    };
./src/types/database.ts:    Enums: {
./src/types/database.ts:      company_industry: CompanyIndustry;
./src/types/database.ts:      company_size: CompanySize;
./src/types/database.ts:      company_verification_status: VerificationStatus;
./src/types/database.ts:      employment_status: EmploymentStatus;
./src/types/database.ts:    };
./src/types/database.ts:  };
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:// Utility types
./src/types/database.ts:export type TableName = keyof Database['public']['Tables'];
./src/types/database.ts:export type Tables = Database['public']['Tables'];
./src/types/database.ts:
./src/types/database.ts:// Base table types
./src/types/database.ts:export type BaseCompany = Database['public']['Tables']['companies']['Row'];
./src/types/database.ts:export type BaseReview = Database['public']['Tables']['reviews']['Row'];
./src/types/database.ts:export type BaseProfile = Database['public']['Tables']['profiles']['Row'];
./src/types/database.ts:export type BaseReviewLike = Database['public']['Tables']['review_likes']['Row'];
./src/types/database.ts:export type BaseErrorLog = Database['public']['Tables']['error_logs']['Row'];
./src/types/database.ts:
./src/types/database.ts:// Extended types with computed fields based on the Supabase schema
./src/types/database.ts:export interface Company extends BaseCompany {
./src/types/database.ts:  reviews?: Review[];
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:export interface Review extends BaseReview {}
./src/types/database.ts:
./src/types/database.ts:export type UserProfile = BaseProfile;
./src/types/database.ts:export type ReviewLike = BaseReviewLike;
./src/types/database.ts:export type ErrorLog = BaseErrorLog;
./src/types/database.ts:
./src/types/database.ts:// Error handling types
./src/types/database.ts:export interface DatabaseError {
./src/types/database.ts:  message: string;
./src/types/database.ts:  details?: unknown;
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:export interface DatabaseResult<T> {
./src/types/database.ts:  data: T | null;
./src/types/database.ts:  error: DatabaseError | null;
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:export type SupabaseQueryResult<T> = {
./src/types/database.ts:  data: T | null;
./src/types/database.ts:  error: PostgrestError | null;
./src/types/database.ts:};
./src/types/database.ts:
./src/types/database.ts:// Function parameter types
./src/types/database.ts:export interface GetCompaniesOptions {
./src/types/database.ts:  industry?: string;
./src/types/database.ts:  location?: string;
./src/types/database.ts:  search?: string;
./src/types/database.ts:  orderBy?: keyof Company;
./src/types/database.ts:  orderDirection?: 'asc' | 'desc';
./src/types/database.ts:  page?: number;
./src/types/database.ts:  limit?: number;
./src/types/database.ts:  withStats?: boolean;
./src/types/database.ts:  withReviews?: boolean;
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:export interface GetReviewsOptions {
./src/types/database.ts:  status?: string;
./src/types/database.ts:  orderBy?: keyof Review;
./src/types/database.ts:  orderDirection?: 'asc' | 'desc';
./src/types/database.ts:  page?: number;
./src/types/database.ts:  limit?: number;
./src/types/database.ts:  companyId?: string | number;
./src/types/database.ts:  userId?: string;
./src/types/database.ts:  withCompany?: boolean;
./src/types/database.ts:  withLikes?: boolean;
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:// Error logging types
./src/types/database.ts:export type ErrorLogDetails = {
./src/types/database.ts:  operation: DatabaseOperation;
./src/types/database.ts:  table: TableName;
./src/types/database.ts:  error: string;
./src/types/database.ts:  details?: Record<string, unknown>;
./src/types/database.ts:  user_id?: string;
./src/types/database.ts:  created_at?: string;
./src/types/database.ts:};
./src/types/database.ts:
./src/types/database.ts:// Add helper types for operations
./src/types/database.ts:export type CompanyInsert = Database['public']['Tables']['companies']['Insert'];
./src/types/database.ts:export type CompanyUpdate = Database['public']['Tables']['companies']['Update'];
./src/types/database.ts:export type ReviewInsert = Database['public']['Tables']['reviews']['Insert'];
./src/types/database.ts:export type ReviewUpdate = Database['public']['Tables']['reviews']['Update'];
./src/types/database.ts:
./src/types/database.ts:// Additional helper types used in hooks:
./src/types/database.ts:export type CompanyId = number;
./src/types/database.ts:export type UserId = string;
./src/types/database.ts:
./src/types/database.ts:export interface CompanyWithReviews extends Company {
./src/types/database.ts:  reviews: Review[];
./src/types/database.ts:}
./src/types/database.ts:
./src/types/database.ts:// New types for joined entities if needed:
./src/types/database.ts:export interface JoinedCompany extends Company {}
./src/types/database.ts:export interface JoinedReview extends Review {}
./src/types/database.ts:
./src/types/database.ts:export * from './supabase'; 
./src/types/index.ts:import type { Database } from './supabase';
./src/types/index.ts:
./src/types/index.ts:
./src/types/index.ts:// src/types/index.ts
./src/types/index.ts:
./src/types/index.ts:type Tables = Database['public']['Tables'];
./src/types/index.ts:type Enums = Database['public']['Enums'];
./src/types/index.ts:
./src/types/index.ts:// Base types from Supabase
./src/types/index.ts:export type CompanyRow = Tables['companies']['Row'];
./src/types/index.ts:export type ReviewRow = Tables['reviews']['Row'];
./src/types/index.ts:export type ProfileRow = Tables['profiles']['Row'];
./src/types/index.ts:
./src/types/index.ts:// Enums from Supabase
./src/types/index.ts:export type Industry = Enums['company_industry'];
./src/types/index.ts:export type VerificationStatus = Enums['company_verification_status'];
./src/types/index.ts:
./src/types/index.ts:// Additional application-specific types
./src/types/index.ts:export type EmploymentStatus = 'Full-time' | 'Part-time' | 'Contract' | 'Intern';
./src/types/index.ts:export type ReviewStatus = 'pending' | 'approved' | 'rejected';
./src/types/index.ts:export type Role = 'user' | 'admin' | 'moderator';
./src/types/index.ts:export type CompanySize = 'Small' | 'Medium' | 'Large' | 'Enterprise' | 'Startup';
./src/types/index.ts:
./src/types/index.ts:// Constants
./src/types/index.ts:export const INDUSTRIES: Industry[] = [
./src/types/index.ts:  'Technology',
./src/types/index.ts:  'Healthcare',
./src/types/index.ts:  'Education',
./src/types/index.ts:  'Finance',
./src/types/index.ts:  'Manufacturing',
./src/types/index.ts:  'Retail',
./src/types/index.ts:  'Other'
./src/types/index.ts:];
./src/types/index.ts:
./src/types/index.ts:export const EMPLOYMENT_STATUSES: EmploymentStatus[] = [
./src/types/index.ts:  'Full-time',
./src/types/index.ts:  'Part-time',
./src/types/index.ts:  'Contract',
./src/types/index.ts:  'Intern'
./src/types/index.ts:];
./src/types/index.ts:
./src/types/index.ts:// Extended types with additional fields
./src/types/index.ts:export type Company = CompanyRow & {
./src/types/index.ts:  average_rating?: number;
./src/types/index.ts:  total_reviews?: number;
./src/types/index.ts:  recommendation_rate?: number;
./src/types/index.ts:  reviews?: Review[];
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export type Review = ReviewRow & {
./src/types/index.ts:  likes_count?: number;
./src/types/index.ts:  is_liked?: boolean;
./src/types/index.ts:  company?: Company;
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export type Profile = ProfileRow;
./src/types/index.ts:
./src/types/index.ts:// Analytics types
./src/types/index.ts:export type AdminStats = {
./src/types/index.ts:  total_users: number;
./src/types/index.ts:  total_companies: number;
./src/types/index.ts:  total_reviews: number;
./src/types/index.ts:  average_rating: number;
./src/types/index.ts:  pending_reviews: number;
./src/types/index.ts:  pending_verifications: number;
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export interface MonthlyReview {
./src/types/index.ts:  month: string;
./src/types/index.ts:  totalReviews: number;
./src/types/index.ts:  totalRating: number;
./src/types/index.ts:  averageRating: number;
./src/types/index.ts:}
./src/types/index.ts:
./src/types/index.ts:// Type guards
./src/types/index.ts:export const isValidIndustry = (industry: string | null): industry is Industry => {
./src/types/index.ts:  return industry !== null && INDUSTRIES.includes(industry as Industry);
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export const isValidEmploymentStatus = (status: string): status is EmploymentStatus => {
./src/types/index.ts:  return EMPLOYMENT_STATUSES.includes(status as EmploymentStatus);
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:// ID types
./src/types/index.ts:export type CompanyId = number;
./src/types/index.ts:export type ReviewId = number;
./src/types/index.ts:export type UserId = string;
./src/types/index.ts:
./src/types/index.ts:// Database operation types
./src/types/index.ts:export type ReviewInsert = Tables['reviews']['Insert'];
./src/types/index.ts:export type ReviewUpdate = Tables['reviews']['Update'];
./src/types/index.ts:export type CompanyInsert = Tables['companies']['Insert'];
./src/types/index.ts:export type CompanyUpdate = Tables['companies']['Update'];
./src/types/index.ts:
./src/types/index.ts:// Joined types
./src/types/index.ts:export type JoinedReview = Review & {
./src/types/index.ts:  company?: Company;
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export type JoinedCompany = Company & {
./src/types/index.ts:  reviews?: Review[];
./src/types/index.ts:};
./src/types/index.ts:
./src/types/index.ts:export type CompanyWithReviews = Company & {
./src/types/index.ts:  reviews: Review[];
./src/types/index.ts:};
./src/types/react.d.ts:import React from 'react';
./src/types/react.d.ts:
./src/types/react.d.ts:declare global {
./src/types/react.d.ts:  namespace JSX {
./src/types/react.d.ts:    interface IntrinsicElements {
./src/types/react.d.ts:      [elemName: string]: React.DetailedHTMLProps<
./src/types/react.d.ts:        React.HTMLAttributes<HTMLElement>,
./src/types/react.d.ts:        HTMLElement
./src/types/react.d.ts:      >;
./src/types/react.d.ts:    }
./src/types/react.d.ts:  }
./src/types/react.d.ts:} 
./src/types/review.d.ts:import type { Database } from './supabase';
./src/types/review.d.ts:
./src/types/review.d.ts:type Tables = Database['public']['Tables'];
./src/types/review.d.ts:export type BaseReview = Tables['reviews']['Row'];
./src/types/review.d.ts:
./src/types/review.d.ts:// UI-specific types that extend the base review type
./src/types/review.d.ts:export interface ReviewWithUI extends BaseReview {
./src/types/review.d.ts:  // Add UI-specific fields here
./src/types/review.d.ts:}
./src/types/review.d.ts:
./src/types/review.d.ts:export type ToastPosition = 
./src/types/review.d.ts:  | "top-right" 
./src/types/review.d.ts:  | "bottom-right" 
./src/types/review.d.ts:  | "top-left" 
./src/types/review.d.ts:  | "bottom-left"; 
./src/types/review.ts:export type EmploymentStatus = 'Full-time' | 'Part-time' | 'Contract' | 'Intern';
./src/types/review.ts:export type ReviewStatus = 'pending' | 'approved' | 'rejected';
./src/types/review.ts:
./src/types/review.ts:export interface Review {
./src/types/review.ts:  id: number;
./src/types/review.ts:  title: string | null;
./src/types/review.ts:  content: string | null;
./src/types/review.ts:  rating: number | null;
./src/types/review.ts:  pros: string | null;
./src/types/review.ts:  cons: string | null;
./src/types/review.ts:  position: string | null;
./src/types/review.ts:  employment_status: string | null;
./src/types/review.ts:  company_id: number;
./src/types/review.ts:  company_name: string | null;
./src/types/review.ts:  created_at: string;
./src/types/review.ts:  updated_at: string;
./src/types/review.ts:  status: string | null;
./src/types/review.ts:  is_current_employee: boolean | null;
./src/types/review.ts:  reviewer_email: string | null;
./src/types/review.ts:  reviewer_name: string | null;
./src/types/review.ts:  reviewer_id: string | null;
./src/types/review.ts:  likes: number | null;
./src/types/review.ts:}
./src/utils/date.ts:
./src/utils/date.ts:
./src/utils/date.ts:/**
./src/utils/date.ts: * Safely formats a date string or returns a fallback value if the date is invalid
./src/utils/date.ts: */
./src/utils/date.ts:export function formatDate(
./src/utils/date.ts:  date: string | Date | null | undefined,
./src/utils/date.ts:  options: {
./src/utils/date.ts:    format?: 'local' | 'relative';
./src/utils/date.ts:    fallback?: string;
./src/utils/date.ts:  } = {}
./src/utils/date.ts:): string {
./src/utils/date.ts:  const { format = 'local', fallback = 'Date not available' } = options;
./src/utils/date.ts:
./src/utils/date.ts:  if (!date) return fallback;
./src/utils/date.ts:
./src/utils/date.ts:  try {
./src/utils/date.ts:    const dateObj = typeof date === 'string' ? new Date(date) : date;
./src/utils/date.ts:    
./src/utils/date.ts:    // Check if date is valid
./src/utils/date.ts:    if (isNaN(dateObj.getTime())) {
./src/utils/date.ts:      return fallback;
./src/utils/date.ts:    }
./src/utils/date.ts:
./src/utils/date.ts:    if (format === 'relative') {
./src/utils/date.ts:      return getRelativeTimeString(dateObj);
./src/utils/date.ts:    }
./src/utils/date.ts:
./src/utils/date.ts:    return dateObj.toLocaleDateString(undefined, {
./src/utils/date.ts:      year: 'numeric',
./src/utils/date.ts:      month: 'long',
./src/utils/date.ts:      day: 'numeric'
./src/utils/date.ts:    });
./src/utils/date.ts:  } catch (error) {
./src/utils/date.ts:    console.error('Error formatting date:', error);
./src/utils/date.ts:    return fallback;
./src/utils/date.ts:  }
./src/utils/date.ts:}
./src/utils/date.ts:
./src/utils/date.ts:/**
./src/utils/date.ts: * Returns a relative time string (e.g., "2 hours ago", "3 days ago")
./src/utils/date.ts: */
./src/utils/date.ts:function getRelativeTimeString(date: Date): string {
./src/utils/date.ts:  const now = new Date();
./src/utils/date.ts:  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
./src/utils/date.ts:
./src/utils/date.ts:  const intervals = {
./src/utils/date.ts:    year: 31536000,
./src/utils/date.ts:    month: 2592000,
./src/utils/date.ts:    week: 604800,
./src/utils/date.ts:    day: 86400,
./src/utils/date.ts:    hour: 3600,
./src/utils/date.ts:    minute: 60
./src/utils/date.ts:  };
./src/utils/date.ts:
./src/utils/date.ts:  for (const [unit, seconds] of Object.entries(intervals)) {
./src/utils/date.ts:    const value = Math.floor(diffInSeconds / seconds);
./src/utils/date.ts:    if (value >= 1) {
./src/utils/date.ts:      return `${value} ${unit}${value === 1 ? '' : 's'} ago`;
./src/utils/date.ts:    }
./src/utils/date.ts:  }
./src/utils/date.ts:
./src/utils/date.ts:  return 'Just now';
./src/utils/date.ts:}
./src/utils/date.ts:
./src/utils/date.ts:/**
./src/utils/date.ts: * Safely creates a Date object from a string or returns null if invalid
./src/utils/date.ts: */
./src/utils/date.ts:export function parseDate(date: string | null | undefined): Date | null {
./src/utils/date.ts:  if (!date) return null;
./src/utils/date.ts:  const parsed = new Date(date);
./src/utils/date.ts:  return isNaN(parsed.getTime()) ? null : parsed;
./src/utils/date.ts:}
./src/utils/date.ts:
./src/utils/date.ts:/**
./src/utils/date.ts: * Formats a date for display in a consistent way across the application
./src/utils/date.ts: */
./src/utils/date.ts:export function formatDateDisplay(date: string | Date | null | undefined): string {
./src/utils/date.ts:  if (!date) return 'Date not available';
./src/utils/date.ts:  const dateObj = typeof date === 'string' ? parseDate(date) : date;
./src/utils/date.ts:  if (!dateObj) return 'Invalid date';
./src/utils/date.ts:  return dateObj.toLocaleDateString(undefined, {
./src/utils/date.ts:    year: 'numeric',
./src/utils/date.ts:    month: 'long',
./src/utils/date.ts:    day: 'numeric'
./src/utils/date.ts:  });
./src/utils/date.ts:}
./src/__tests__/app.test.tsx:import { render, screen } from '@testing-library/react';
./src/__tests__/app.test.tsx:import type { Database } from '@/types/supabase';
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:type Company = Database['public']['Tables']['companies']['Row'];
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:import { describe, it, expect, vi } from 'vitest';
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:import { Button } from '@/components/ui/button';
./src/__tests__/app.test.tsx:import { CompanyCard } from '@/components/CompanyCard';
./src/__tests__/app.test.tsx:import { Input } from '@/components/ui/input';
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:// Mock company data
./src/__tests__/app.test.tsx:const mockCompany: Company = {
./src/__tests__/app.test.tsx:  id: 1,
./src/__tests__/app.test.tsx:  name: 'Test Company',
./src/__tests__/app.test.tsx:  industry: 'Technology',
./src/__tests__/app.test.tsx:  description: 'A test company',
./src/__tests__/app.test.tsx:  location: 'Test Location',
./src/__tests__/app.test.tsx:  website: 'https://test.com',
./src/__tests__/app.test.tsx:  ceo: 'Test CEO',
./src/__tests__/app.test.tsx:  average_rating: 0,
./src/__tests__/app.test.tsx:  total_reviews: 0,
./src/__tests__/app.test.tsx:  recommendation_rate: 0,
./src/__tests__/app.test.tsx:  created_at: new Date().toISOString(),
./src/__tests__/app.test.tsx:  updated_at: new Date().toISOString()
./src/__tests__/app.test.tsx:};
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:describe('RateMyEmployer App', () => {
./src/__tests__/app.test.tsx:  describe('UI Components', () => {
./src/__tests__/app.test.tsx:    it('renders button with text', () => {
./src/__tests__/app.test.tsx:      render(<Button>Click me</Button>);
./src/__tests__/app.test.tsx:      expect(screen.getByText('Click me')).toBeInTheDocument();
./src/__tests__/app.test.tsx:    });
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:    it('renders input with placeholder', () => {
./src/__tests__/app.test.tsx:      render(<Input placeholder="Enter text" />);
./src/__tests__/app.test.tsx:      expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();
./src/__tests__/app.test.tsx:    });
./src/__tests__/app.test.tsx:
./src/__tests__/app.test.tsx:    it('renders company card with basic info', () => {
./src/__tests__/app.test.tsx:      render(<CompanyCard company={mockCompany} />);
./src/__tests__/app.test.tsx:      expect(screen.getByText(mockCompany.name)).toBeInTheDocument();
./src/__tests__/app.test.tsx:    });
./src/__tests__/app.test.tsx:  });
./src/__tests__/app.test.tsx:});
./src/__tests__/basic.spec.ts:import { supabase } from '../lib/supabaseClient'
./src/__tests__/basic.spec.ts:import { createClient } from 'supabase'
./src/__tests__/basic.spec.ts:
./src/__tests__/basic.spec.ts:describe('Supabase Connection', () => {
./src/__tests__/basic.spec.ts:  test('should successfully connect to Supabase', async () => {
./src/__tests__/basic.spec.ts:    const { data, error } = await supabase
./src/__tests__/basic.spec.ts:      .from('companies')
./src/__tests__/basic.spec.ts:      .select('*')
./src/__tests__/basic.spec.ts:      .limit(1)
./src/__tests__/basic.spec.ts:    
./src/__tests__/basic.spec.ts:    expect(error).toBeNull()
./src/__tests__/basic.spec.ts:    expect(data).toBeInstanceOf(Array)
./src/__tests__/basic.spec.ts:    expect(Array.isArray(data)).toBe(true)
./src/__tests__/basic.spec.ts:  })
./src/__tests__/basic.spec.ts:
./src/__tests__/basic.spec.ts:  test('should handle connection errors gracefully', async () => {
./src/__tests__/basic.spec.ts:    // Mock a failed connection
./src/__tests__/basic.spec.ts:    const invalidSupabase = createClient('invalid-url', 'invalid-key')
./src/__tests__/basic.spec.ts:    const { data, error } = await invalidSupabase
./src/__tests__/basic.spec.ts:      .from('companies')
./src/__tests__/basic.spec.ts:      .select('*')
./src/__tests__/basic.spec.ts:    
./src/__tests__/basic.spec.ts:    expect(error).toBeTruthy()
./src/__tests__/basic.spec.ts:    expect(data).toBeNull()
./src/__tests__/basic.spec.ts:  })
./src/__tests__/basic.spec.ts:}) 
./src/__tests__/mocks/mockData.ts:import type { Company, Review, Profile } from '@/types';
./src/__tests__/mocks/mockData.ts:
./src/__tests__/mocks/mockData.ts:
./src/__tests__/mocks/mockData.ts:export const mockCompany: Company = {
./src/__tests__/mocks/mockData.ts:  id: 1,
./src/__tests__/mocks/mockData.ts:  name: 'Test Company',
./src/__tests__/mocks/mockData.ts:  industry: 'Technology',
./src/__tests__/mocks/mockData.ts:  location: 'San Francisco, CA',
./src/__tests__/mocks/mockData.ts:  description: 'A test company description',
./src/__tests__/mocks/mockData.ts:  website: 'https://test.com',
./src/__tests__/mocks/mockData.ts:  logo_url: null,
./src/__tests__/mocks/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/mocks/mockData.ts:  benefits: 'Great benefits',
./src/__tests__/mocks/mockData.ts:  company_values: 'Strong values',
./src/__tests__/mocks/mockData.ts:  ceo: 'John Doe',
./src/__tests__/mocks/mockData.ts:  verification_status: 'pending',
./src/__tests__/mocks/mockData.ts:  average_rating: 4.5,
./src/__tests__/mocks/mockData.ts:  total_reviews: 10,
./src/__tests__/mocks/mockData.ts:  recommendation_rate: 85,
./src/__tests__/mocks/mockData.ts:  updated_at: new Date().toISOString(),
./src/__tests__/mocks/mockData.ts:  created_by: null,
./src/__tests__/mocks/mockData.ts:  verified: false,
./src/__tests__/mocks/mockData.ts:  verification_date: null
./src/__tests__/mocks/mockData.ts:};
./src/__tests__/mocks/mockData.ts:
./src/__tests__/mocks/mockData.ts:export const mockReview: Review = {
./src/__tests__/mocks/mockData.ts:  id: 1,
./src/__tests__/mocks/mockData.ts:  company_id: 1,
./src/__tests__/mocks/mockData.ts:  user_id: 'test-user-id',
./src/__tests__/mocks/mockData.ts:  rating: 4,
./src/__tests__/mocks/mockData.ts:  title: 'Great place to work',
./src/__tests__/mocks/mockData.ts:  pros: 'Good benefits, great culture',
./src/__tests__/mocks/mockData.ts:  cons: 'Work-life balance could be better',
./src/__tests__/mocks/mockData.ts:  position: 'Software Engineer',
./src/__tests__/mocks/mockData.ts:  employment_status: 'Full-time',
./src/__tests__/mocks/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/mocks/mockData.ts:  status: 'approved',
./src/__tests__/mocks/mockData.ts:  content: 'Overall a great experience working here.',
./src/__tests__/mocks/mockData.ts:  reviewer_name: 'John Doe',
./src/__tests__/mocks/mockData.ts:  reviewer_email: 'john@example.com',
./src/__tests__/mocks/mockData.ts:  is_current_employee: true,
./src/__tests__/mocks/mockData.ts:  company: mockCompany,
./src/__tests__/mocks/mockData.ts:  likes: 5
./src/__tests__/mocks/mockData.ts:};
./src/__tests__/mocks/mockData.ts:
./src/__tests__/mocks/mockData.ts:export const mockProfile: Profile = {
./src/__tests__/mocks/mockData.ts:  id: 'test-user-id',
./src/__tests__/mocks/mockData.ts:  username: 'testuser',
./src/__tests__/mocks/mockData.ts:  email: 'test@example.com',
./src/__tests__/mocks/mockData.ts:  is_verified: true,
./src/__tests__/mocks/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/mocks/mockData.ts:  role: 'user'
./src/__tests__/mocks/mockData.ts:};
./src/__tests__/setup.ts:import '@testing-library/jest-dom';
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:import { vi, beforeEach } from 'vitest';
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:// Suppress React warnings
./src/__tests__/setup.ts:const originalError = console.error;
./src/__tests__/setup.ts:console.error = (...args) => {
./src/__tests__/setup.ts:  if (
./src/__tests__/setup.ts:    typeof args[0] === 'string' && 
./src/__tests__/setup.ts:    (args[0].includes('React.createContext') || 
./src/__tests__/setup.ts:     args[0].includes('Invalid hook call') ||
./src/__tests__/setup.ts:     args[0].includes('node_modules'))
./src/__tests__/setup.ts:  ) {
./src/__tests__/setup.ts:    return;
./src/__tests__/setup.ts:  }
./src/__tests__/setup.ts:  originalError.call(console, ...args);
./src/__tests__/setup.ts:};
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:// Mock window.matchMedia
./src/__tests__/setup.ts:Object.defineProperty(window, 'matchMedia', {
./src/__tests__/setup.ts:  writable: true,
./src/__tests__/setup.ts:  value: vi.fn().mockImplementation(query => ({
./src/__tests__/setup.ts:    matches: false,
./src/__tests__/setup.ts:    media: query,
./src/__tests__/setup.ts:    onchange: null,
./src/__tests__/setup.ts:    addListener: vi.fn(),
./src/__tests__/setup.ts:    removeListener: vi.fn(),
./src/__tests__/setup.ts:    addEventListener: vi.fn(),
./src/__tests__/setup.ts:    removeEventListener: vi.fn(),
./src/__tests__/setup.ts:    dispatchEvent: vi.fn(),
./src/__tests__/setup.ts:  })),
./src/__tests__/setup.ts:});
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:// Mock ResizeObserver
./src/__tests__/setup.ts:global.ResizeObserver = vi.fn().mockImplementation(() => ({
./src/__tests__/setup.ts:  observe: vi.fn(),
./src/__tests__/setup.ts:  unobserve: vi.fn(),
./src/__tests__/setup.ts:  disconnect: vi.fn(),
./src/__tests__/setup.ts:}));
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:// Mock IntersectionObserver
./src/__tests__/setup.ts:global.IntersectionObserver = vi.fn().mockImplementation(() => ({
./src/__tests__/setup.ts:  observe: vi.fn(),
./src/__tests__/setup.ts:  unobserve: vi.fn(),
./src/__tests__/setup.ts:  disconnect: vi.fn(),
./src/__tests__/setup.ts:}));
./src/__tests__/setup.ts:
./src/__tests__/setup.ts:// Clear mocks before each test
./src/__tests__/setup.ts:beforeEach(() => {
./src/__tests__/setup.ts:  vi.clearAllMocks();
./src/__tests__/setup.ts:});
./src/__tests__/utils/customMatchers.ts:import { expect } from 'vitest'
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:interface CustomMatchers<R = unknown> {
./src/__tests__/utils/customMatchers.ts:  toHaveBeenCalledOnceWith: (expected: unknown) => R
./src/__tests__/utils/customMatchers.ts:  toBeValidDate: () => R
./src/__tests__/utils/customMatchers.ts:  toBeWithinRange: (floor: number, ceiling: number) => R
./src/__tests__/utils/customMatchers.ts:}
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:declare module 'vitest' {
./src/__tests__/utils/customMatchers.ts:  interface Assertion<T = any> extends CustomMatchers<T> {}
./src/__tests__/utils/customMatchers.ts:  interface AsymmetricMatchersContaining extends CustomMatchers {}
./src/__tests__/utils/customMatchers.ts:}
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:expect.extend({
./src/__tests__/utils/customMatchers.ts:  toHaveBeenCalledOnceWith(received: any, expected: unknown) {
./src/__tests__/utils/customMatchers.ts:    const pass = received.mock?.calls?.length === 1 &&
./src/__tests__/utils/customMatchers.ts:      JSON.stringify(received.mock?.calls[0]) === JSON.stringify([expected])
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:    return {
./src/__tests__/utils/customMatchers.ts:      pass,
./src/__tests__/utils/customMatchers.ts:      message: () =>
./src/__tests__/utils/customMatchers.ts:        pass
./src/__tests__/utils/customMatchers.ts:          ? `Expected function not to have been called once with ${expected}`
./src/__tests__/utils/customMatchers.ts:          : `Expected function to have been called once with ${expected}`,
./src/__tests__/utils/customMatchers.ts:    }
./src/__tests__/utils/customMatchers.ts:  },
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:  toBeValidDate(received: any) {
./src/__tests__/utils/customMatchers.ts:    const date = new Date(received)
./src/__tests__/utils/customMatchers.ts:    const pass = date instanceof Date && !isNaN(date.getTime())
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:    return {
./src/__tests__/utils/customMatchers.ts:      pass,
./src/__tests__/utils/customMatchers.ts:      message: () =>
./src/__tests__/utils/customMatchers.ts:        pass
./src/__tests__/utils/customMatchers.ts:          ? `Expected ${received} not to be a valid date`
./src/__tests__/utils/customMatchers.ts:          : `Expected ${received} to be a valid date`,
./src/__tests__/utils/customMatchers.ts:    }
./src/__tests__/utils/customMatchers.ts:  },
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:  toBeWithinRange(received: number, floor: number, ceiling: number) {
./src/__tests__/utils/customMatchers.ts:    const pass = received >= floor && received <= ceiling
./src/__tests__/utils/customMatchers.ts:
./src/__tests__/utils/customMatchers.ts:    return {
./src/__tests__/utils/customMatchers.ts:      pass,
./src/__tests__/utils/customMatchers.ts:      message: () =>
./src/__tests__/utils/customMatchers.ts:        pass
./src/__tests__/utils/customMatchers.ts:          ? `Expected ${received} not to be within range ${floor} - ${ceiling}`
./src/__tests__/utils/customMatchers.ts:          : `Expected ${received} to be within range ${floor} - ${ceiling}`,
./src/__tests__/utils/customMatchers.ts:    }
./src/__tests__/utils/customMatchers.ts:  },
./src/__tests__/utils/customMatchers.ts:})
./src/__tests__/utils/test-types.ts:import { Database } from '@/types/supabase';
./src/__tests__/utils/test-types.ts:
./src/__tests__/utils/test-types.ts:
./src/__tests__/utils/test-types.ts:export type TestUser = Database['public']['Tables']['user_profiles']['Row'];
./src/__tests__/utils/test-types.ts:export type TestReview = Database['public']['Tables']['reviews']['Row'];
./src/__tests__/utils/test-types.ts:export type TestCompany = Database['public']['Tables']['companies']['Row'];
./src/__tests__/utils/test-utils.tsx:import { createContext } from 'react';
./src/__tests__/utils/test-utils.tsx:import React from 'react';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:import type { User, Session } from '@supabase/supabase-js';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:import { render, RenderOptions } from '@testing-library/react';
./src/__tests__/utils/test-utils.tsx:import userEvent from '@testing-library/user-event';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:import { vi } from 'vitest';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:import { AuthProvider } from '@/contexts/AuthContext';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:import { ThemeProvider } from '@/components/ThemeProvider';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Mock window.matchMedia
./src/__tests__/utils/test-utils.tsx:Object.defineProperty(window, 'matchMedia', {
./src/__tests__/utils/test-utils.tsx:  writable: true,
./src/__tests__/utils/test-utils.tsx:  value: vi.fn().mockImplementation(query => ({
./src/__tests__/utils/test-utils.tsx:    matches: false,
./src/__tests__/utils/test-utils.tsx:    media: query,
./src/__tests__/utils/test-utils.tsx:    onchange: null,
./src/__tests__/utils/test-utils.tsx:    addListener: vi.fn(), // Deprecated
./src/__tests__/utils/test-utils.tsx:    removeListener: vi.fn(), // Deprecated
./src/__tests__/utils/test-utils.tsx:    addEventListener: vi.fn(),
./src/__tests__/utils/test-utils.tsx:    removeEventListener: vi.fn(),
./src/__tests__/utils/test-utils.tsx:    dispatchEvent: vi.fn(),
./src/__tests__/utils/test-utils.tsx:  })),
./src/__tests__/utils/test-utils.tsx:});
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:interface AuthContextType {
./src/__tests__/utils/test-utils.tsx:  user: User | null;
./src/__tests__/utils/test-utils.tsx:  session: Session | null;
./src/__tests__/utils/test-utils.tsx:  isLoading: boolean;
./src/__tests__/utils/test-utils.tsx:  error: string | null;
./src/__tests__/utils/test-utils.tsx:  isAdmin: boolean;
./src/__tests__/utils/test-utils.tsx:  signIn: (email: string, password: string) => Promise<void>;
./src/__tests__/utils/test-utils.tsx:  signUp: (email: string, password: string) => Promise<{ 
./src/__tests__/utils/test-utils.tsx:    error?: Error; 
./src/__tests__/utils/test-utils.tsx:    data?: { 
./src/__tests__/utils/test-utils.tsx:      user: User | null; 
./src/__tests__/utils/test-utils.tsx:      session: Session | null; 
./src/__tests__/utils/test-utils.tsx:    }; 
./src/__tests__/utils/test-utils.tsx:  }>;
./src/__tests__/utils/test-utils.tsx:  signOut: () => Promise<void>;
./src/__tests__/utils/test-utils.tsx:}
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Create a mock context
./src/__tests__/utils/test-utils.tsx:export const AuthContext = createContext<AuthContextType | undefined>(undefined);
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Mock auth context value
./src/__tests__/utils/test-utils.tsx:const mockAuthContext: AuthContextType = {
./src/__tests__/utils/test-utils.tsx:  user: {
./src/__tests__/utils/test-utils.tsx:    id: 'test-user-id',
./src/__tests__/utils/test-utils.tsx:    email: 'test@example.com',
./src/__tests__/utils/test-utils.tsx:    role: 'authenticated',
./src/__tests__/utils/test-utils.tsx:    aud: 'authenticated',
./src/__tests__/utils/test-utils.tsx:    created_at: new Date().toISOString(),
./src/__tests__/utils/test-utils.tsx:    app_metadata: {
./src/__tests__/utils/test-utils.tsx:      provider: 'email',
./src/__tests__/utils/test-utils.tsx:    },
./src/__tests__/utils/test-utils.tsx:    user_metadata: {},
./src/__tests__/utils/test-utils.tsx:    identities: [],
./src/__tests__/utils/test-utils.tsx:    updated_at: new Date().toISOString(),
./src/__tests__/utils/test-utils.tsx:  } as User,
./src/__tests__/utils/test-utils.tsx:  session: {
./src/__tests__/utils/test-utils.tsx:    access_token: 'test-token',
./src/__tests__/utils/test-utils.tsx:    token_type: 'bearer',
./src/__tests__/utils/test-utils.tsx:    expires_in: 3600,
./src/__tests__/utils/test-utils.tsx:    refresh_token: 'test-refresh-token',
./src/__tests__/utils/test-utils.tsx:    user: {
./src/__tests__/utils/test-utils.tsx:      id: 'test-user-id',
./src/__tests__/utils/test-utils.tsx:      email: 'test@example.com',
./src/__tests__/utils/test-utils.tsx:      role: 'authenticated',
./src/__tests__/utils/test-utils.tsx:      aud: 'authenticated',
./src/__tests__/utils/test-utils.tsx:      created_at: new Date().toISOString(),
./src/__tests__/utils/test-utils.tsx:      app_metadata: {
./src/__tests__/utils/test-utils.tsx:        provider: 'email',
./src/__tests__/utils/test-utils.tsx:      },
./src/__tests__/utils/test-utils.tsx:      user_metadata: {},
./src/__tests__/utils/test-utils.tsx:      identities: [],
./src/__tests__/utils/test-utils.tsx:      updated_at: new Date().toISOString(),
./src/__tests__/utils/test-utils.tsx:    } as User,
./src/__tests__/utils/test-utils.tsx:  } as Session,
./src/__tests__/utils/test-utils.tsx:  isLoading: false,
./src/__tests__/utils/test-utils.tsx:  error: null,
./src/__tests__/utils/test-utils.tsx:  isAdmin: false,
./src/__tests__/utils/test-utils.tsx:  signIn: vi.fn(),
./src/__tests__/utils/test-utils.tsx:  signUp: vi.fn(),
./src/__tests__/utils/test-utils.tsx:  signOut: vi.fn(),
./src/__tests__/utils/test-utils.tsx:};
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Custom render function that includes providers
./src/__tests__/utils/test-utils.tsx:const customRender = (
./src/__tests__/utils/test-utils.tsx:  ui: React.ReactElement,
./src/__tests__/utils/test-utils.tsx:  options?: Omit<RenderOptions, 'wrapper'>
./src/__tests__/utils/test-utils.tsx:) => {
./src/__tests__/utils/test-utils.tsx:  const AllTheProviders = ({ children }: { children: React.ReactNode }) => {
./src/__tests__/utils/test-utils.tsx:    return (
./src/__tests__/utils/test-utils.tsx:      <ThemeProvider>
./src/__tests__/utils/test-utils.tsx:        <AuthContext.Provider value={mockAuthContext}>
./src/__tests__/utils/test-utils.tsx:          {children}
./src/__tests__/utils/test-utils.tsx:        </AuthContext.Provider>
./src/__tests__/utils/test-utils.tsx:      </ThemeProvider>
./src/__tests__/utils/test-utils.tsx:    );
./src/__tests__/utils/test-utils.tsx:  };
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:  return {
./src/__tests__/utils/test-utils.tsx:    user: userEvent.setup(),
./src/__tests__/utils/test-utils.tsx:    ...render(ui, { wrapper: AllTheProviders, ...options }),
./src/__tests__/utils/test-utils.tsx:  };
./src/__tests__/utils/test-utils.tsx:};
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Re-export everything
./src/__tests__/utils/test-utils.tsx:export * from '@testing-library/react';
./src/__tests__/utils/test-utils.tsx:
./src/__tests__/utils/test-utils.tsx:// Override render method
./src/__tests__/utils/test-utils.tsx:export { customRender as render };
./src/__tests__/utils/test-utils.tsx:export { mockAuthContext };
./src/__tests__/__mocks__/mockData.ts:import type { Database } from '@/types/supabase';
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:type Company = Database['public']['Tables']['companies']['Row'];
./src/__tests__/__mocks__/mockData.ts:type Review = Database['public']['Tables']['reviews']['Row'];
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// User mock data
./src/__tests__/__mocks__/mockData.ts:export const mockUser = {
./src/__tests__/__mocks__/mockData.ts:  id: 'test-user-id',
./src/__tests__/__mocks__/mockData.ts:  email: 'test@example.com',
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/__mocks__/mockData.ts:  role: 'user',
./src/__tests__/__mocks__/mockData.ts:  username: 'testuser',
./src/__tests__/__mocks__/mockData.ts:  is_verified: true
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Review mock data
./src/__tests__/__mocks__/mockData.ts:export const mockReview: Database['public']['Tables']['reviews']['Row'] = {
./src/__tests__/__mocks__/mockData.ts:  id: 1,
./src/__tests__/__mocks__/mockData.ts:  company_id: 1,
./src/__tests__/__mocks__/mockData.ts:  user_id: 'test-user-id',
./src/__tests__/__mocks__/mockData.ts:  rating: 4,
./src/__tests__/__mocks__/mockData.ts:  title: 'Test Review',
./src/__tests__/__mocks__/mockData.ts:  content: 'This is a test review',
./src/__tests__/__mocks__/mockData.ts:  pros: 'Good benefits',
./src/__tests__/__mocks__/mockData.ts:  cons: 'Long hours',
./src/__tests__/__mocks__/mockData.ts:  position: 'Software Engineer',
./src/__tests__/__mocks__/mockData.ts:  employment_status: 'Full-time',
./src/__tests__/__mocks__/mockData.ts:  is_current_employee: true,
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/__mocks__/mockData.ts:  updated_at: new Date().toISOString(),
./src/__tests__/__mocks__/mockData.ts:  status: 'approved',
./src/__tests__/__mocks__/mockData.ts:  likes: 0,
./src/__tests__/__mocks__/mockData.ts:  company_name: 'Tech Corp'
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Company mock data
./src/__tests__/__mocks__/mockData.ts:export const mockCompany: Company = {
./src/__tests__/__mocks__/mockData.ts:  id: 1,
./src/__tests__/__mocks__/mockData.ts:  name: 'Test Company',
./src/__tests__/__mocks__/mockData.ts:  industry: 'Technology',
./src/__tests__/__mocks__/mockData.ts:  description: 'A test company',
./src/__tests__/__mocks__/mockData.ts:  location: 'Test Location',
./src/__tests__/__mocks__/mockData.ts:  website: 'https://test.com',
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString(),
./src/__tests__/__mocks__/mockData.ts:  updated_at: new Date().toISOString()
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Mock likes data
./src/__tests__/__mocks__/mockData.ts:export const mockLike = {
./src/__tests__/__mocks__/mockData.ts:  id: 'test-like-id',
./src/__tests__/__mocks__/mockData.ts:  user_id: mockUser.id,
./src/__tests__/__mocks__/mockData.ts:  review_id: mockReview.id,
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString()
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Mock error responses
./src/__tests__/__mocks__/mockData.ts:export const mockErrors = {
./src/__tests__/__mocks__/mockData.ts:  auth: {
./src/__tests__/__mocks__/mockData.ts:    notAuthenticated: {
./src/__tests__/__mocks__/mockData.ts:      message: 'Not authenticated',
./src/__tests__/__mocks__/mockData.ts:      status: 401
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    notAuthorized: {
./src/__tests__/__mocks__/mockData.ts:      message: 'Not authorized',
./src/__tests__/__mocks__/mockData.ts:      status: 403
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  },
./src/__tests__/__mocks__/mockData.ts:  validation: {
./src/__tests__/__mocks__/mockData.ts:    invalidInput: {
./src/__tests__/__mocks__/mockData.ts:      message: 'Invalid input data',
./src/__tests__/__mocks__/mockData.ts:      status: 400,
./src/__tests__/__mocks__/mockData.ts:      errors: [
./src/__tests__/__mocks__/mockData.ts:        { field: 'email', message: 'Invalid email format' }
./src/__tests__/__mocks__/mockData.ts:      ]
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  },
./src/__tests__/__mocks__/mockData.ts:  server: {
./src/__tests__/__mocks__/mockData.ts:    internal: {
./src/__tests__/__mocks__/mockData.ts:      message: 'Internal server error',
./src/__tests__/__mocks__/mockData.ts:      status: 500
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    database: {
./src/__tests__/__mocks__/mockData.ts:      message: 'Database error',
./src/__tests__/__mocks__/mockData.ts:      status: 503
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  }
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Mock API responses
./src/__tests__/__mocks__/mockData.ts:export const mockApiResponses = {
./src/__tests__/__mocks__/mockData.ts:  success: {
./src/__tests__/__mocks__/mockData.ts:    create: { message: 'Resource created successfully', status: 201 },
./src/__tests__/__mocks__/mockData.ts:    update: { message: 'Resource updated successfully', status: 200 },
./src/__tests__/__mocks__/mockData.ts:    delete: { message: 'Resource deleted successfully', status: 200 }
./src/__tests__/__mocks__/mockData.ts:  },
./src/__tests__/__mocks__/mockData.ts:  error: mockErrors
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Mock form data
./src/__tests__/__mocks__/mockData.ts:export const mockForms = {
./src/__tests__/__mocks__/mockData.ts:  review: {
./src/__tests__/__mocks__/mockData.ts:    valid: {
./src/__tests__/__mocks__/mockData.ts:      title: 'Great Company',
./src/__tests__/__mocks__/mockData.ts:      content: 'Detailed review content...',
./src/__tests__/__mocks__/mockData.ts:      rating: 4,
./src/__tests__/__mocks__/mockData.ts:      pros: 'Good benefits',
./src/__tests__/__mocks__/mockData.ts:      cons: 'Long hours',
./src/__tests__/__mocks__/mockData.ts:      position: 'Developer',
./src/__tests__/__mocks__/mockData.ts:      employment_status: 'FULL_TIME'
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    invalid: {
./src/__tests__/__mocks__/mockData.ts:      title: '', // Empty title
./src/__tests__/__mocks__/mockData.ts:      content: 'Too short', // Too short content
./src/__tests__/__mocks__/mockData.ts:      rating: 6, // Invalid rating
./src/__tests__/__mocks__/mockData.ts:      pros: '',
./src/__tests__/__mocks__/mockData.ts:      cons: '',
./src/__tests__/__mocks__/mockData.ts:      position: '',
./src/__tests__/__mocks__/mockData.ts:      employment_status: 'INVALID'
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  },
./src/__tests__/__mocks__/mockData.ts:  company: {
./src/__tests__/__mocks__/mockData.ts:    valid: {
./src/__tests__/__mocks__/mockData.ts:      name: 'New Tech Corp',
./src/__tests__/__mocks__/mockData.ts:      description: 'Company description...',
./src/__tests__/__mocks__/mockData.ts:      industry: 'Technology',
./src/__tests__/__mocks__/mockData.ts:      location: 'New York, NY',
./src/__tests__/__mocks__/mockData.ts:      website: 'https://example.com',
./src/__tests__/__mocks__/mockData.ts:      size: 'LARGE'
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    invalid: {
./src/__tests__/__mocks__/mockData.ts:      name: '', // Empty name
./src/__tests__/__mocks__/mockData.ts:      description: '', // Empty description
./src/__tests__/__mocks__/mockData.ts:      industry: '',
./src/__tests__/__mocks__/mockData.ts:      location: '',
./src/__tests__/__mocks__/mockData.ts:      website: 'invalid-url',
./src/__tests__/__mocks__/mockData.ts:      size: 'INVALID'
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  }
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Mock Supabase responses
./src/__tests__/__mocks__/mockData.ts:export const mockSupabaseResponses = {
./src/__tests__/__mocks__/mockData.ts:  auth: {
./src/__tests__/__mocks__/mockData.ts:    user: {
./src/__tests__/__mocks__/mockData.ts:      data: { user: mockUser, session: null },
./src/__tests__/__mocks__/mockData.ts:      error: null
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    error: {
./src/__tests__/__mocks__/mockData.ts:      data: { user: null, session: null },
./src/__tests__/__mocks__/mockData.ts:      error: { message: 'Authentication error', status: 401 }
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  },
./src/__tests__/__mocks__/mockData.ts:  data: {
./src/__tests__/__mocks__/mockData.ts:    success: {
./src/__tests__/__mocks__/mockData.ts:      data: [mockReview],
./src/__tests__/__mocks__/mockData.ts:      error: null
./src/__tests__/__mocks__/mockData.ts:    },
./src/__tests__/__mocks__/mockData.ts:    error: {
./src/__tests__/__mocks__/mockData.ts:      data: null,
./src/__tests__/__mocks__/mockData.ts:      error: { message: 'Database error', code: 'PGRST301' }
./src/__tests__/__mocks__/mockData.ts:    }
./src/__tests__/__mocks__/mockData.ts:  }
./src/__tests__/__mocks__/mockData.ts:};
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:// Test data factory functions
./src/__tests__/__mocks__/mockData.ts:export const createMockReview = (overrides = {}) => ({
./src/__tests__/__mocks__/mockData.ts:  ...mockReview,
./src/__tests__/__mocks__/mockData.ts:  ...overrides,
./src/__tests__/__mocks__/mockData.ts:  id: `test-review-${Date.now()}`,
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString()
./src/__tests__/__mocks__/mockData.ts:});
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:export const createMockCompany = (overrides = {}) => ({
./src/__tests__/__mocks__/mockData.ts:  ...mockCompany,
./src/__tests__/__mocks__/mockData.ts:  ...overrides,
./src/__tests__/__mocks__/mockData.ts:  id: `test-company-${Date.now()}`,
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString()
./src/__tests__/__mocks__/mockData.ts:});
./src/__tests__/__mocks__/mockData.ts:
./src/__tests__/__mocks__/mockData.ts:export const createMockUser = (overrides = {}) => ({
./src/__tests__/__mocks__/mockData.ts:  ...mockUser,
./src/__tests__/__mocks__/mockData.ts:  ...overrides,
./src/__tests__/__mocks__/mockData.ts:  id: `test-user-${Date.now()}`,
./src/__tests__/__mocks__/mockData.ts:  created_at: new Date().toISOString()
./src/__tests__/__mocks__/mockData.ts:});
