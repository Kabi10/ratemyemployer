name: Fetch Company News

on:
  schedule:
    # Run twice daily at 6 AM and 6 PM UTC
    - cron: '0 6,18 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  fetch-news:
    runs-on: ubuntu-latest
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      SERP_API_KEY: ${{ secrets.SERP_API_KEY }}  # Optional - will use free sources if not provided

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create fetch-news script
        run: |
          cat > scripts/fetch-news.ts << 'EOL'
          import { createClient } from '@supabase/supabase-js';
          import { fetchAndStoreCompanyNews } from '../src/lib/newsApi';

          async function main() {
            if (!process.env.SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
              throw new Error('Missing Supabase credentials');
            }

            const supabase = createClient(
              process.env.SUPABASE_URL,
              process.env.SUPABASE_SERVICE_ROLE_KEY
            );

            try {
              // Fetch companies with lowest ratings
              const { data: companies, error } = await supabase
                .from('companies')
                .select('name, average_rating')
                .order('average_rating', { ascending: true })
                .limit(10);

              if (error) throw error;
              
              if (!companies || companies.length === 0) {
                console.log('No companies found');
                return;
              }

              console.log(`Fetching news for ${companies.length} companies...`);
              
              // Fetch news for each company
              const companyNames = companies.map(c => c.name);
              const success = await fetchAndStoreCompanyNews(companyNames, false);
              
              if (success) {
                console.log('Successfully fetched and stored news');
              } else {
                throw new Error('Failed to fetch or store news');
              }
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }

          main();
          EOL

      - name: Run news fetcher
        run: npx ts-node scripts/fetch-news.ts 