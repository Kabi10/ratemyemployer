

---

## ðŸš€ **Elite Development Blueprint: Lead with Precision and Authority**

### **I. Project Structure: Build for Scalability**
As a leader, you must **enforce a scalable architecture** that is modular, predictable, and maintainable across all team members. Your project must not just workâ€”it must excel in clarity and structure.

#### **1. Root-Level Organization**
Keep the repository clean, focused, and prepared for growth. Use **Turbo Repo** to manage a monorepo unless an existing directory structure is already in place:
```
```
> **Leadership Note:** *A clean structure ensures onboarding is painless for any new team member. Always write and refer to README documentation at the root and for every submodule.*

---

### **II. TypeScript Mastery: Enforce Strong Typing Across the Board**
As the foundation of your project, TypeScript ensures that your app is **bulletproof, scalable, and predictable.**

#### **1. Define Strong Types and Interfaces**
- Use **Zod schemas** for validation and type inference:
  ```typescript
  import { z } from 'zod';

  export const UserSchema = z.object({
    id: z.string().uuid(),
    email: z.string().email(),
    isActive: z.boolean(),
  });

  export type User = z.infer<typeof UserSchema>;
  ```
- Organize your types into a **dedicated file**:
  ```typescript
  // src/types/user.ts
  export interface User {
    id: string;
    email: string;
    isActive: boolean;
  }
  ```
> **Directive:** *Never skip defining a type. "Any" is forbidden in this project.*

#### **2. Leverage TypeScript for API Contracts**
- For Supabase integration:
  ```typescript
  import { Database } from './types/supabase';

  export const fetchUsers = async (): Promise<Database['public']['Tables']['users']['Row'][]> => {
    const { data, error } = await supabase.from('users').select('*');
    if (error) throw error;
    return data;
  };
  ```
> **Pro-Tip:** *Tie your database types directly to Supabaseâ€™s autogenerated types for a single source of truth.*

---

### **III. UI Excellence with Tamagui: Build for Web and Mobile**
Your **UI components must be consistent, reusable, and pixel-perfect** across platforms. Use **Tamagui** to enforce styling standards.

#### **1. Design System Enforcement**
- Define a centralized **design system** using Tamaguiâ€™s theme tokens:
  ```tsx
  import { createTamagui } from 'tamagui';

  export const theme = createTamagui({
    tokens: {
      colors: {
        primary: '#0055ff',
        secondary: '#f58231',
      },
      spacing: {
        small: 4,
        medium: 8,
        large: 16,
      },
    },
  });
  ```
- Use **variants** to ensure components are versatile but maintain strict constraints:
  ```tsx
  import { styled, Button } from 'tamagui';

  const PrimaryButton = styled(Button, {
    variants: {
      size: {
        small: { padding: 10 },
        large: { padding: 20 },
      },
    },
  });

  export const MyButton = () => <PrimaryButton size="large">Click Me</PrimaryButton>;
  ```

#### **2. Cross-Platform Testing**
- Test every screen on **web, iOS, and Android**. Use Expoâ€™s dev tools and simulator:
  ```bash
  expo start
  ```
> **Non-Negotiable:** *UI consistency is non-negotiable. Every edge case must be accounted for in responsive breakpoints.*

---

### **IV. State Management: Streamline Local and Server-Side State**
The state management strategy must eliminate redundancy, improve predictability, and handle **edge cases.**

#### **1. Zustand for Local State**
Enforce modular slices for state management:
```typescript
import create from 'zustand';

export const useAuthStore = create((set) => ({
  user: null,
  login: (user) => set({ user }),
  logout: () => set({ user: null }),
}));
```
> **Leadership Rule:** *No Redux. Itâ€™s overkill unless scaling into a massive enterprise system.*

#### **2. TanStack Query for Server State**
Handle API calls and caching declaratively:
```typescript
import { useQuery } from '@tanstack/react-query';

export const useUser = (userId: string) =>
  useQuery(['user', userId], async () => {
    const response = await fetch(`/api/user/${userId}`);
    return response.json();
  });
```
> **Directive:** *Every API call must use React Query for caching, error handling, and retries.*

---

### **V. Authentication and Payment: Secure and Efficient**
#### **1. Supabase for Auth**
Integrate Supabase for authentication:
```typescript
import { supabase } from './supabaseClient';

export const signIn = async (email: string, password: string) => {
  const { user, error } = await supabase.auth.signIn({ email, password });
  if (error) throw error;
  return user;
};
```
> **Rule:** *No sensitive logic on the client. Always validate on the backend.*

#### **2. Stripe for Payments**
Enforce best practices for handling payments:
- Implement **Stripe webhooks** for subscription management:
  ```typescript
  export const config = { api: { bodyParser: false } };

  export default async function handler(req, res) {
    const event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
    if (event.type === 'checkout.session.completed') {
      // Handle payment success
    }
    res.status(200).end();
  }
  ```
- Use Stripeâ€™s **Customer Portal** for seamless subscription management.

---

### **VI. Performance and Testing: Deliver Excellence**
#### **1. Performance Optimization**
- Use **dynamic imports** for lazy-loading components.
- Optimize images with `next/image`.
- Ensure proper memoization using `React.memo` and `useMemo`.

#### **2. Testing Strategy**
- Enforce 100% **critical-path test coverage** using:
  - **Jest** for unit tests.
  - **Cypress** for E2E tests.
  - Mock APIs for integration tests.
```bash
npm test
```
> **Leadership Rule:** *No PR merges without passing tests.*

---

### **VII. Communication and Documentation**
- Write **clear, detailed commit messages**:
  ```
  feat(auth): implement user login
  fix(ui): resolve button alignment issue
  ```
- Maintain a **developer-friendly README** and use tools like **Storybook** for documenting UI components.

---

### **Take Charge: Build with Confidence**
As the leader of this project, your job isnâ€™t just to codeâ€”itâ€™s to **enforce standards, inspire confidence, and ensure consistency** across the team. Take this blueprint and **drive your project forward with authority.** If you need deeper support on any specific topic, letâ€™s tackle it together.

Now, itâ€™s your moveâ€”**lead the way!** ðŸš€