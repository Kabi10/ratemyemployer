Project Structure:
üìÅ app/
  üìÅ api/
    üìÅ test-connection/
      üìÑ route.ts
         Component Name: N/A
         Props: None
         Tailwind Classes: None
         -------------------
         Content:
         -------------------
         import { createClient } from '@supabase/supabase-js'
         import { NextResponse } from 'next/server'
         
         export async function GET() {
             const supabase = createClient(
                 process.env.NEXT_PUBLIC_SUPABASE_URL!,
                 process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
             )
         
             try {
                 // Test queries
                 const [companiesResponse, reviewsResponse] = await Promise.all([
                     supabase.from('companies').select('*').limit(1),
                     supabase.from('reviews').select('*').limit(1)
                 ])
         
                 return NextResponse.json({
                     success: true,
                     message: 'Successfully connected to Supabase',
                     data: {
                         companies: companiesResponse.data,
                         reviews: reviewsResponse.data,
                         errors: {
                             companies: companiesResponse.error,
                             reviews: reviewsResponse.error
                         }
                     }
                 })
         
             } catch (error) {
                 return NextResponse.json({
                     success: false,
                     message: 'Failed to connect to Supabase',
                     error: error instanceof Error ? error.message : 'Unknown error'
                 }, { status: 500 })
             }
         }
         -------------------

  üìÅ companies/
    üìÑ page.tsx
       Component Name: CompaniesPage
       Props: className, className, onResultsChange, className, key, company
       Tailwind Classes: container mx-auto px-4 py-8 text-3xl font-bold mb-6 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6
       -------------------
       Content:
       -------------------
       'use client';
       import { useState } from 'react';
       import { Company } from '@/lib/types';
       import SearchAndFilter from '@/components/SearchAndFilter';
       import CompanyCard from '@/components/CompanyCard';
       
       export default function CompaniesPage() {
           const [companies, setCompanies] = useState<Company[]>([]);
       
           return (
               <main className="container mx-auto px-4 py-8">
                   <h1 className="text-3xl font-bold mb-6">Companies</h1>
                   <SearchAndFilter onResultsChange={setCompanies} />
                   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                       {companies.map(company => (
                           <CompanyCard key={company.id} company={company} />
                       ))}
                   </div>
               </main>
           );
       }
       -------------------

    üìÅ [id]/
      üìÑ page.tsx
         Component Name: CompanyDetail
         Props: className, className, className, className, className, className, className, className, className, className, className, currentFilters, currentSort, className, key, review, className
         Tailwind Classes: p-4 p-4 text-red-600 p-4 container mx-auto px-4 py-8 mb-8 text-3xl font-bold mb-2 text-gray-600 text-sm text-gray-500 mt-1 text-sm text-gray-500 text-sm text-gray-500 mb-6 space-y-4 text-gray-500
         -------------------
         Content:
         -------------------
         // app/companies/[id]/page.tsx
         'use client';
         import { useEffect, useState } from 'react';
         import { useParams } from 'next/navigation';
         import { Company, Review } from '@/lib/types';
         import { supabase } from '@/lib/supabaseClient';
         import ReviewFilters from '@/components/ReviewFilters';
         import ReviewCard from '@/components/ReviewCard';
         
         interface Filters {
             minRating: number;
             employmentStatus: string;
             dateRange: string;
         }
         
         type SortType = 'newest' | 'oldest' | 'highest' | 'lowest';
         
         interface FilterChangeEvent extends CustomEvent {
             detail: {
                 key: keyof Filters;
                 value: any;
             };
         }
         
         interface SortChangeEvent extends CustomEvent {
             detail: SortType;
         }
         
         export default function CompanyDetail() {
             const params = useParams();
             const id = Number(params?.id);
         
             const [company, setCompany] = useState<Company | null>(null);
             const [reviews, setReviews] = useState<Review[]>([]);
             const [isLoading, setIsLoading] = useState(true);
             const [error, setError] = useState<string | null>(null);
         
             const [filters, setFilters] = useState<Filters>({
                 minRating: 0,
                 employmentStatus: 'all',
                 dateRange: 'all'
             });
             const [sort, setSort] = useState<SortType>('newest');
             const [filteredReviews, setFilteredReviews] = useState<Review[]>([]);
         
             useEffect(() => {
                 async function fetchCompanyData() {
                     if (!id) return;
         
                     setIsLoading(true);
                     setError(null);
         
                     try {
                         const [companyResponse, reviewsResponse] = await Promise.all([
                             supabase
                                 .from('companies')
                                 .select('*')
                                 .eq('id', id)
                                 .single(),
                             supabase
                                 .from('reviews')
                                 .select('*')
                                 .eq('company_id', id)
                                 .order('created_at', { ascending: false })
                         ]);
         
                         if (companyResponse.error) throw companyResponse.error;
                         if (reviewsResponse.error) throw reviewsResponse.error;
         
                         setCompany(companyResponse.data);
                         setReviews(reviewsResponse.data || []);
                     } catch (err) {
                         setError(err instanceof Error ? err.message : 'An error occurred while fetching data');
                         console.error('Error fetching data:', err);
                     } finally {
                         setIsLoading(false);
                     }
                 }
         
                 fetchCompanyData();
             }, [id]);
         
             useEffect(() => {
                 function handleFilterChange(event: FilterChangeEvent) {
                     setFilters(prev => ({
                         ...prev,
                         [event.detail.key]: event.detail.value
                     }));
                 }
         
                 function handleSortChange(event: SortChangeEvent) {
                     setSort(event.detail);
                 }
         
                 window.addEventListener('filterChange', handleFilterChange as EventListener);
                 window.addEventListener('sortChange', handleSortChange as EventListener);
         
                 return () => {
                     window.removeEventListener('filterChange', handleFilterChange as EventListener);
                     window.removeEventListener('sortChange', handleSortChange as EventListener);
                 };
             }, []);
         
             useEffect(() => {
                 let filtered = [...reviews];
         
                 // Apply filters
                 filtered = filtered.filter(review => {
                     const passesRating = filters.minRating === 0 || review.rating >= filters.minRating;
                     const passesStatus = filters.employmentStatus === 'all' || review.employment_status === filters.employmentStatus;
         
                     let passesDate = true;
                     if (filters.dateRange !== 'all') {
                         const reviewDate = new Date(review.created_at);
                         const now = new Date();
                         const cutoffDate = new Date(now);
         
                         switch (filters.dateRange) {
                             case 'month':
                                 cutoffDate.setMonth(now.getMonth() - 1);
                                 break;
                             case '6months':
                                 cutoffDate.setMonth(now.getMonth() - 6);
                                 break;
                             case 'year':
                                 cutoffDate.setFullYear(now.getFullYear() - 1);
                                 break;
                         }
         
                         passesDate = reviewDate >= cutoffDate;
                     }
         
                     return passesRating && passesStatus && passesDate;
                 });
         
                 // Apply sorting
                 filtered.sort((a, b) => {
                     switch (sort) {
                         case 'newest':
                             return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
                         case 'oldest':
                             return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
                         case 'highest':
                             return b.rating - a.rating;
                         case 'lowest':
                             return a.rating - b.rating;
                         default:
                             return 0;
                     }
                 });
         
                 setFilteredReviews(filtered);
             }, [reviews, filters, sort]);
         
             if (isLoading) {
                 return <div className="p-4">Loading company data...</div>;
             }
         
             if (error) {
                 return <div className="p-4 text-red-600">Error: {error}</div>;
             }
         
             if (!company) {
                 return <div className="p-4">Company not found</div>;
             }
         
             return (
                 <div className="container mx-auto px-4 py-8">
                     <div className="mb-8">
                         <h1 className="text-3xl font-bold mb-2">{company.name}</h1>
                         {company.description && (
                             <p className="text-gray-600">{company.description}</p>
                         )}
                         {company.location && (
                             <p className="text-sm text-gray-500 mt-1">Location: {company.location}</p>
                         )}
                         {company.industry && (
                             <p className="text-sm text-gray-500">Industry: {company.industry}</p>
                         )}
                         {company.size && (
                             <p className="text-sm text-gray-500">Company Size: {company.size}</p>
                         )}
                     </div>
         
                     <div className="mb-6">
                         <ReviewFilters
                             currentFilters={filters}
                             currentSort={sort}
                         />
                     </div>
         
                     <div className="space-y-4">
                         {filteredReviews.length > 0 ? (
                             filteredReviews.map(review => (
                                 <ReviewCard
                                     key={review.id}
                                     review={review}
                                 />
                             ))
                         ) : (
                             <p className="text-gray-500">No reviews found matching your criteria.</p>
                         )}
                     </div>
                 </div>
             );
         }
         -------------------

  üìÑ globals.css
  üìÑ layout.tsx
     Component Name: RootLayout
     Props: lang, className, className, className
     Tailwind Classes: flex flex-col min-h-screen flex-grow
     -------------------
     Content:
     -------------------
     import type { Metadata } from "next"
     import { Inter } from 'next/font/google'
     import "./globals.css"
     import { Navbar } from "@/components/Navbar"
     import { Footer } from "@/components/Footer"
     import { AuthProvider } from "@/contexts/AuthContext"
     
     const inter = Inter({ subsets: ["latin"] })
     
     export const metadata: Metadata = {
         title: "Rate My Employer",
         description: "Find and rate employers",
     }
     
     export default function RootLayout({
                                            children,
                                        }: {
         children: React.ReactNode
     }) {
         return (
             <html lang="en">
             <body className={inter.className}>
             <AuthProvider>
                 <div className="flex flex-col min-h-screen">
                     <Navbar />
                     <main className="flex-grow">
                         {children}
                     </main>
                     <Footer />
                 </div>
             </AuthProvider>
             </body>
             </html>
         )
     }
     
     
     -------------------

  üìÑ page.tsx
     Component Name: HomePage
     Props: className, className, className, className, onResultsChange, className, href, className
     Tailwind Classes: container mx-auto px-4 py-20 text-center text-4xl font-bold mb-4 text-xl mb-8 mt-8 bg-blue-600 text-white px-6 py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors
     -------------------
     Content:
     -------------------
     // app/page.tsx
     'use client'
     
     import Link from 'next/link'
     import SearchAndFilter from '@/components/SearchAndFilter'
     import { FeaturedCompanies } from '@/components/FeaturedCompanies'
     import type { Company } from '@/lib/types'  // Import the Company type
     
     export default function HomePage() {
         const handleResultsChange = (companies: Company[]) => {  // Add type annotation here
             // Handle the results here if needed
             console.log(companies)
         }
     
         return (
             <div className="container mx-auto px-4">
                 <section className="py-20 text-center">
                     <h1 className="text-4xl font-bold mb-4">Find and Rate Top Employers</h1>
                     <p className="text-xl mb-8">Discover the best companies to work for and share your experiences</p>
                     <SearchAndFilter onResultsChange={handleResultsChange} />
                     <div className="mt-8">
                         <Link href="/companies" className="bg-blue-600 text-white px-6 py-3 rounded-lg text-lg font-semibold hover:bg-blue-700 transition-colors">
                             Explore Companies
                         </Link>
                     </div>
                 </section>
                 <FeaturedCompanies />
             </div>
         )
     }
     -------------------

  üìÅ reviews/
    üìÅ new/
      üìÑ page.tsx
         Component Name: NewReview
         Props: className, className, className, companyId
         Tailwind Classes: min-h-screen p-8 text-red-600 min-h-screen p-8
         -------------------
         Content:
         -------------------
         'use client';
         
         import { useSearchParams } from 'next/navigation';
         import ReviewForm from '@/components/ReviewForm';
         
         export default function NewReview() {
             const searchParams = useSearchParams();
             const companyId = searchParams.get('companyId');
         
             // Ensure companyId is always a number or null, never undefined
             const parsedCompanyId = companyId ? parseInt(companyId) : null;
         
             if (!parsedCompanyId) {
                 return (
                     <div className="min-h-screen p-8">
                         <div className="text-red-600">Company ID is required</div>
                     </div>
                 );
             }
         
             return (
                 <div className="min-h-screen p-8">
                     <ReviewForm companyId={parsedCompanyId} />
                 </div>
             );
         }
         -------------------

    üìÑ page.tsx
       Component Name: Reviews
       Props: className, className, className, className, key, company
       Tailwind Classes: p-8 min-h-screen p-8 text-3xl font-bold mb-6 space-y-4
       -------------------
       Content:
       -------------------
       'use client';
       
       import { useEffect, useState } from 'react';
       import { supabase } from '@/lib/supabaseClient';
       import { Review } from '@/lib/types';
       import ReviewCard from '@/components/CompanyCard';
       
       interface ReviewWithCompany extends Review {
         companies: {
           name: string;
           industry: string;
         };
       }
       
       export default function Reviews() {
         const [reviews, setReviews] = useState<ReviewWithCompany[]>([]);
         const [loading, setLoading] = useState(true);
       
         useEffect(() => {
           async function fetchReviews() {
             const { data, error } = await supabase
                 .from('reviews')
                 .select(`
                           *,
                           companies (
                               name,
                               industry
                           )
                       `)
                 .order('created_at', { ascending: false });
       
             if (error) {
               console.error('Error fetching reviews:', error);
             } else {
               setReviews(data || []);
             }
             setLoading(false);
           }
       
           fetchReviews();
         }, []);
       
         if (loading) {
           return <div className="p-8">Loading reviews...</div>;
         }
       
         return (
             <div className="min-h-screen p-8">
               <h1 className="text-3xl font-bold mb-6">Latest Reviews</h1>
               <div className="space-y-4">
                 {reviews.map((review) => (
                     <ReviewCard key={review.id} company={{ id: review.id, ...review.companies }} />
                 ))}
               </div>
             </div>
         );
       }
       
       
       -------------------

  üìÅ test/
    üìÑ page.tsx
       Component Name: TestPage
       Props: className, className, className, className, className
       Tailwind Classes: p-4 text-2xl font-bold mb-4 space-y-2 text-red-500 bg-gray-100 p-2 rounded
       -------------------
       Content:
       -------------------
       'use client'
       
       import { useEffect, useState } from 'react'
       
       
       export default function TestPage() {
           const [status, setStatus] = useState<{
               success?: boolean;
               message?: string;
               data?: any;
               error?: string;
           }>({})
       
           useEffect(() => {
               const testConnection = async () => {
                   try {
                       const response = await fetch('/api/test-connection')
                       const result = await response.json()
                       setStatus(result)
                   } catch (error) {
                       setStatus({
                           success: false,
                           message: 'Failed to make request',
                           error: error instanceof Error ? error.message : 'Unknown error'
                       })
                   }
               }
       
               testConnection()
           }, [])
       
           return (
               <div className="p-4">
                   <h1 className="text-2xl font-bold mb-4">Supabase Connection Test</h1>
                   <div className="space-y-2">
                       <p>Status: {status.success ? '‚úÖ Connected' : status.success === false ? '‚ùå Failed' : '‚è≥ Testing...'}</p>
                       {status.message && <p>Message: {status.message}</p>}
                       {status.error && <p className="text-red-500">Error: {status.error}</p>}
                       {status.data && (
                           <div>
                               <p>Data Preview:</p>
                               <pre className="bg-gray-100 p-2 rounded">
                                   {JSON.stringify(status.data, null, 2)}
                               </pre>
                           </div>
                       )}
                   </div>
               </div>
           )
       }
       
       
       -------------------

üìÅ components/
  üìÑ Auth.tsx
     Component Name: Auth
     Props: className, className, onSubmit, className, className, htmlFor, id, type, value, onChange, className, htmlFor, className, id, type, value, onChange, type, variant, size, className, onClick, className, className, className, type, className, type, variant, className, onClick
     Tailwind Classes: max-w-md mx-auto mt-8 text-center space-y-4 space-y-2 space-y-2 relative absolute right-0 top-0 h-full px-3 h-4 w-4 h-4 w-4 text-sm text-red-500 w-full w-full
     -------------------
     Content:
     -------------------
     'use client';
     
     import { useState } from 'react';
     import { Eye, EyeOff } from 'lucide-react';
     import { Input } from "@/components/ui/input"
     import { Button } from "@/components/ui/button"
     import { Label } from "@/components/ui/label"
     import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
     import { supabase } from '@/lib/supabaseClient';
     import { useRouter } from 'next/navigation';
     
     export default function Auth() {
         const [email, setEmail] = useState('');
         const [password, setPassword] = useState('');
         const [isSignUp, setIsSignUp] = useState(false);
         const [error, setError] = useState<string | null>(null);
         const [showPassword, setShowPassword] = useState(false);
         const router = useRouter();
     
         const handleAuth = async (e: React.FormEvent) => {
             e.preventDefault();
             setError(null);
     
             try {
                 if (isSignUp) {
                     const { error } = await supabase.auth.signUp({
                         email,
                         password,
                     });
                     if (error) throw error;
                     alert('Check your email for the confirmation link!');
                 } else {
                     const { error } = await supabase.auth.signInWithPassword({
                         email,
                         password,
                     });
                     if (error) throw error;
                     router.push('/dashboard');
                 }
             } catch (error) {
                 setError(error instanceof Error ? error.message : 'An error occurred');
             }
         };
     
         return (
             <Card className="max-w-md mx-auto mt-8">
                 <CardHeader>
                     <CardTitle className="text-center">{isSignUp ? 'Sign Up' : 'Sign In'}</CardTitle>
                 </CardHeader>
                 <CardContent>
                     <form onSubmit={handleAuth} className="space-y-4">
                         <div className="space-y-2">
                             <Label htmlFor="email">Email</Label>
                             <Input
                                 id="email"
                                 type="email"
                                 value={email}
                                 onChange={(e) => setEmail(e.target.value)}
                                 required
                             />
                         </div>
                         <div className="space-y-2">
                             <Label htmlFor="password">Password</Label>
                             <div className="relative">
                                 <Input
                                     id="password"
                                     type={showPassword ? 'text' : 'password'}
                                     value={password}
                                     onChange={(e) => setPassword(e.target.value)}
                                     required
                                 />
                                 <Button
                                     type="button"
                                     variant="ghost"
                                     size="sm"
                                     className="absolute right-0 top-0 h-full px-3"
                                     onClick={() => setShowPassword(!showPassword)}
                                 >
                                     {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                                 </Button>
                             </div>
                         </div>
                         {error && (
                             <p className="text-sm text-red-500">{error}</p>
                         )}
                         <Button type="submit" className="w-full">
                             {isSignUp ? 'Sign Up' : 'Sign In'}
                         </Button>
                         <Button
                             type="button"
                             variant="link"
                             className="w-full"
                             onClick={() => setIsSignUp(!isSignUp)}
                         >
                             {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
                         </Button>
                     </form>
                 </CardContent>
             </Card>
         );
     }
     
     -------------------

  üìÑ CompanyCard.tsx
     Component Name: CompanyCard
     Props: className, href, className, className, className, className, className, className, className, className, className, onClick, className, className, className, className, className, className, className, className, className, className, className, href, className, href, className
     Tailwind Classes: bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 p-6 flex justify-between items-start text-4xl font-bold text-sm flex-grow px-6 text-2xl font-bold text-gray-900 text-gray-600 text-gray-500 text-sm text-gray-400 hover:text-gray-600 h-6 w-6 h-6 w-6 mt-4 flex items-center space-x-4 text-gray-700 text-gray-300 text-gray-700 mt-4 flex flex-wrap gap-2 px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded mt-4 pt-4 border-t border-gray-200 flex space-x-4 text-blue-600 hover:text-blue-800 font-medium text-gray-600 hover:text-gray-800 font-medium
     -------------------
     Content:
     -------------------
     // components/CompanyCard.tsx  
     'use client';
     
     import Link from 'next/link';
     import { useState, useEffect } from 'react';
     import { supabase } from '@/lib/supabaseClient';
     import { StarIcon, BookmarkIcon } from '@heroicons/react/24/outline';
     import { BookmarkIcon as BookmarkSolidIcon } from '@heroicons/react/24/solid';
     
     interface Company {
         id?: number;
         name: string;
         industry: string;
         description?: string;
         website?: string;
         location?: string;
         founded_year?: number;
         size?: string;
         logo_url?: string;
     }
     
     interface CompanyCardProps {
         company: Company;
     }
     
     interface ReviewStats {
         average_rating: number;
         total_reviews: number;
         would_work_again: number;
         difficulty_level: number;
     }
     
     export default function CompanyCard({ company }: CompanyCardProps) {
         const [stats, setStats] = useState<ReviewStats>({
             average_rating: 0,
             total_reviews: 0,
             would_work_again: 0,
             difficulty_level: 0
         });
         const [isLoading, setIsLoading] = useState(true);
         const [isBookmarked, setIsBookmarked] = useState(false);
     
         useEffect(() => {
             async function fetchReviewStats() {
                 const { data, error } = await supabase
                     .from('reviews')
                     .select('rating, would_work_again, difficulty_level')
                     .eq('company_id', company.id);
     
                 if (error) {
                     console.error('Error fetching reviews:', error);
                     return;
                 }
     
                 if (data && data.length > 0) {
                     const average = data.reduce((acc, review) => acc + review.rating, 0) / data.length;
                     const wouldWorkAgain = (data.filter(r => r.would_work_again).length / data.length) * 100;
                     const avgDifficulty = data.reduce((acc, review) => acc + (review.difficulty_level || 0), 0) / data.length;
     
                     setStats({
                         average_rating: Number(average.toFixed(1)),
                         total_reviews: data.length,
                         would_work_again: Number(wouldWorkAgain.toFixed(0)),
                         difficulty_level: Number(avgDifficulty.toFixed(1))
                     });
                 }
                 setIsLoading(false);
             }
     
             fetchReviewStats();
         }, [company.id]);
     
         const handleBookmark = (e: React.MouseEvent) => {
             e.preventDefault();
             setIsBookmarked(!isBookmarked);
         };
     
         const getQualityColor = (rating: number) => {
             if (rating >= 4) return 'bg-green-100 text-green-800';
             if (rating >= 3) return 'bg-yellow-100 text-yellow-800';
             return 'bg-red-100 text-red-800';
         };
     
         return (
             <div className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300">
                 <Link href={`/companies/${company.id}`}>
                     <div className="p-6">
                         <div className="flex justify-between items-start">
                             {/* Quality Score */}
                             <div className={`${getQualityColor(stats.average_rating)} p-4 rounded-lg text-center`}>
                                 <div className="text-4xl font-bold">{stats.average_rating}</div>
                                 <div className="text-sm">/ 5</div>
                             </div>
     
                             {/* Company Info */}
                             <div className="flex-grow px-6">
                                 <h2 className="text-2xl font-bold text-gray-900">
                                     {company.name}
                                 </h2>
                                 <p className="text-gray-600">{company.industry}</p>
                                 {company.location && (
                                     <p className="text-gray-500 text-sm">{company.location}</p>
                                 )}
                             </div>
     
                             {/* Bookmark Button */}
                             <button
                                 onClick={handleBookmark}
                                 className="text-gray-400 hover:text-gray-600"
                             >
                                 {isBookmarked ? (
                                     <BookmarkSolidIcon className="h-6 w-6" />
                                 ) : (
                                     <BookmarkIcon className="h-6 w-6" />
                                 )}
                             </button>
                         </div>
     
                         {/* Stats */}
                         <div className="mt-4 flex items-center space-x-4">
                             <span className="text-gray-700">{stats.would_work_again}% would work again</span>
                             <span className="text-gray-300">|</span>
                             <span className="text-gray-700">Level of Difficulty: {stats.difficulty_level}</span>
                         </div>
     
                         {/* Additional Info */}
                         <div className="mt-4 flex flex-wrap gap-2">
                             {company.size && (
                                 <span className="px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded">  
                                     {company.size} employees  
                                 </span>
                             )}
                             {company.founded_year && (
                                 <span className="px-2 py-1 bg-gray-100 text-gray-800 text-sm rounded">  
                                     Founded {company.founded_year}  
                                 </span>
                             )}
                         </div>
     
                         {/* Actions */}
                         <div className="mt-4 pt-4 border-t border-gray-200 flex space-x-4">
                             <Link
                                 href={`/reviews/new?companyId=${company.id}`}
                                 className="text-blue-600 hover:text-blue-800 font-medium"
                             >
                                 Rate
                             </Link>
                             <Link
                                 href={`/companies/compare?id=${company.id}`}
                                 className="text-gray-600 hover:text-gray-800 font-medium"
                             >
                                 Compare
                             </Link>
                         </div>
                     </div>
                 </Link>
             </div>
         );
     }  
     -------------------

  üìÑ FeaturedCompanies.tsx
     Component Name: N/A
     Props: className, className, className, key, company
     Tailwind Classes: py-12 text-3xl font-bold mb-8 text-center grid grid-cols-1 md:grid-cols-3 gap-8
     -------------------
     Content:
     -------------------
     'use client'
     
     import { useState, useEffect } from 'react'
     import { supabase } from '@/lib/supabaseClient'
     import { Company } from '@/lib/types'
     import CompanyCard from '@/components/CompanyCard'
     
     export function FeaturedCompanies() {
         const [companies, setCompanies] = useState<Company[]>([])
     
         useEffect(() => {
             async function fetchFeaturedCompanies() {
                 const { data, error } = await supabase
                     .from('companies')
                     .select('*')
                     .order('average_rating', { ascending: false })
                     .limit(3)
     
                 if (error) {
                     console.error('Error fetching featured companies:', error)
                 } else {
                     setCompanies(data || [])
                 }
             }
     
             fetchFeaturedCompanies()
         }, [])
     
         return (
             <section className="py-12">
                 <h2 className="text-3xl font-bold mb-8 text-center">Featured Companies</h2>
                 <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                     {companies.map(company => (
                         <CompanyCard key={company.id} company={company} />
                     ))}
                 </div>
             </section>
         )
     }
     
     
     -------------------

  üìÑ Footer.tsx
     Component Name: N/A
     Props: className, className, className, className, className, className, className, href, className, href, className, href, className, href, className, className, className, href, className, href, className, className, className, href, className, className, className, fill, viewBox, fillRule, d, clipRule, href, className, className, className, fill, viewBox, d, href, className, className, className, fill, viewBox, fillRule, d, clipRule, className, className
     Tailwind Classes: bg-gray-100 container mx-auto px-4 py-8 grid grid-cols-1 md:grid-cols-4 gap-8 text-lg font-semibold mb-4 text-sm text-gray-600 text-lg font-semibold mb-4 space-y-2 text-sm text-gray-600 hover:text-blue-600 text-sm text-gray-600 hover:text-blue-600 text-sm text-gray-600 hover:text-blue-600 text-sm text-gray-600 hover:text-blue-600 text-lg font-semibold mb-4 space-y-2 text-sm text-gray-600 hover:text-blue-600 text-sm text-gray-600 hover:text-blue-600 text-lg font-semibold mb-4 flex space-x-4 text-gray-600 hover:text-blue-600 sr-only h-6 w-6 text-gray-600 hover:text-blue-600 sr-only h-6 w-6 text-gray-600 hover:text-blue-600 sr-only h-6 w-6 mt-8 border-t border-gray-200 pt-8 text-center text-sm text-gray-600
     -------------------
     Content:
     -------------------
     import Link from 'next/link'
     
     export function Footer() {
         return (
             <footer className="bg-gray-100">
                 <div className="container mx-auto px-4 py-8">
                     <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                         <div>
                             <h3 className="text-lg font-semibold mb-4">About Us</h3>
                             <p className="text-sm text-gray-600">
                                 RateMyEmployer helps job seekers find great places to work by providing authentic employee reviews and ratings.
                             </p>
                         </div>
                         <div>
                             <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
                             <ul className="space-y-2">
                                 <li><Link href="/companies" className="text-sm text-gray-600 hover:text-blue-600">Companies</Link></li>
                                 <li><Link href="/reviews" className="text-sm text-gray-600 hover:text-blue-600">Reviews</Link></li>
                                 <li><Link href="/about" className="text-sm text-gray-600 hover:text-blue-600">About Us</Link></li>
                                 <li><Link href="/contact" className="text-sm text-gray-600 hover:text-blue-600">Contact</Link></li>
                             </ul>
                         </div>
                         <div>
                             <h3 className="text-lg font-semibold mb-4">Legal</h3>
                             <ul className="space-y-2">
                                 <li><Link href="/privacy" className="text-sm text-gray-600 hover:text-blue-600">Privacy Policy</Link></li>
                                 <li><Link href="/terms" className="text-sm text-gray-600 hover:text-blue-600">Terms of Service</Link></li>
                             </ul>
                         </div>
                         <div>
                             <h3 className="text-lg font-semibold mb-4">Connect With Us</h3>
                             <div className="flex space-x-4">
                                 <a href="#" className="text-gray-600 hover:text-blue-600">
                                     <span className="sr-only">Facebook</span>
                                     <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                         <path fillRule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clipRule="evenodd" />
                                     </svg>
                                 </a>
                                 <a href="#" className="text-gray-600 hover:text-blue-600">
                                     <span className="sr-only">Twitter</span>
                                     <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                         <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                                     </svg>
                                 </a>
                                 <a href="#" className="text-gray-600 hover:text-blue-600">
                                     <span className="sr-only">LinkedIn</span>
                                     <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                         <path fillRule="evenodd" d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z" clipRule="evenodd" />
                                     </svg>
                                 </a>
                             </div>
                         </div>
                     </div>
                     <div className="mt-8 border-t border-gray-200 pt-8 text-center">
                         <p className="text-sm text-gray-600">&copy; 2023 RateMyEmployer. All rights reserved.</p>
                     </div>
                 </div>
             </footer>
         )
     }
     
     
     -------------------

  üìÑ Navbar.tsx
     Component Name: N/A
     Props: className, className, className, href, className, className, href, className, href, className, className, className, className, className, href, className, onClick, className, href, className, className, onClick, className, className, className, href, className, href, className, href, className, onClick, className, href, className
     Tailwind Classes: bg-white shadow-md container mx-auto px-4 flex justify-between items-center py-4 text-2xl font-bold text-blue-600 hidden md:flex items-center space-x-6 text-gray-600 hover:text-blue-600 text-gray-600 hover:text-blue-600 relative group flex items-center text-gray-600 hover:text-blue-600 ml-1 h-4 w-4 absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden group-hover:block block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 md:hidden h-6 w-6 h-6 w-6 md:hidden block py-2 px-4 text-sm hover:bg-gray-200 block py-2 px-4 text-sm hover:bg-gray-200 block py-2 px-4 text-sm hover:bg-gray-200 block w-full text-left py-2 px-4 text-sm hover:bg-gray-200 block py-2 px-4 text-sm hover:bg-gray-200
     -------------------
     Content:
     -------------------
     'use client'
     
     import Link from 'next/link'
     import { useState } from 'react'
     import { useAuth } from '@/contexts/AuthContext'
     import { Menu, X, ChevronDown } from 'lucide-react'
     
     export function Navbar() {
       const [isMenuOpen, setIsMenuOpen] = useState(false)
       const { user, signOut } = useAuth()
     
       return (
           <nav className="bg-white shadow-md">
             <div className="container mx-auto px-4">
               <div className="flex justify-between items-center py-4">
                 <Link href="/" className="text-2xl font-bold text-blue-600">
                   RateMyEmployer
                 </Link>
                 <div className="hidden md:flex items-center space-x-6">
                   <Link href="/companies" className="text-gray-600 hover:text-blue-600">
                     Companies
                   </Link>
                   <Link href="/reviews" className="text-gray-600 hover:text-blue-600">
                     Reviews
                   </Link>
                   {user ? (
                       <div className="relative group">
                         <button className="flex items-center text-gray-600 hover:text-blue-600">
                           {user.email}
                           <ChevronDown className="ml-1 h-4 w-4" />
                         </button>
                         <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg hidden group-hover:block">
                           <Link href="/profile" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                             Profile
                           </Link>
                           <button
                               onClick={signOut}
                               className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                           >
                             Sign Out
                           </button>
                         </div>
                       </div>
                   ) : (
                       <Link
                           href="/auth/login"
                           className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                       >
                         Sign In
                       </Link>
                   )}
                 </div>
                 <button
                     className="md:hidden"
                     onClick={() => setIsMenuOpen(!isMenuOpen)}
                 >
                   {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
                 </button>
               </div>
             </div>
             {isMenuOpen && (
                 <div className="md:hidden">
                   <Link href="/companies" className="block py-2 px-4 text-sm hover:bg-gray-200">
                     Companies
                   </Link>
                   <Link href="/reviews" className="block py-2 px-4 text-sm hover:bg-gray-200">
                     Reviews
                   </Link>
                   {user ? (
                       <>
                         <Link href="/profile" className="block py-2 px-4 text-sm hover:bg-gray-200">
                           Profile
                         </Link>
                         <button
                             onClick={signOut}
                             className="block w-full text-left py-2 px-4 text-sm hover:bg-gray-200"
                         >
                           Sign Out
                         </button>
                       </>
                   ) : (
                       <Link href="/auth/login" className="block py-2 px-4 text-sm hover:bg-gray-200">
                         Sign In
                       </Link>
                   )}
                 </div>
             )}
           </nav>
       )
     }
     
     
     -------------------

  üìÑ ReviewCard.tsx
     Component Name: N/A
     Props: className, className, className, className, className, className, className, className, className, className, className
     Tailwind Classes: bg-white rounded-lg shadow p-6 text-xl font-semibold mb-2 text-gray-600 mb-2 text-gray-600 mb-2 mb-2 font-semibold text-gray-700 font-semibold text-gray-700 mt-4 text-gray-500 text-sm
     -------------------
     Content:
     -------------------
     // components/ReviewCard.tsx
     import React from 'react';
     import { Review } from '@/lib/types';
     
     interface ReviewCardProps {
         review: Review;
     }
     
     const ReviewCard: React.FC<ReviewCardProps> = ({ review }) => {
         return (
             <div className="bg-white rounded-lg shadow p-6">
                 <h3 className="text-xl font-semibold mb-2">{review.title}</h3>
                 <p className="text-gray-600 mb-2">
                     <strong>Position:</strong> {review.position}
                 </p>
                 <p className="text-gray-600 mb-2">
                     <strong>Employment Status:</strong> {review.employment_status}
                 </p>
                 <div className="mb-2">
                     <p className="font-semibold">Pros:</p>
                     <p className="text-gray-700">{review.pros}</p>
                 </div>
                 <div>
                     <p className="font-semibold">Cons:</p>
                     <p className="text-gray-700">{review.cons}</p>
                 </div>
                 <div className="mt-4">
                     <p className="text-gray-500 text-sm">
                         <strong>Rating:</strong> {review.rating} / 5
                     </p>
                 </div>
             </div>
         );
     };
     
     export default ReviewCard;
     -------------------

  üìÑ ReviewFilters.tsx
     Component Name: ReviewFilters
     Props: className, className, value, onChange, className, value, key, value, className, value, onChange, className, value, value, value, className, value, onChange, className, value, value, value, value, className, value, onChange, className, value, value, value, value
     Tailwind Classes: space-y-4 block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm
     -------------------
     Content:
     -------------------
     // components/ReviewFilters.tsx
     'use client';
     import { type } from "os";
     
     type SortType = 'newest' | 'oldest' | 'highest' | 'lowest';
     
     interface Filters {
         minRating: number;
         employmentStatus: string;
         dateRange: string;
     }
     
     interface ReviewFiltersProps {
         currentFilters: Filters;
         currentSort: SortType;
     }
     
     export default function ReviewFilters({ currentFilters, currentSort }: ReviewFiltersProps) {
         const dispatchFilterChange = (key: keyof Filters, value: any) => {
             const event = new CustomEvent('filterChange', {
                 detail: { key, value }
             });
             window.dispatchEvent(event);
         };
     
         const dispatchSortChange = (sort: SortType) => {
             const event = new CustomEvent('sortChange', {
                 detail: sort
             });
             window.dispatchEvent(event);
         };
     
         return (
             <div className="space-y-4">
                 {/* Rating Filter */}
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Minimum Rating</label>
                     <select
                         value={currentFilters.minRating}
                         onChange={(e) => dispatchFilterChange('minRating', Number(e.target.value))}
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     >
                         <option value={0}>All Ratings</option>
                         {[1, 2, 3, 4, 5].map((rating) => (
                             <option key={rating} value={rating}>{rating}+ Stars</option>
                         ))}
                     </select>
                 </div>
     
                 {/* Employment Status Filter */}
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Employment Status</label>
                     <select
                         value={currentFilters.employmentStatus}
                         onChange={(e) => dispatchFilterChange('employmentStatus', e.target.value)}
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     >
                         <option value="all">All</option>
                         <option value="current">Current Employee</option>
                         <option value="former">Former Employee</option>
                     </select>
                 </div>
     
                 {/* Date Range Filter */}
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Time Period</label>
                     <select
                         value={currentFilters.dateRange}
                         onChange={(e) => dispatchFilterChange('dateRange', e.target.value)}
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     >
                         <option value="all">All Time</option>
                         <option value="month">Last Month</option>
                         <option value="6months">Last 6 Months</option>
                         <option value="year">Last Year</option>
                     </select>
                 </div>
     
                 {/* Sort Options */}
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Sort By</label>
                     <select
                         value={currentSort}
                         onChange={(e) => dispatchSortChange(e.target.value as SortType)}
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     >
                         <option value="newest">Newest First</option>
                         <option value="oldest">Oldest First</option>
                         <option value="highest">Highest Rated</option>
                         <option value="lowest">Lowest Rated</option>
                     </select>
                 </div>
             </div>
         );
     }
     
     // Make sure to export the types if they're needed elsewhere
     export type { ReviewFiltersProps, Filters, SortType };
     -------------------

  üìÑ ReviewForm.tsx
     Component Name: ReviewForm
     Props: onSubmit, className, className, type, name, min, max, value, onChange, className, className, type, name, value, onChange, className, className, type, name, value, onChange, className, className, name, value, onChange, className, value, value, value, value, value, className, name, value, onChange, className, rows, className, name, value, onChange, className, rows, type, disabled, className
     Tailwind Classes: space-y-4 max-w-2xl mx-auto p-4 block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm block text-sm font-medium text-gray-700 mt-1 block w-full rounded-md border-gray-300 shadow-sm w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50
     -------------------
     Content:
     -------------------
     // src/components/ReviewForm.tsx
     import { useState } from 'react';
     import { supabase } from '@/lib/supabaseClient';
     
     interface ReviewFormProps {
         companyId: number;
     }
     
     export default function ReviewForm({ companyId }: ReviewFormProps) {
         const [formData, setFormData] = useState({
             rating: 0,
             title: '',
             pros: '',
             cons: '',
             position: '',
             employment_status: 'Full-time'
         });
         const [isSubmitting, setIsSubmitting] = useState(false);
     
         const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
             const { name, value } = e.target;
             setFormData(prev => ({
                 ...prev,
                 [name]: name === 'rating' ? Number(value) : value
             }));
         };
     
         const handleSubmit = async (e: React.FormEvent) => {
             e.preventDefault();
             setIsSubmitting(true);
     
             try {
                 const { error } = await supabase
                     .from('reviews')
                     .insert([{
                         company_id: companyId,
                         ...formData
                     }]);
     
                 if (error) throw error;
     
                 // Clear form
                 setFormData({
                     rating: 0,
                     title: '',
                     pros: '',
                     cons: '',
                     position: '',
                     employment_status: 'Full-time'
                 });
                 alert('Review submitted successfully!');
             } catch (error) {
                 console.error('Error submitting review:', error);
                 alert('Failed to submit review. Please try again.');
             } finally {
                 setIsSubmitting(false);
             }
         };
     
         return (
             <form onSubmit={handleSubmit} className="space-y-4 max-w-2xl mx-auto p-4">
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Rating (1-5)</label>
                     <input
                         type="number"
                         name="rating"
                         min="1"
                         max="5"
                         value={formData.rating}
                         onChange={handleChange}
                         required
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     />
                 </div>
     
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Review Title</label>
                     <input
                         type="text"
                         name="title"
                         value={formData.title}
                         onChange={handleChange}
                         required
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     />
                 </div>
     
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Position</label>
                     <input
                         type="text"
                         name="position"
                         value={formData.position}
                         onChange={handleChange}
                         required
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     />
                 </div>
     
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Employment Status</label>
                     <select
                         name="employment_status"
                         value={formData.employment_status}
                         onChange={handleChange}
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                     >
                         <option value="Full-time">Full-time</option>
                         <option value="Part-time">Part-time</option>
                         <option value="Contract">Contract</option>
                         <option value="Intern">Intern</option>
                         <option value="Former Employee">Former Employee</option>
                     </select>
                 </div>
     
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Pros</label>
                     <textarea
                         name="pros"
                         value={formData.pros}
                         onChange={handleChange}
                         required
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                         rows={3}
                     />
                 </div>
     
                 <div>
                     <label className="block text-sm font-medium text-gray-700">Cons</label>
                     <textarea
                         name="cons"
                         value={formData.cons}
                         onChange={handleChange}
                         required
                         className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                         rows={3}
                     />
                 </div>
     
                 <button
                     type="submit"
                     disabled={isSubmitting}
                     className="w-full bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
                 >
                     {isSubmitting ? 'Submitting...' : 'Submit Review'}
                 </button>
             </form>
         );
     }
     -------------------

  üìÑ search-form.tsx
     Component Name: N/A
     Props: className, onSubmit, className, className, type, placeholder, className, type, className
     Tailwind Classes: w-full max-w-2xl mx-auto relative absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground pl-10 h-12 text-lg absolute right-1 top-1/2 -translate-y-1/2
     -------------------
     Content:
     -------------------
     "use client"
     
     import { Search } from 'lucide-react'
     import { Input } from "@/components/ui/input"
     import { Button } from "@/components/ui/button"
     
     export function SearchForm() {
         return (
             <form className="w-full max-w-2xl mx-auto" onSubmit={(e) => e.preventDefault()}>
                 <div className="relative">
                     <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                     <Input
                         type="search"
                         placeholder="Search for your professor"
                         className="pl-10 h-12 text-lg"
                     />
                     <Button
                         type="submit"
                         className="absolute right-1 top-1/2 -translate-y-1/2"
                     >
                         Search
                     </Button>
                 </div>
             </form>
         )
     }
     
     
     -------------------

  üìÑ SearchAndFilter.tsx
     Component Name: SearchAndFilter
     Props: className, className, className, type, placeholder, value, onChange, className, value, onValueChange, placeholder, value, value, value, value, value, value
     Tailwind Classes: space-y-4 relative absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground pl-10
     -------------------
     Content:
     -------------------
     'use client'
     
     import { useState, useEffect } from 'react'
     import { Search } from 'lucide-react'
     import { Input } from "@/components/ui/input"
     import { Button } from "@/components/ui/button"
     import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
     import { supabase } from '@/lib/supabaseClient'
     import type { Company } from '@/lib/types'
     
     interface SearchAndFilterProps {
         onResultsChange?: (companies: Company[]) => void
     }
     
     export default function SearchAndFilter({ onResultsChange }: SearchAndFilterProps) {
         const [searchTerm, setSearchTerm] = useState('')
         const [selectedIndustry, setSelectedIndustry] = useState('all')
     
         useEffect(() => {
             const fetchCompanies = async () => {
                 let query = supabase.from('companies').select('*')
     
                 if (searchTerm) {
                     query = query.ilike('name', `%${searchTerm}%`)
                 }
     
                 if (selectedIndustry !== 'all') {
                     query = query.eq('industry', selectedIndustry)
                 }
     
                 const { data, error } = await query
     
                 if (error) {
                     console.error('Error fetching companies:', error)
                     return
                 }
     
                 onResultsChange?.(data || [])        }
     
             fetchCompanies()
         }, [searchTerm, selectedIndustry, onResultsChange])
     
         return (
             <div className="space-y-4">
                 <div className="relative">
                     <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                     <Input
                         type="search"
                         placeholder="Search companies..."
                         value={searchTerm}
                         onChange={(e) => setSearchTerm(e.target.value)}
                         className="pl-10"
                     />
                 </div>
                 <Select value={selectedIndustry} onValueChange={setSelectedIndustry}>
                     <SelectTrigger>
                         <SelectValue placeholder="Select industry" />
                     </SelectTrigger>
                     <SelectContent>
                         <SelectItem value="all">All Industries</SelectItem>
                         <SelectItem value="Technology">Technology</SelectItem>
                         <SelectItem value="Finance">Finance</SelectItem>
                         <SelectItem value="Healthcare">Healthcare</SelectItem>
                         <SelectItem value="Retail">Retail</SelectItem>
                         <SelectItem value="Manufacturing">Manufacturing</SelectItem>
                     </SelectContent>
                 </Select>
             </div>
         )
     }
     
     
     -------------------

  üìÑ SearchAndFilter.tsx~
  üìÅ ui/
    üìÑ button.tsx
       Component Name: N/A
       Props: className, ref
       Tailwind Classes: None
       -------------------
       Content:
       -------------------
       
       import * as React from "react"
       
       type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {
           variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'
           size?: 'default' | 'sm' | 'lg'
       };
       
       const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
           ({ className, children, ...props }, ref) => {
               return (
                   <button
                       className={className}
                       ref={ref}
                       {...props}
                   >
                       {children}
                   </button>
               )
           }
       )
       Button.displayName = "Button"
       
       export { Button }
       -------------------

    üìÑ card.tsx
       Component Name: N/A
       Props: ref, className, ref, className, ref, className
       Tailwind Classes: None
       -------------------
       Content:
       -------------------
       
       import * as React from "react"
       
       export const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
           ({ className, ...props }, ref) => (
               <div ref={ref} className={className} {...props} />
           )
       )
       Card.displayName = "Card"
       
       export const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
           ({ className, ...props }, ref) => (
               <div ref={ref} className={className} {...props} />
           )
       )
       CardHeader.displayName = "CardHeader"
       
       export const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
           ({ className, ...props }, ref) => (
               <div ref={ref} className={className} {...props} />
           )
       )
       CardContent.displayName = "CardContent"
       -------------------

    üìÑ index.ts
       Component Name: N/A
       Props: None
       Tailwind Classes: None
       -------------------
       Content:
       -------------------
       
       export * from './input'
       export * from './button'
       export * from './card'
       -------------------

    üìÑ input.tsx
       Component Name: N/A
       Props: type, className, ref
       Tailwind Classes: None
       -------------------
       Content:
       -------------------
       
       import * as React from "react"
       
       type InputProps = React.InputHTMLAttributes<HTMLInputElement>;
       
       const Input = React.forwardRef<HTMLInputElement, InputProps>(
           ({ className, type, ...props }, ref) => {
               return (
                   <input
                       type={type}
                       className={className}
                       ref={ref}
                       {...props}
                   />
               )
           }
       )
       Input.displayName = "Input"
       
       export { Input }
       -------------------

    üìÑ label.tsx
       Component Name: N/A
       Props: ref, className
       Tailwind Classes: None
       -------------------
       Content:
       -------------------
       // src/components/ui/label.tsx
       import * as React from "react"
       import * as LabelPrimitive from "@radix-ui/react-label"
       import { cn } from "@/lib/utils"
       
       const Label = React.forwardRef<
           React.ElementRef<typeof LabelPrimitive.Root>,
           React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
       >(({ className, ...props }, ref) => (
           <LabelPrimitive.Root
               ref={ref}
               className={cn(
                   "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
                   className
               )}
               {...props}
           />
       ))
       Label.displayName = LabelPrimitive.Root.displayName
       
       export { Label }
       -------------------

    üìÑ select.tsx
       Component Name: N/A
       Props: ref, className, className, ref, className, position, className, ref, className, ref, className, className, className, ref, className
       Tailwind Classes: h-4 w-4 opacity-50 absolute left-2 flex h-3.5 w-3.5 items-center justify-center h-4 w-4
       -------------------
       Content:
       -------------------
       "use client"
       
       import * as React from "react"
       import * as SelectPrimitive from "@radix-ui/react-select"
       import { Check, ChevronDown } from "lucide-react"
       
       import { cn } from "@/lib/utils"
       
       const Select = SelectPrimitive.Root
       
       const SelectGroup = SelectPrimitive.Group
       
       const SelectValue = SelectPrimitive.Value
       
       const SelectTrigger = React.forwardRef<
           React.ElementRef<typeof SelectPrimitive.Trigger>,
           React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
       >(({ className, children, ...props }, ref) => (
           <SelectPrimitive.Trigger
               ref={ref}
               className={cn(
                   "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                   className
               )}
               {...props}
           >
               {children}
               <SelectPrimitive.Icon asChild>
                   <ChevronDown className="h-4 w-4 opacity-50" />
               </SelectPrimitive.Icon>
           </SelectPrimitive.Trigger>
       ))
       SelectTrigger.displayName = SelectPrimitive.Trigger.displayName
       
       const SelectContent = React.forwardRef<
           React.ElementRef<typeof SelectPrimitive.Content>,
           React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
       >(({ className, children, position = "popper", ...props }, ref) => (
           <SelectPrimitive.Portal>
               <SelectPrimitive.Content
                   ref={ref}
                   className={cn(
                       "relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
                       position === "popper" &&
                       "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
                       className
                   )}
                   position={position}
                   {...props}
               >
                   <SelectPrimitive.Viewport
                       className={cn(
                           "p-1",
                           position === "popper" &&
                           "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
                       )}
                   >
                       {children}
                   </SelectPrimitive.Viewport>
               </SelectPrimitive.Content>
           </SelectPrimitive.Portal>
       ))
       SelectContent.displayName = SelectPrimitive.Content.displayName
       
       const SelectLabel = React.forwardRef<
           React.ElementRef<typeof SelectPrimitive.Label>,
           React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
       >(({ className, ...props }, ref) => (
           <SelectPrimitive.Label
               ref={ref}
               className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
               {...props}
           />
       ))
       SelectLabel.displayName = SelectPrimitive.Label.displayName
       
       const SelectItem = React.forwardRef<
           React.ElementRef<typeof SelectPrimitive.Item>,
           React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
       >(({ className, children, ...props }, ref) => (
           <SelectPrimitive.Item
               ref={ref}
               className={cn(
                   "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
                   className
               )}
               {...props}
           >
           <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
             <SelectPrimitive.ItemIndicator>
               <Check className="h-4 w-4" />
             </SelectPrimitive.ItemIndicator>
           </span>
       
               <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
           </SelectPrimitive.Item>
       ))
       SelectItem.displayName = SelectPrimitive.Item.displayName
       
       const SelectSeparator = React.forwardRef<
           React.ElementRef<typeof SelectPrimitive.Separator>,
           React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
       >(({ className, ...props }, ref) => (
           <SelectPrimitive.Separator
               ref={ref}
               className={cn("-mx-1 my-1 h-px bg-muted", className)}
               {...props}
           />
       ))
       SelectSeparator.displayName = SelectPrimitive.Separator.displayName
       
       export {
           Select,
           SelectGroup,
           SelectValue,
           SelectTrigger,
           SelectContent,
           SelectLabel,
           SelectItem,
           SelectSeparator,
       }
       -------------------

üìÅ contexts/
  üìÑ AuthContext.tsx
     Component Name: N/A
     Props: value
     Tailwind Classes: None
     -------------------
     Content:
     -------------------
     'use client';
     import { createContext, useContext, useEffect, useState } from 'react';
     import { User, Session } from '@supabase/supabase-js';
     import { supabase } from '@/lib/supabaseClient';
     
     interface AuthContextType {
         user: User | null;
         session: Session | null;
         signOut: () => Promise<void>;
     }
     
     const AuthContext = createContext<AuthContextType>({
         user: null,
         session: null,
         signOut: async () => {},
     });
     
     export function AuthProvider({ children }: { children: React.ReactNode }) {
         const [user, setUser] = useState<User | null>(null);
         const [session, setSession] = useState<Session | null>(null);
     
         useEffect(() => {
             supabase.auth.getSession().then(({ data: { session } }) => {
                 setSession(session);
                 setUser(session?.user ?? null);
             });
     
             const {
                 data: { subscription },
             } = supabase.auth.onAuthStateChange((_event, session) => {
                 setSession(session);
                 setUser(session?.user ?? null);
             });
     
             return () => subscription.unsubscribe();
         }, []);
     
         const signOut = async () => {
             await supabase.auth.signOut();
         };
     
         return (
             <AuthContext.Provider value={{ user, session, signOut }}>
                 {children}
             </AuthContext.Provider>
         );
     }
     
     export const useAuth = () => useContext(AuthContext);
     -------------------

üìÅ lib/
  üìÑ supabaseClient.ts
     Component Name: N/A
     Props: None
     Tailwind Classes: None
     -------------------
     Content:
     -------------------
     // src/lib/supabaseClient.ts
     import { createClient } from '@supabase/supabase-js'
     
     if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {
         throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL')
     }
     
     if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
         throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY')
     }
     
     export const supabase = createClient(
         process.env.NEXT_PUBLIC_SUPABASE_URL,
         process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
     )
     -------------------

  üìÑ types.ts
     Component Name: N/A
     Props: None
     Tailwind Classes: None
     -------------------
     Content:
     -------------------
     // lib/types.ts
     export interface Company {
         id: number;
         name: string;
         industry: string;
         description?: string;
         location?: string;
         size?: string;
         founded_year?: number;
         logo_url?: string;
         average_rating?: number;
     }
     
     export interface Review {
         id: number;
         company_id: number;
         rating: number;
         title: string;
         pros: string;
         cons: string;
         position: string;
         employment_status: string;
         created_at: string;
     }
     
     export interface Database {
         public: {
             Tables: {
                 companies: {
                     Row: Company;
                     Insert: Omit<Company, 'id' | 'created_at'>;
                     Update: Partial<Company>;
                 };
                 reviews: {
                     Row: Review;
                     Insert: Omit<Review, 'id' | 'created_at'>;
                     Update: Partial<Review>;
                 };
             };
         }
     }
     -------------------

  üìÑ utils.ts
     Component Name: N/A
     Props: None
     Tailwind Classes: None
     -------------------
     Content:
     -------------------
     import { type ClassValue, clsx } from "clsx"
     import { twMerge } from "tailwind-merge"
     
     export function cn(...inputs: ClassValue[]) {
         return twMerge(clsx(inputs))
     }
     -------------------

üìÑ middleware.ts
   Component Name: N/A
   Props: None
   Tailwind Classes: None
   -------------------
   Content:
   -------------------
   
   import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';
   import { NextResponse } from 'next/server';
   import type { NextRequest } from 'next/server';
   
   export async function middleware(req: NextRequest) {
       const res = NextResponse.next();
       const supabase = createMiddlewareClient({ req, res });
   
       const {
           data: { session },
       } = await supabase.auth.getSession();
   
       // Protected routes
       const protectedPaths = ['/reviews/new', '/profile'];
       const isProtectedPath = protectedPaths.some(path =>
           req.nextUrl.pathname.startsWith(path)
       );
   
       if (isProtectedPath && !session) {
           const redirectUrl = new URL('/auth/login', req.url);
           redirectUrl.searchParams.set('redirectTo', req.nextUrl.pathname);
           return NextResponse.redirect(redirectUrl);
       }
   
       return res;
   }
   
   export const config = {
       matcher: [
           '/reviews/new/:path*',
           '/profile/:path*',
       ],
   };
   -------------------

üìÅ types/
  üìÑ index.ts
     Component Name: N/A
     Props: None
     Tailwind Classes: None
     -------------------
     Content:
     -------------------
     // src/types/index.ts
     export interface Company {
         id: number;
         name: string;
         // ... other fields
     }
     
     export interface Review {
         id: number;
         companyId: number;
         rating: number;
         // ... other fields
     }
     -------------------

